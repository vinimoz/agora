{"version":3,"mappings":"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","names":["_sfc_main","_hoisted_1","_hoisted_3","_hoisted_4","_sfc_render","createElementVNode","_hoisted_2","_hoisted_1$6","_hoisted_2$5","_sfc_main$6","_hoisted_3$4","_sfc_render$6","_hoisted_4$3","_sfc_main$4","_sfc_main$3","_sfc_main$2","_hoisted_1$1","_sfc_render$2","_sfc_main$1","_sfc_render$1","v","values","t","u","a","h","n","re","A","r","B","L","D","O","d","w","P","$","R","F","c","node","getComputedStyle","element","tableElements","list","x","html","root","text","search","index","VueSelect","map","name","isPlainObject","getProperty","extend","ok","wrap","position","point","path","extname","assertPath","code","field","basename","dirname","self","own","file","assert","tree","compiler","value","parameters","isPlainObj","emptyOptions","toString","one","all","characterReference","types","splice","hasOwnProperty","combineExtensions","syntaxExtension","constructs","normalizeIdentifier","asciiAlpha","regexCheck","asciiAlphanumeric","asciiControl","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","replace","factorySpace","max","previous","document","seen","classifyCharacter","resolveAll","offset","tokenizeBlankLine","exit","effects","start","nok","furtherStart","definition","titleBefore","content","blankLine","heading","paragraph","string","thematicBreak","m","parse","ms","createDebug","debug","disable","from","create","emphasis","hardBreak","image","listItem","data","blockQuote","codeText","link","extension","escapeStringRegexp","findAndReplace","convert","visitParents","find","toExpression","blockquote","footnoteReference","imageReference","inlineCode","linkReference","strong","result","serialize","structuredClone","handlers","handle","stringify","empty","space","svg","whitespace","cjs","this","require$$1","isIdentifierName","anyFactory","checks","castFactory","properties","loadState","index2","table","insideSpan","axios","toHast","rehype2react"],"ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159],"sources":["../node_modules/@nextcloud/vue/dist/chunks/ChevronDown-FiGpp0KT.mjs","../node_modules/@nextcloud/vue/dist/chunks/NcInputField-Cz1RwzSy.mjs","../node_modules/@nextcloud/vue/dist/chunks/NcTextField.vue_vue_type_script_setup_true_lang-DzcUUWHO.mjs","../node_modules/@nextcloud/vue/node_modules/@nextcloud/initial-state/dist/index.js","../node_modules/@nextcloud/vue/dist/chunks/NcCheckboxRadioSwitch-Da0F7y0G.mjs","../node_modules/vue-select/dist/vue-select.es.js","../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","../node_modules/@nextcloud/vue/dist/chunks/NcHighlight.vue_vue_type_script_lang-DnWQDM_2.mjs","../node_modules/@nextcloud/vue/dist/chunks/NcEllipsisedOption-C8uNDC-j.mjs","../node_modules/@nextcloud/vue/dist/chunks/NcSelect-C6qHqfAO.mjs","../node_modules/bail/index.js","../node_modules/extend/index.js","../node_modules/devlop/lib/development.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-util-symbol/lib/codes.js","../node_modules/micromark-util-symbol/lib/constants.js","../node_modules/micromark-util-symbol/lib/types.js","../node_modules/micromark-util-symbol/lib/values.js","../node_modules/micromark-util-chunked/dev/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-decode-numeric-character-reference/dev/index.js","../node_modules/micromark-util-normalize-identifier/dev/index.js","../node_modules/micromark-util-character/dev/index.js","../node_modules/micromark-util-sanitize-uri/dev/index.js","../node_modules/micromark-factory-space/dev/index.js","../node_modules/micromark/dev/lib/initialize/content.js","../node_modules/micromark/dev/lib/initialize/document.js","../node_modules/micromark-util-classify-character/dev/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-core-commonmark/dev/lib/attention.js","../node_modules/micromark-core-commonmark/dev/lib/autolink.js","../node_modules/micromark-core-commonmark/dev/lib/blank-line.js","../node_modules/micromark-core-commonmark/dev/lib/block-quote.js","../node_modules/micromark-core-commonmark/dev/lib/character-escape.js","../node_modules/micromark-core-commonmark/dev/lib/character-reference.js","../node_modules/micromark-core-commonmark/dev/lib/code-fenced.js","../node_modules/micromark-core-commonmark/dev/lib/code-indented.js","../node_modules/micromark-core-commonmark/dev/lib/code-text.js","../node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/dev/index.js","../node_modules/micromark-core-commonmark/dev/lib/content.js","../node_modules/micromark-factory-destination/dev/index.js","../node_modules/micromark-factory-label/dev/index.js","../node_modules/micromark-factory-title/dev/index.js","../node_modules/micromark-factory-whitespace/dev/index.js","../node_modules/micromark-core-commonmark/dev/lib/definition.js","../node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/dev/lib/heading-atx.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/dev/lib/html-flow.js","../node_modules/micromark-core-commonmark/dev/lib/html-text.js","../node_modules/micromark-core-commonmark/dev/lib/label-end.js","../node_modules/micromark-core-commonmark/dev/lib/label-start-image.js","../node_modules/micromark-core-commonmark/dev/lib/label-start-link.js","../node_modules/micromark-core-commonmark/dev/lib/line-ending.js","../node_modules/micromark-core-commonmark/dev/lib/thematic-break.js","../node_modules/micromark-core-commonmark/dev/lib/list.js","../node_modules/micromark-core-commonmark/dev/lib/setext-underline.js","../node_modules/micromark/dev/lib/initialize/flow.js","../node_modules/micromark/dev/lib/initialize/text.js","../node_modules/micromark/dev/lib/constructs.js","../node_modules/ms/index.js","../node_modules/debug/src/common.js","../node_modules/debug/src/browser.js","../node_modules/micromark/dev/lib/create-tokenizer.js","../node_modules/micromark/dev/lib/parse.js","../node_modules/micromark/dev/lib/postprocess.js","../node_modules/micromark/dev/lib/preprocess.js","../node_modules/micromark-util-decode-string/dev/index.js","../node_modules/mdast-util-from-markdown/dev/lib/index.js","../node_modules/remark-parse/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-newline-to-break/lib/index.js","../node_modules/remark-breaks/lib/index.js","../node_modules/mdast-squeeze-paragraphs/lib/index.js","../node_modules/remark-unlink-protocols/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/cjs/index.js","../node_modules/style-to-js/cjs/utilities.js","../node_modules/style-to-js/cjs/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/rehype-react/lib/index.js","../node_modules/hast-util-is-element/lib/index.js","../node_modules/is-absolute-url/index.js","../node_modules/rehype-external-links/lib/index.js","../node_modules/@nextcloud/vue/dist/chunks/customPickerElements-BmkXSNdO.mjs","../node_modules/@nextcloud/vue/dist/chunks/referencePickerModal-BtI-8rNN.mjs","../node_modules/@nextcloud/sharing/dist/public.mjs","../node_modules/@nextcloud/vue/dist/chunks/NcRichText-G8kzsdwx.mjs"],"sourcesContent":["import { createElementBlock, openBlock, mergeProps, createElementVNode, createCommentVNode, toDisplayString } from \"vue\";\nimport { _ as _export_sfc } from \"./_plugin-vue_export-helper-1tPrXgE0.mjs\";\nconst _sfc_main = {\n  name: \"ChevronDownIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3 = { d: \"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\" };\nconst _hoisted_4 = { key: 0 };\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon chevron-down-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2))\n  ], 16, _hoisted_1);\n}\nconst ChevronDown = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport {\n  ChevronDown as C\n};\n//# sourceMappingURL=ChevronDown-FiGpp0KT.mjs.map\n","import '../assets/NcInputField-Xm6zpzck.css';\nimport { defineComponent, mergeModels, useModel, useAttrs, useTemplateRef, computed, warn, createElementBlock, openBlock, normalizeClass, createElementVNode, createCommentVNode, withDirectives, createBlock, mergeProps, toDisplayString, renderSlot, vShow, unref, withCtx, createTextVNode } from \"vue\";\nimport { d as mdiCheck, e as mdiAlertCircle } from \"./mdi-B9TPxVka.mjs\";\nimport { N as NcButton } from \"./NcButton-BMnvzy1A.mjs\";\nimport { N as NcIconSvgWrapper } from \"./NcIconSvgWrapper-CprKb_SE.mjs\";\nimport { c as createElementId } from \"./createElementId-DhjFt1I9.mjs\";\nimport { _ as _export_sfc } from \"./_plugin-vue_export-helper-1tPrXgE0.mjs\";\nconst _hoisted_1 = { class: \"input-field__main-wrapper\" };\nconst _hoisted_2 = [\"id\", \"aria-describedby\", \"disabled\", \"placeholder\", \"type\", \"value\"];\nconst _hoisted_3 = [\"for\"];\nconst _hoisted_4 = { class: \"input-field__icon input-field__icon--leading\" };\nconst _hoisted_5 = {\n  key: 2,\n  class: \"input-field__icon input-field__icon--trailing\"\n};\nconst _hoisted_6 = [\"id\"];\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...{\n    inheritAttrs: false\n  },\n  __name: \"NcInputField\",\n  props: /* @__PURE__ */ mergeModels({\n    class: { default: \"\" },\n    inputClass: { default: \"\" },\n    id: { default: () => createElementId() },\n    label: { default: void 0 },\n    labelOutside: { type: Boolean },\n    type: { default: \"text\" },\n    placeholder: { default: void 0 },\n    showTrailingButton: { type: Boolean },\n    trailingButtonLabel: { default: void 0 },\n    success: { type: Boolean },\n    error: { type: Boolean },\n    helperText: { default: \"\" },\n    disabled: { type: Boolean },\n    pill: { type: Boolean }\n  }, {\n    \"modelValue\": { required: true },\n    \"modelModifiers\": {}\n  }),\n  emits: /* @__PURE__ */ mergeModels([\"trailingButtonClick\"], [\"update:modelValue\"]),\n  setup(__props, { expose: __expose, emit: __emit }) {\n    const props = __props;\n    const modelValue = useModel(__props, \"modelValue\");\n    const emit = __emit;\n    __expose({\n      focus,\n      select\n    });\n    const attrs = useAttrs();\n    const input = useTemplateRef(\"input-key\");\n    const hasTrailingIcon = computed(() => props.showTrailingButton || props.success);\n    const isValidLabel = computed(() => {\n      const isValidLabel2 = props.label || props.labelOutside;\n      if (!isValidLabel2) {\n        warn(\"You need to add a label to the NcInputField component. Either use the prop label or use an external one, as per the example in the documentation.\");\n      }\n      return isValidLabel2;\n    });\n    const ariaDescribedby = computed(() => {\n      const ariaDescribedby2 = [];\n      if (props.helperText) {\n        ariaDescribedby2.push(`${props.id}-helper-text`);\n      }\n      if (attrs[\"aria-describedby\"]) {\n        ariaDescribedby2.push(String(attrs[\"aria-describedby\"]));\n      }\n      return ariaDescribedby2.join(\" \") || void 0;\n    });\n    function focus(options) {\n      input.value.focus(options);\n    }\n    function select() {\n      input.value.select();\n    }\n    function handleInput(event) {\n      const target = event.target;\n      modelValue.value = props.type === \"number\" && typeof modelValue.value === \"number\" ? parseFloat(target.value) : target.value;\n    }\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([\"input-field\", [{\n          \"input-field--disabled\": _ctx.disabled,\n          \"input-field--error\": _ctx.error,\n          \"input-field--label-outside\": _ctx.labelOutside || !isValidLabel.value,\n          \"input-field--leading-icon\": !!_ctx.$slots.icon,\n          \"input-field--trailing-icon\": hasTrailingIcon.value,\n          \"input-field--pill\": _ctx.pill,\n          \"input-field--success\": _ctx.success\n        }, _ctx.$props.class]])\n      }, [\n        createElementVNode(\"div\", _hoisted_1, [\n          createElementVNode(\"input\", mergeProps(_ctx.$attrs, {\n            id: _ctx.id,\n            ref: \"input-key\",\n            \"aria-describedby\": ariaDescribedby.value,\n            \"aria-live\": \"polite\",\n            class: [\"input-field__input\", _ctx.inputClass],\n            disabled: _ctx.disabled,\n            placeholder: _ctx.placeholder,\n            type: _ctx.type,\n            value: modelValue.value.toString(),\n            onInput: handleInput\n          }), null, 16, _hoisted_2),\n          !_ctx.labelOutside && isValidLabel.value ? (openBlock(), createElementBlock(\"label\", {\n            key: 0,\n            class: \"input-field__label\",\n            for: _ctx.id\n          }, toDisplayString(_ctx.label), 9, _hoisted_3)) : createCommentVNode(\"\", true),\n          withDirectives(createElementVNode(\"div\", _hoisted_4, [\n            renderSlot(_ctx.$slots, \"icon\", {}, void 0, true)\n          ], 512), [\n            [vShow, !!_ctx.$slots.icon]\n          ]),\n          _ctx.showTrailingButton ? (openBlock(), createBlock(unref(NcButton), {\n            key: 1,\n            class: \"input-field__trailing-button\",\n            \"aria-label\": _ctx.trailingButtonLabel,\n            disabled: _ctx.disabled,\n            variant: \"tertiary-no-background\",\n            onClick: _cache[0] || (_cache[0] = ($event) => emit(\"trailingButtonClick\", $event))\n          }, {\n            icon: withCtx(() => [\n              renderSlot(_ctx.$slots, \"trailing-button-icon\", {}, void 0, true)\n            ]),\n            _: 3\n          }, 8, [\"aria-label\", \"disabled\"])) : _ctx.success || _ctx.error ? (openBlock(), createElementBlock(\"div\", _hoisted_5, [\n            _ctx.success ? (openBlock(), createBlock(unref(NcIconSvgWrapper), {\n              key: 0,\n              path: unref(mdiCheck)\n            }, null, 8, [\"path\"])) : (openBlock(), createBlock(unref(NcIconSvgWrapper), {\n              key: 1,\n              path: unref(mdiAlertCircle)\n            }, null, 8, [\"path\"]))\n          ])) : createCommentVNode(\"\", true)\n        ]),\n        _ctx.helperText ? (openBlock(), createElementBlock(\"p\", {\n          key: 0,\n          id: `${_ctx.id}-helper-text`,\n          class: \"input-field__helper-text-message\"\n        }, [\n          _ctx.success ? (openBlock(), createBlock(unref(NcIconSvgWrapper), {\n            key: 0,\n            class: \"input-field__helper-text-message__icon\",\n            path: unref(mdiCheck)\n          }, null, 8, [\"path\"])) : _ctx.error ? (openBlock(), createBlock(unref(NcIconSvgWrapper), {\n            key: 1,\n            class: \"input-field__helper-text-message__icon\",\n            path: unref(mdiAlertCircle)\n          }, null, 8, [\"path\"])) : createCommentVNode(\"\", true),\n          createTextVNode(\" \" + toDisplayString(_ctx.helperText), 1)\n        ], 8, _hoisted_6)) : createCommentVNode(\"\", true)\n      ], 2);\n    };\n  }\n});\nconst NcInputField = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__scopeId\", \"data-v-ae9805f8\"]]);\nexport {\n  NcInputField as N\n};\n//# sourceMappingURL=NcInputField-Cz1RwzSy.mjs.map\n","import { defineComponent, mergeModels, useModel, useTemplateRef, computed, createBlock, openBlock, unref, mergeProps, createSlots, withCtx, renderSlot } from \"vue\";\nimport { m as mdiArrowRight, a as mdiUndo, b as mdiClose } from \"./mdi-B9TPxVka.mjs\";\nimport { N as NcIconSvgWrapper } from \"./NcIconSvgWrapper-CprKb_SE.mjs\";\nimport { N as NcInputField } from \"./NcInputField-Cz1RwzSy.mjs\";\nimport { r as register, a as t } from \"./_l10n-ZllQPIu_.mjs\";\nregister();\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  __name: \"NcTextField\",\n  props: /* @__PURE__ */ mergeModels({\n    class: {},\n    inputClass: {},\n    id: {},\n    label: {},\n    labelOutside: { type: Boolean },\n    type: {},\n    placeholder: {},\n    showTrailingButton: { type: Boolean },\n    trailingButtonLabel: { default: void 0 },\n    success: { type: Boolean },\n    error: { type: Boolean },\n    helperText: {},\n    disabled: { type: Boolean },\n    pill: { type: Boolean },\n    trailingButtonIcon: { default: \"close\" }\n  }, {\n    \"modelValue\": { default: \"\" },\n    \"modelModifiers\": {}\n  }),\n  emits: [\"update:modelValue\"],\n  setup(__props, { expose: __expose }) {\n    const props = __props;\n    const modelValue = useModel(__props, \"modelValue\");\n    __expose({\n      focus,\n      select\n    });\n    const inputField = useTemplateRef(\"input-field-key\");\n    const defaultTrailingButtonLabels = {\n      arrowEnd: t(\"Save changes\"),\n      close: t(\"Clear text\"),\n      undo: t(\"Undo changes\")\n    };\n    const NcInputFieldPropNames = new Set(Object.keys(NcInputField.props));\n    const propsToForward = computed(() => {\n      const sharedProps = Object.fromEntries(\n        Object.entries(props).filter(([key]) => NcInputFieldPropNames.has(key))\n      );\n      sharedProps.trailingButtonLabel ??= defaultTrailingButtonLabels[props.trailingButtonIcon];\n      return sharedProps;\n    });\n    function focus(options) {\n      inputField.value.focus(options);\n    }\n    function select() {\n      inputField.value.select();\n    }\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(NcInputField), mergeProps(propsToForward.value, {\n        ref: \"input-field-key\",\n        modelValue: modelValue.value,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event) => modelValue.value = $event)\n      }), createSlots({ _: 2 }, [\n        !!_ctx.$slots.icon ? {\n          name: \"icon\",\n          fn: withCtx(() => [\n            renderSlot(_ctx.$slots, \"icon\")\n          ]),\n          key: \"0\"\n        } : void 0,\n        _ctx.type !== \"search\" ? {\n          name: \"trailing-button-icon\",\n          fn: withCtx(() => [\n            _ctx.trailingButtonIcon === \"arrowEnd\" ? (openBlock(), createBlock(unref(NcIconSvgWrapper), {\n              key: 0,\n              directional: \"\",\n              path: unref(mdiArrowRight)\n            }, null, 8, [\"path\"])) : (openBlock(), createBlock(unref(NcIconSvgWrapper), {\n              key: 1,\n              path: _ctx.trailingButtonIcon === \"undo\" ? unref(mdiUndo) : unref(mdiClose)\n            }, null, 8, [\"path\"]))\n          ]),\n          key: \"1\"\n        } : void 0\n      ]), 1040, [\"modelValue\"]);\n    };\n  }\n});\nexport {\n  _sfc_main as _\n};\n//# sourceMappingURL=NcTextField.vue_vue_type_script_setup_true_lang-DzcUUWHO.mjs.map\n","/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: GPL-3.0-or-later\n */\n/**\n * @param app app ID, e.g. \"mail\"\n * @param key name of the property\n * @param fallback optional parameter to use as default value\n * @throws if the key can't be found\n */\nexport function loadState(app, key, fallback) {\n    const selector = `#initial-state-${app}-${key}`;\n    if (window._nc_initial_state?.has(selector)) {\n        return window._nc_initial_state.get(selector);\n    }\n    else if (!window._nc_initial_state) {\n        window._nc_initial_state = new Map();\n    }\n    const elem = document.querySelector(selector);\n    if (elem === null) {\n        if (fallback !== undefined) {\n            return fallback;\n        }\n        throw new Error(`Could not find initial state ${key} of ${app}`);\n    }\n    try {\n        const parsedValue = JSON.parse(atob(elem.value));\n        window._nc_initial_state.set(selector, parsedValue);\n        return parsedValue;\n    }\n    catch (error) {\n        console.error('[@nextcloud/initial-state] Could not parse initial state', { key, app, error });\n        if (fallback !== undefined) {\n            return fallback;\n        }\n        throw new Error(`Could not parse initial state ${key} of ${app}`, { cause: error });\n    }\n}\n","import '../assets/NcCheckboxRadioSwitch-Cbnc4p0H.css';\nimport { createElementBlock, openBlock, mergeProps, createElementVNode, createCommentVNode, toDisplayString, resolveComponent, normalizeClass, renderSlot, createBlock, resolveDynamicComponent, toHandlers, withCtx, createVNode, createSlots, useCssVars } from \"vue\";\nimport { _ as _export_sfc } from \"./_plugin-vue_export-helper-1tPrXgE0.mjs\";\nimport { N as NcLoadingIcon } from \"./NcLoadingIcon-CiMp51wb.mjs\";\nimport { c as createElementId } from \"./createElementId-DhjFt1I9.mjs\";\nimport { r as register, u as n, a as t } from \"./_l10n-ZllQPIu_.mjs\";\nconst _sfc_main$8 = {\n  name: \"CheckboxBlankOutlineIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$7 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2$6 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3$6 = { d: \"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\" };\nconst _hoisted_4$6 = { key: 0 };\nfunction _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon checkbox-blank-outline-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3$6, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4$6, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2$6))\n  ], 16, _hoisted_1$7);\n}\nconst CheckboxBlankOutline = /* @__PURE__ */ _export_sfc(_sfc_main$8, [[\"render\", _sfc_render$8]]);\nconst _sfc_main$7 = {\n  name: \"MinusBoxIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$6 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2$5 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3$5 = { d: \"M17,13H7V11H17M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z\" };\nconst _hoisted_4$5 = { key: 0 };\nfunction _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon minus-box-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3$5, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4$5, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2$5))\n  ], 16, _hoisted_1$6);\n}\nconst MinusBox = /* @__PURE__ */ _export_sfc(_sfc_main$7, [[\"render\", _sfc_render$7]]);\nconst _sfc_main$6 = {\n  name: \"CheckboxMarkedIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$5 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2$4 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3$4 = { d: \"M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z\" };\nconst _hoisted_4$4 = { key: 0 };\nfunction _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon checkbox-marked-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3$4, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4$4, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2$4))\n  ], 16, _hoisted_1$5);\n}\nconst CheckboxMarked = /* @__PURE__ */ _export_sfc(_sfc_main$6, [[\"render\", _sfc_render$6]]);\nconst _sfc_main$5 = {\n  name: \"RadioboxMarkedIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$4 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2$3 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3$3 = { d: \"M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z\" };\nconst _hoisted_4$3 = { key: 0 };\nfunction _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon radiobox-marked-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3$3, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4$3, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2$3))\n  ], 16, _hoisted_1$4);\n}\nconst RadioboxMarked = /* @__PURE__ */ _export_sfc(_sfc_main$5, [[\"render\", _sfc_render$5]]);\nconst _sfc_main$4 = {\n  name: \"RadioboxBlankIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$3 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2$2 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3$2 = { d: \"M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\" };\nconst _hoisted_4$2 = { key: 0 };\nfunction _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon radiobox-blank-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3$2, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4$2, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2$2))\n  ], 16, _hoisted_1$3);\n}\nconst RadioboxBlank = /* @__PURE__ */ _export_sfc(_sfc_main$4, [[\"render\", _sfc_render$4]]);\nconst _sfc_main$3 = {\n  name: \"ToggleSwitchOffIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$2 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2$1 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3$1 = { d: \"M17,7H7A5,5 0 0,0 2,12A5,5 0 0,0 7,17H17A5,5 0 0,0 22,12A5,5 0 0,0 17,7M7,15A3,3 0 0,1 4,12A3,3 0 0,1 7,9A3,3 0 0,1 10,12A3,3 0 0,1 7,15Z\" };\nconst _hoisted_4$1 = { key: 0 };\nfunction _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon toggle-switch-off-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3$1, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4$1, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2$1))\n  ], 16, _hoisted_1$2);\n}\nconst ToggleSwitchOff = /* @__PURE__ */ _export_sfc(_sfc_main$3, [[\"render\", _sfc_render$3]]);\nconst _sfc_main$2 = {\n  name: \"ToggleSwitchIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$1 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3 = { d: \"M17,7H7A5,5 0 0,0 2,12A5,5 0 0,0 7,17H17A5,5 0 0,0 22,12A5,5 0 0,0 17,7M17,15A3,3 0 0,1 14,12A3,3 0 0,1 17,9A3,3 0 0,1 20,12A3,3 0 0,1 17,15Z\" };\nconst _hoisted_4 = { key: 0 };\nfunction _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon toggle-switch-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2))\n  ], 16, _hoisted_1$1);\n}\nconst ToggleSwitch = /* @__PURE__ */ _export_sfc(_sfc_main$2, [[\"render\", _sfc_render$2]]);\nconst TYPE_CHECKBOX = \"checkbox\";\nconst TYPE_RADIO = \"radio\";\nconst TYPE_SWITCH = \"switch\";\nconst TYPE_BUTTON = \"button\";\nconst _sfc_main$1 = {\n  name: \"NcCheckboxContent\",\n  components: {\n    NcLoadingIcon\n  },\n  props: {\n    /**\n     * Class for the icon element\n     */\n    iconClass: {\n      type: [String, Object],\n      default: null\n    },\n    /**\n     * Class for the text element\n     */\n    textClass: {\n      type: [String, Object],\n      default: null\n    },\n    /**\n     * Type of the input. checkbox, radio, switch, or button.\n     *\n     * Only use button when used in a `tablist` container and the\n     * `tab` role is set.\n     *\n     * @type {'checkbox'|'radio'|'switch'|'button'}\n     */\n    type: {\n      type: String,\n      default: \"checkbox\",\n      validator: (type) => [\n        TYPE_CHECKBOX,\n        TYPE_RADIO,\n        TYPE_SWITCH,\n        TYPE_BUTTON\n      ].includes(type)\n    },\n    /**\n     * Toggle the alternative button style\n     */\n    buttonVariant: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * True if the entry is checked\n     */\n    isChecked: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indeterminate state\n     */\n    indeterminate: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Loading state\n     */\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Icon size\n     */\n    iconSize: {\n      type: Number,\n      default: 24\n    }\n  },\n  computed: {\n    isButtonType() {\n      return this.type === TYPE_BUTTON;\n    },\n    /**\n     * Returns the proper Material icon depending on the select case\n     *\n     * @return {object}\n     */\n    checkboxRadioIconElement() {\n      if (this.type === TYPE_RADIO) {\n        if (this.isChecked) {\n          return RadioboxMarked;\n        }\n        return RadioboxBlank;\n      }\n      if (this.type === TYPE_SWITCH) {\n        if (this.isChecked) {\n          return ToggleSwitch;\n        }\n        return ToggleSwitchOff;\n      }\n      if (this.indeterminate) {\n        return MinusBox;\n      }\n      if (this.isChecked) {\n        return CheckboxMarked;\n      }\n      return CheckboxBlankOutline;\n    }\n  }\n};\nfunction _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NcLoadingIcon = resolveComponent(\"NcLoadingIcon\");\n  return openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass([\"checkbox-content\", {\n      [\"checkbox-content-\" + $props.type]: true,\n      \"checkbox-content--button-variant\": $props.buttonVariant,\n      \"checkbox-content--has-text\": !!_ctx.$slots.default\n    }])\n  }, [\n    createElementVNode(\"span\", {\n      class: normalizeClass({\n        \"checkbox-content__icon\": true,\n        \"checkbox-content__icon--checked\": $props.isChecked,\n        [$props.iconClass]: true\n      }),\n      \"aria-hidden\": true,\n      inert: \"\"\n    }, [\n      renderSlot(_ctx.$slots, \"icon\", {\n        checked: $props.isChecked,\n        loading: $props.loading\n      }, () => [\n        $props.loading ? (openBlock(), createBlock(_component_NcLoadingIcon, { key: 0 })) : !$props.buttonVariant ? (openBlock(), createBlock(resolveDynamicComponent($options.checkboxRadioIconElement), {\n          key: 1,\n          size: $props.iconSize\n        }, null, 8, [\"size\"])) : createCommentVNode(\"\", true)\n      ], true)\n    ], 2),\n    _ctx.$slots.default ? (openBlock(), createElementBlock(\"span\", {\n      key: 0,\n      class: normalizeClass([\"checkbox-content__text\", $props.textClass])\n    }, [\n      renderSlot(_ctx.$slots, \"default\", {}, void 0, true)\n    ], 2)) : createCommentVNode(\"\", true)\n  ], 2);\n}\nconst NcCheckboxContent = /* @__PURE__ */ _export_sfc(_sfc_main$1, [[\"render\", _sfc_render$1], [\"__scopeId\", \"data-v-e7ac5ac5\"]]);\nregister();\nconst _sfc_main = {\n  name: \"NcCheckboxRadioSwitch\",\n  components: {\n    NcCheckboxContent\n  },\n  // We need to pass attributes to the input element\n  inheritAttrs: false,\n  props: {\n    /**\n     * Unique id attribute of the input\n     */\n    id: {\n      type: String,\n      default: () => \"checkbox-radio-switch-\" + createElementId(),\n      validator: (id) => id.trim() !== \"\"\n    },\n    /**\n     * Unique id attribute of the wrapper element\n     */\n    wrapperId: {\n      type: String,\n      default: null\n    },\n    /**\n     * Input name. Required for radio, optional for checkbox, and ignored\n     * for button.\n     */\n    name: {\n      type: String,\n      default: null\n    },\n    /**\n     * Required if no text is set.\n     * The aria-label is forwarded to the input or button.\n     */\n    ariaLabel: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * Type of the input. checkbox, radio, switch, or button.\n     *\n     * Only use button when used in a `tablist` container and the\n     * `tab` role is set.\n     *\n     * @type {'checkbox'|'radio'|'switch'|'button'}\n     */\n    type: {\n      type: String,\n      default: \"checkbox\",\n      validator: (type) => [\n        TYPE_CHECKBOX,\n        TYPE_RADIO,\n        TYPE_SWITCH,\n        TYPE_BUTTON\n      ].includes(type)\n    },\n    /**\n     * Toggle the alternative button style\n     */\n    buttonVariant: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Are the elements are all direct siblings?\n     * If so they will be grouped horizontally or vertically\n     *\n     * @type {'no'|'horizontal'|'vertical'}\n     */\n    buttonVariantGrouped: {\n      type: String,\n      default: \"no\",\n      validator: (v) => [\"no\", \"vertical\", \"horizontal\"].includes(v)\n    },\n    /**\n     * Checked state. To be used with `v-model:value`\n     */\n    modelValue: {\n      type: [Boolean, Array, String],\n      default: false\n    },\n    /**\n     * Value to be synced on check\n     */\n    value: {\n      type: String,\n      default: null\n    },\n    /**\n     * Disabled state\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Indeterminate state\n     */\n    indeterminate: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Required state\n     */\n    required: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Loading state\n     */\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Wrapping element tag\n     *\n     * When `type` is set to `button` this will be ignored\n     *\n     * Defaults to `span`\n     */\n    wrapperElement: {\n      type: String,\n      default: null\n    },\n    /**\n     * The class(es) to pass to the wrapper / root element of the component\n     */\n    class: {\n      type: [String, Array, Object],\n      default: \"\"\n    },\n    /**\n     * The style to pass to the wrapper / root element of the component\n     */\n    style: {\n      type: [String, Array, Object],\n      default: \"\"\n    }\n  },\n  emits: [\"update:modelValue\"],\n  computed: {\n    isButtonType() {\n      return this.type === TYPE_BUTTON;\n    },\n    computedWrapperElement() {\n      if (this.isButtonType) {\n        return \"button\";\n      }\n      if (this.wrapperElement !== null) {\n        return this.wrapperElement;\n      }\n      return \"span\";\n    },\n    listeners() {\n      if (this.isButtonType) {\n        return {\n          click: this.onToggle\n        };\n      }\n      return {\n        change: this.onToggle\n      };\n    },\n    iconSize() {\n      return this.type === TYPE_SWITCH ? 36 : 20;\n    },\n    cssIconSize() {\n      return this.iconSize + \"px\";\n    },\n    cssIconHeight() {\n      return this.type === TYPE_SWITCH ? \"16px\" : this.cssIconSize;\n    },\n    /**\n     * Return the input type.\n     * Switch is not an official type\n     *\n     * @return {string}\n     */\n    inputType() {\n      const nativeTypes = [\n        TYPE_CHECKBOX,\n        TYPE_RADIO,\n        TYPE_BUTTON\n      ];\n      if (nativeTypes.includes(this.type)) {\n        return this.type;\n      }\n      return TYPE_CHECKBOX;\n    },\n    /**\n     * Check if that entry is checked\n     * If value is defined, we use that as the checked value\n     * If not, we expect true/false in this.checked\n     *\n     * @return {boolean}\n     */\n    isChecked() {\n      if (this.value !== null) {\n        if (Array.isArray(this.modelValue)) {\n          return [...this.modelValue].indexOf(this.value) > -1;\n        }\n        return this.modelValue === this.value;\n      }\n      return this.modelValue === true;\n    },\n    hasIndeterminate() {\n      return [\n        TYPE_CHECKBOX,\n        TYPE_RADIO\n      ].includes(this.inputType);\n    }\n  },\n  mounted() {\n    if (this.name && this.type === TYPE_CHECKBOX) {\n      if (!Array.isArray(this.modelValue)) {\n        throw new Error(\"When using groups of checkboxes, the updated value will be an array.\");\n      }\n    }\n    if (this.name && this.type === TYPE_SWITCH) {\n      throw new Error(\"Switches are not made to be used for data sets. Please use checkboxes instead.\");\n    }\n    if (typeof this.modelValue !== \"boolean\" && this.type === TYPE_SWITCH) {\n      throw new Error(\"Switches can only be used with boolean as modelValue prop.\");\n    }\n  },\n  methods: {\n    t,\n    n,\n    onToggle(event) {\n      if (this.disabled || event.target.tagName.toLowerCase() === \"a\") {\n        return;\n      }\n      if (this.type === TYPE_RADIO) {\n        this.$emit(\"update:modelValue\", this.value);\n        return;\n      }\n      if (this.type === TYPE_SWITCH) {\n        this.$emit(\"update:modelValue\", !this.isChecked);\n        return;\n      }\n      if (typeof this.modelValue === \"boolean\") {\n        this.$emit(\"update:modelValue\", !this.modelValue);\n        return;\n      }\n      const values = this.getInputsSet().filter((input) => input.checked).map((input) => input.value);\n      if (values.includes(this.value)) {\n        this.$emit(\"update:modelValue\", values.filter((v) => v !== this.value));\n      } else {\n        this.$emit(\"update:modelValue\", [...values, this.value]);\n      }\n    },\n    /**\n     * Get the input set based on this name\n     *\n     * @return {Node[]}\n     */\n    getInputsSet() {\n      return [...document.getElementsByName(this.name)];\n    }\n  }\n};\nconst __injectCSSVars__ = () => {\n  useCssVars((_ctx) => ({\n    \"0b7fadd0\": _ctx.cssIconSize,\n    \"57d4f07e\": _ctx.cssIconHeight\n  }));\n};\nconst __setup__ = _sfc_main.setup;\n_sfc_main.setup = __setup__ ? (props, ctx) => {\n  __injectCSSVars__();\n  return __setup__(props, ctx);\n} : __injectCSSVars__;\nconst _hoisted_1 = [\"id\", \"aria-labelledby\", \"aria-label\", \"disabled\", \"type\", \"value\", \"checked\", \".indeterminate\", \"required\", \"name\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NcCheckboxContent = resolveComponent(\"NcCheckboxContent\");\n  return openBlock(), createBlock(resolveDynamicComponent($options.computedWrapperElement), mergeProps({\n    id: $props.wrapperId ?? ($options.isButtonType ? $props.id : null),\n    \"aria-label\": $options.isButtonType && $props.ariaLabel ? $props.ariaLabel : void 0,\n    class: [\"checkbox-radio-switch\", [\n      _ctx.$props.class,\n      {\n        [\"checkbox-radio-switch-\" + $props.type]: $props.type,\n        \"checkbox-radio-switch--checked\": $options.isChecked,\n        \"checkbox-radio-switch--disabled\": $props.disabled,\n        \"checkbox-radio-switch--indeterminate\": $options.hasIndeterminate ? $props.indeterminate : false,\n        \"checkbox-radio-switch--button-variant\": $props.buttonVariant,\n        \"checkbox-radio-switch--button-variant-v-grouped\": $props.buttonVariant && $props.buttonVariantGrouped === \"vertical\",\n        \"checkbox-radio-switch--button-variant-h-grouped\": $props.buttonVariant && $props.buttonVariantGrouped === \"horizontal\",\n        \"button-vue\": $options.isButtonType\n      }\n    ]],\n    style: $props.style,\n    type: $options.isButtonType ? \"button\" : null\n  }, $options.isButtonType ? _ctx.$attrs : {}, toHandlers($options.isButtonType ? $options.listeners : {})), {\n    default: withCtx(() => [\n      !$options.isButtonType ? (openBlock(), createElementBlock(\"input\", mergeProps({\n        key: 0,\n        id: $props.id,\n        \"aria-labelledby\": !$options.isButtonType && !$props.ariaLabel ? `${$props.id}-label` : null,\n        \"aria-label\": $props.ariaLabel || void 0,\n        class: \"checkbox-radio-switch__input\",\n        disabled: $props.disabled,\n        type: $options.inputType,\n        value: $props.value,\n        checked: $options.isChecked,\n        \".indeterminate\": $options.hasIndeterminate ? $props.indeterminate : null,\n        required: $props.required,\n        name: $props.name\n      }, _ctx.$attrs, toHandlers($options.listeners, true)), null, 48, _hoisted_1)) : createCommentVNode(\"\", true),\n      createVNode(_component_NcCheckboxContent, {\n        id: !$options.isButtonType ? `${$props.id}-label` : void 0,\n        class: \"checkbox-radio-switch__content\",\n        \"icon-class\": \"checkbox-radio-switch__icon\",\n        \"text-class\": \"checkbox-radio-switch__text\",\n        type: $props.type,\n        indeterminate: $options.hasIndeterminate ? $props.indeterminate : false,\n        \"button-variant\": $props.buttonVariant,\n        \"is-checked\": $options.isChecked,\n        loading: $props.loading,\n        \"icon-size\": $options.iconSize,\n        onClick: $options.onToggle\n      }, createSlots({\n        icon: withCtx(() => [\n          renderSlot(_ctx.$slots, \"icon\", {}, void 0, true)\n        ]),\n        _: 2\n      }, [\n        !!_ctx.$slots.default ? {\n          name: \"default\",\n          fn: withCtx(() => [\n            renderSlot(_ctx.$slots, \"default\", {}, void 0, true)\n          ]),\n          key: \"0\"\n        } : void 0\n      ]), 1032, [\"id\", \"type\", \"indeterminate\", \"button-variant\", \"is-checked\", \"loading\", \"icon-size\", \"onClick\"])\n    ]),\n    _: 3\n  }, 16, [\"id\", \"aria-label\", \"class\", \"style\", \"type\"]);\n}\nconst NcCheckboxRadioSwitch = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__scopeId\", \"data-v-10606260\"]]);\nexport {\n  NcCheckboxRadioSwitch as N\n};\n//# sourceMappingURL=NcCheckboxRadioSwitch-Da0F7y0G.mjs.map\n","var E = Object.defineProperty, M = Object.defineProperties;\nvar x = Object.getOwnPropertyDescriptors;\nvar V = Object.getOwnPropertySymbols;\nvar I = Object.prototype.hasOwnProperty, N = Object.prototype.propertyIsEnumerable;\nvar C = (e, t, s) => t in e ? E(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : e[t] = s, f = (e, t) => {\n  for (var s in t || (t = {}))\n    I.call(t, s) && C(e, s, t[s]);\n  if (V)\n    for (var s of V(t))\n      N.call(t, s) && C(e, s, t[s]);\n  return e;\n}, m = (e, t) => M(e, x(t));\nimport { openBlock as a, createElementBlock as h, createElementVNode as u, resolveDirective as K, normalizeClass as A, renderSlot as r, normalizeProps as d, guardReactiveProps as c, Fragment as B, renderList as L, createTextVNode as v, toDisplayString as D, createBlock as b, resolveDynamicComponent as _, createCommentVNode as O, mergeProps as k, toHandlers as j, withDirectives as w, vShow as P, createVNode as $, Transition as R, withCtx as z, withModifiers as F } from \"vue\";\nconst U = {\n  props: {\n    autoscroll: {\n      type: Boolean,\n      default: !0\n    }\n  },\n  watch: {\n    typeAheadPointer() {\n      this.autoscroll && this.maybeAdjustScroll();\n    },\n    open(e) {\n      this.autoscroll && e && this.$nextTick(() => this.maybeAdjustScroll());\n    }\n  },\n  methods: {\n    maybeAdjustScroll() {\n      var t;\n      const e = ((t = this.$refs.dropdownMenu) == null ? void 0 : t.children[this.typeAheadPointer]) || !1;\n      if (e) {\n        const s = this.getDropdownViewport(), { top: n, bottom: l, height: i } = e.getBoundingClientRect();\n        if (n < s.top)\n          return this.$refs.dropdownMenu.scrollTop = e.offsetTop;\n        if (l > s.bottom)\n          return this.$refs.dropdownMenu.scrollTop = e.offsetTop - (s.height - i);\n      }\n    },\n    getDropdownViewport() {\n      return this.$refs.dropdownMenu ? this.$refs.dropdownMenu.getBoundingClientRect() : {\n        height: 0,\n        top: 0,\n        bottom: 0\n      };\n    }\n  }\n}, q = {\n  data() {\n    return {\n      typeAheadPointer: -1\n    };\n  },\n  watch: {\n    filteredOptions() {\n      for (let e = 0; e < this.filteredOptions.length; e++)\n        if (this.selectable(this.filteredOptions[e])) {\n          this.typeAheadPointer = e;\n          break;\n        }\n    },\n    open(e) {\n      e && this.typeAheadToLastSelected();\n    },\n    selectedValue() {\n      this.open && this.typeAheadToLastSelected();\n    }\n  },\n  methods: {\n    typeAheadUp() {\n      for (let e = this.typeAheadPointer - 1; e >= 0; e--)\n        if (this.selectable(this.filteredOptions[e])) {\n          this.typeAheadPointer = e;\n          break;\n        }\n    },\n    typeAheadDown() {\n      for (let e = this.typeAheadPointer + 1; e < this.filteredOptions.length; e++)\n        if (this.selectable(this.filteredOptions[e])) {\n          this.typeAheadPointer = e;\n          break;\n        }\n    },\n    typeAheadSelect() {\n      const e = this.filteredOptions[this.typeAheadPointer];\n      e && this.selectable(e) && this.select(e);\n    },\n    typeAheadToLastSelected() {\n      this.typeAheadPointer = this.selectedValue.length !== 0 ? this.filteredOptions.indexOf(this.selectedValue[this.selectedValue.length - 1]) : -1;\n    }\n  }\n}, J = {\n  props: {\n    loading: {\n      type: Boolean,\n      default: !1\n    }\n  },\n  data() {\n    return {\n      mutableLoading: !1\n    };\n  },\n  watch: {\n    search() {\n      this.$emit(\"search\", this.search, this.toggleLoading);\n    },\n    loading(e) {\n      this.mutableLoading = e;\n    }\n  },\n  methods: {\n    toggleLoading(e = null) {\n      return e == null ? this.mutableLoading = !this.mutableLoading : this.mutableLoading = e;\n    }\n  }\n}, S = (e, t) => {\n  const s = e.__vccOpts || e;\n  for (const [n, l] of t)\n    s[n] = l;\n  return s;\n}, H = {}, X = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"10\",\n  height: \"10\"\n}, Y = /* @__PURE__ */ u(\"path\", { d: \"M6.895455 5l2.842897-2.842898c.348864-.348863.348864-.914488 0-1.263636L9.106534.261648c-.348864-.348864-.914489-.348864-1.263636 0L5 3.104545 2.157102.261648c-.348863-.348864-.914488-.348864-1.263636 0L.261648.893466c-.348864.348864-.348864.914489 0 1.263636L3.104545 5 .261648 7.842898c-.348864.348863-.348864.914488 0 1.263636l.631818.631818c.348864.348864.914773.348864 1.263636 0L5 6.895455l2.842898 2.842897c.348863.348864.914772.348864 1.263636 0l.631818-.631818c.348864-.348864.348864-.914489 0-1.263636L6.895455 5z\" }, null, -1), Q = [\n  Y\n];\nfunction G(e, t) {\n  return a(), h(\"svg\", X, Q);\n}\nconst W = /* @__PURE__ */ S(H, [[\"render\", G]]), Z = {}, ee = {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"14\",\n  height: \"10\"\n}, te = /* @__PURE__ */ u(\"path\", { d: \"M9.211364 7.59931l4.48338-4.867229c.407008-.441854.407008-1.158247 0-1.60046l-.73712-.80023c-.407008-.441854-1.066904-.441854-1.474243 0L7 5.198617 2.51662.33139c-.407008-.441853-1.066904-.441853-1.474243 0l-.737121.80023c-.407008.441854-.407008 1.158248 0 1.600461l4.48338 4.867228L7 10l2.211364-2.40069z\" }, null, -1), se = [\n  te\n];\nfunction ie(e, t) {\n  return a(), h(\"svg\", ee, se);\n}\nconst oe = /* @__PURE__ */ S(Z, [[\"render\", ie]]), T = {\n  Deselect: W,\n  OpenIndicator: oe\n}, ne = {\n  mounted(e, { instance: t }) {\n    if (t.appendToBody) {\n      const {\n        height: s,\n        top: n,\n        left: l,\n        width: i\n      } = t.$refs.toggle.getBoundingClientRect();\n      let y = window.scrollX || window.pageXOffset, o = window.scrollY || window.pageYOffset;\n      e.unbindPosition = t.calculatePosition(e, t, {\n        width: i + \"px\",\n        left: y + l + \"px\",\n        top: o + n + s + \"px\"\n      }), document.body.appendChild(e);\n    }\n  },\n  unmounted(e, { instance: t }) {\n    t.appendToBody && (e.unbindPosition && typeof e.unbindPosition == \"function\" && e.unbindPosition(), e.parentNode && e.parentNode.removeChild(e));\n  }\n};\nfunction le(e) {\n  const t = {};\n  return Object.keys(e).sort().forEach((s) => {\n    t[s] = e[s];\n  }), JSON.stringify(t);\n}\nlet ae = 0;\nfunction re() {\n  return ++ae;\n}\nconst de = {\n  components: f({}, T),\n  directives: { appendToBody: ne },\n  mixins: [U, q, J],\n  compatConfig: {\n    MODE: 3\n  },\n  emits: [\n    \"open\",\n    \"close\",\n    \"update:modelValue\",\n    \"search\",\n    \"search:compositionstart\",\n    \"search:compositionend\",\n    \"search:keydown\",\n    \"search:blur\",\n    \"search:focus\",\n    \"search:input\",\n    \"option:created\",\n    \"option:selecting\",\n    \"option:selected\",\n    \"option:deselecting\",\n    \"option:deselected\"\n  ],\n  props: {\n    modelValue: {},\n    components: {\n      type: Object,\n      default: () => ({})\n    },\n    options: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: !1\n    },\n    clearable: {\n      type: Boolean,\n      default: !0\n    },\n    deselectFromDropdown: {\n      type: Boolean,\n      default: !1\n    },\n    searchable: {\n      type: Boolean,\n      default: !0\n    },\n    multiple: {\n      type: Boolean,\n      default: !1\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    transition: {\n      type: String,\n      default: \"vs__fade\"\n    },\n    clearSearchOnSelect: {\n      type: Boolean,\n      default: !0\n    },\n    closeOnSelect: {\n      type: Boolean,\n      default: !0\n    },\n    label: {\n      type: String,\n      default: \"label\"\n    },\n    autocomplete: {\n      type: String,\n      default: \"off\"\n    },\n    reduce: {\n      type: Function,\n      default: (e) => e\n    },\n    selectable: {\n      type: Function,\n      default: (e) => !0\n    },\n    getOptionLabel: {\n      type: Function,\n      default(e) {\n        return typeof e == \"object\" ? e.hasOwnProperty(this.label) ? e[this.label] : console.warn(`[vue-select warn]: Label key \"option.${this.label}\" does not exist in options object ${JSON.stringify(e)}.\nhttps://vue-select.org/api/props.html#getoptionlabel`) : e;\n      }\n    },\n    getOptionKey: {\n      type: Function,\n      default(e) {\n        if (typeof e != \"object\")\n          return e;\n        try {\n          return e.hasOwnProperty(\"id\") ? e.id : le(e);\n        } catch (t) {\n          return console.warn(`[vue-select warn]: Could not stringify this option to generate unique key. Please provide'getOptionKey' prop to return a unique key for each option.\nhttps://vue-select.org/api/props.html#getoptionkey`, e, t);\n        }\n      }\n    },\n    onTab: {\n      type: Function,\n      default: function() {\n        this.selectOnTab && !this.isComposing && this.typeAheadSelect();\n      }\n    },\n    taggable: {\n      type: Boolean,\n      default: !1\n    },\n    tabindex: {\n      type: Number,\n      default: null\n    },\n    pushTags: {\n      type: Boolean,\n      default: !1\n    },\n    filterable: {\n      type: Boolean,\n      default: !0\n    },\n    filterBy: {\n      type: Function,\n      default(e, t, s) {\n        return (t || \"\").toLocaleLowerCase().indexOf(s.toLocaleLowerCase()) > -1;\n      }\n    },\n    filter: {\n      type: Function,\n      default(e, t) {\n        return e.filter((s) => {\n          let n = this.getOptionLabel(s);\n          return typeof n == \"number\" && (n = n.toString()), this.filterBy(s, n, t);\n        });\n      }\n    },\n    createOption: {\n      type: Function,\n      default(e) {\n        return typeof this.optionList[0] == \"object\" ? { [this.label]: e } : e;\n      }\n    },\n    resetOnOptionsChange: {\n      default: !1,\n      validator: (e) => [\"function\", \"boolean\"].includes(typeof e)\n    },\n    clearSearchOnBlur: {\n      type: Function,\n      default: function({ clearSearchOnSelect: e, multiple: t }) {\n        return e && !t;\n      }\n    },\n    noDrop: {\n      type: Boolean,\n      default: !1\n    },\n    inputId: {\n      type: String\n    },\n    dir: {\n      type: String,\n      default: \"auto\"\n    },\n    selectOnTab: {\n      type: Boolean,\n      default: !1\n    },\n    selectOnKeyCodes: {\n      type: Array,\n      default: () => [13]\n    },\n    searchInputQuerySelector: {\n      type: String,\n      default: \"[type=search]\"\n    },\n    mapKeydown: {\n      type: Function,\n      default: (e, t) => e\n    },\n    appendToBody: {\n      type: Boolean,\n      default: !1\n    },\n    calculatePosition: {\n      type: Function,\n      default(e, t, { width: s, top: n, left: l }) {\n        e.style.top = n, e.style.left = l, e.style.width = s;\n      }\n    },\n    dropdownShouldOpen: {\n      type: Function,\n      default({ noDrop: e, open: t, mutableLoading: s }) {\n        return e ? !1 : t && !s;\n      }\n    },\n    uid: {\n      type: [String, Number],\n      default: () => re()\n    }\n  },\n  data() {\n    return {\n      search: \"\",\n      open: !1,\n      isComposing: !1,\n      pushedTags: [],\n      _value: [],\n      deselectButtons: []\n    };\n  },\n  computed: {\n    isReducingValues() {\n      return this.$props.reduce !== this.$options.props.reduce.default;\n    },\n    isTrackingValues() {\n      return typeof this.modelValue == \"undefined\" || this.isReducingValues;\n    },\n    selectedValue() {\n      let e = this.modelValue;\n      return this.isTrackingValues && (e = this.$data._value), e != null && e !== \"\" ? [].concat(e) : [];\n    },\n    optionList() {\n      return this.options.concat(this.pushTags ? this.pushedTags : []);\n    },\n    searchEl() {\n      return this.$slots.search ? this.$refs.selectedOptions.querySelector(this.searchInputQuerySelector) : this.$refs.search;\n    },\n    scope() {\n      const e = {\n        search: this.search,\n        loading: this.loading,\n        searching: this.searching,\n        filteredOptions: this.filteredOptions\n      };\n      return {\n        search: {\n          attributes: f({\n            disabled: this.disabled,\n            placeholder: this.searchPlaceholder,\n            tabindex: this.tabindex,\n            readonly: !this.searchable,\n            id: this.inputId,\n            \"aria-autocomplete\": \"list\",\n            \"aria-labelledby\": `vs${this.uid}__combobox`,\n            \"aria-controls\": `vs${this.uid}__listbox`,\n            ref: \"search\",\n            type: \"search\",\n            autocomplete: this.autocomplete,\n            value: this.search\n          }, this.dropdownOpen && this.filteredOptions[this.typeAheadPointer] ? {\n            \"aria-activedescendant\": `vs${this.uid}__option-${this.typeAheadPointer}`\n          } : {}),\n          events: {\n            compositionstart: () => this.isComposing = !0,\n            compositionend: () => this.isComposing = !1,\n            keydown: this.onSearchKeyDown,\n            blur: this.onSearchBlur,\n            focus: this.onSearchFocus,\n            input: (t) => this.search = t.target.value\n          }\n        },\n        spinner: {\n          loading: this.mutableLoading\n        },\n        noOptions: {\n          search: this.search,\n          loading: this.mutableLoading,\n          searching: this.searching\n        },\n        openIndicator: {\n          attributes: {\n            ref: \"openIndicator\",\n            role: \"presentation\",\n            class: \"vs__open-indicator\"\n          }\n        },\n        listHeader: e,\n        listFooter: e,\n        header: m(f({}, e), { deselect: this.deselect }),\n        footer: m(f({}, e), { deselect: this.deselect })\n      };\n    },\n    childComponents() {\n      return f(f({}, T), this.components);\n    },\n    stateClasses() {\n      return {\n        \"vs--open\": this.dropdownOpen,\n        \"vs--single\": !this.multiple,\n        \"vs--multiple\": this.multiple,\n        \"vs--searching\": this.searching && !this.noDrop,\n        \"vs--searchable\": this.searchable && !this.noDrop,\n        \"vs--unsearchable\": !this.searchable,\n        \"vs--loading\": this.mutableLoading,\n        \"vs--disabled\": this.disabled\n      };\n    },\n    searching() {\n      return !!this.search;\n    },\n    dropdownOpen() {\n      return this.dropdownShouldOpen(this);\n    },\n    searchPlaceholder() {\n      return this.isValueEmpty && this.placeholder ? this.placeholder : void 0;\n    },\n    filteredOptions() {\n      const e = [].concat(this.optionList);\n      if (!this.filterable && !this.taggable)\n        return e;\n      const t = this.search.length ? this.filter(e, this.search, this) : e;\n      if (this.taggable && this.search.length) {\n        const s = this.createOption(this.search);\n        this.optionExists(s) || t.unshift(s);\n      }\n      return t;\n    },\n    isValueEmpty() {\n      return this.selectedValue.length === 0;\n    },\n    showClearButton() {\n      return !this.multiple && this.clearable && !this.open && !this.isValueEmpty;\n    }\n  },\n  watch: {\n    options(e, t) {\n      const s = () => typeof this.resetOnOptionsChange == \"function\" ? this.resetOnOptionsChange(e, t, this.selectedValue) : this.resetOnOptionsChange;\n      !this.taggable && s() && this.clearSelection(), this.modelValue && this.isTrackingValues && this.setInternalValueFromOptions(this.modelValue);\n    },\n    modelValue: {\n      immediate: !0,\n      handler(e) {\n        this.isTrackingValues && this.setInternalValueFromOptions(e);\n      }\n    },\n    multiple() {\n      this.clearSelection();\n    },\n    open(e) {\n      this.$emit(e ? \"open\" : \"close\");\n    }\n  },\n  created() {\n    this.mutableLoading = this.loading;\n  },\n  methods: {\n    setInternalValueFromOptions(e) {\n      Array.isArray(e) ? this.$data._value = e.map((t) => this.findOptionFromReducedValue(t)) : this.$data._value = this.findOptionFromReducedValue(e);\n    },\n    select(e) {\n      this.$emit(\"option:selecting\", e), this.isOptionSelected(e) ? this.deselectFromDropdown && (this.clearable || this.multiple && this.selectedValue.length > 1) && this.deselect(e) : (this.taggable && !this.optionExists(e) && (this.$emit(\"option:created\", e), this.pushTag(e)), this.multiple && (e = this.selectedValue.concat(e)), this.updateValue(e), this.$emit(\"option:selected\", e)), this.onAfterSelect(e);\n    },\n    deselect(e) {\n      this.$emit(\"option:deselecting\", e), this.updateValue(this.selectedValue.filter((t) => !this.optionComparator(t, e))), this.$emit(\"option:deselected\", e);\n    },\n    clearSelection() {\n      this.updateValue(this.multiple ? [] : null);\n    },\n    onAfterSelect(e) {\n      this.closeOnSelect && (this.open = !this.open, this.searchEl.blur()), this.clearSearchOnSelect && (this.search = \"\");\n    },\n    updateValue(e) {\n      typeof this.modelValue == \"undefined\" && (this.$data._value = e), e !== null && (Array.isArray(e) ? e = e.map((t) => this.reduce(t)) : e = this.reduce(e)), this.$emit(\"update:modelValue\", e);\n    },\n    toggleDropdown(e) {\n      const t = e.target !== this.searchEl;\n      t && e.preventDefault();\n      const s = [\n        ...this.deselectButtons || [],\n        this.$refs.clearButton\n      ];\n      if (this.searchEl === void 0 || s.filter(Boolean).some((n) => n.contains(e.target) || n === e.target)) {\n        e.preventDefault();\n        return;\n      }\n      this.open && t ? this.searchEl.blur() : this.disabled || (this.open = !0, this.searchEl.focus());\n    },\n    isOptionSelected(e) {\n      return this.selectedValue.some((t) => this.optionComparator(t, e));\n    },\n    isOptionDeselectable(e) {\n      return this.isOptionSelected(e) && this.deselectFromDropdown;\n    },\n    optionComparator(e, t) {\n      return this.getOptionKey(e) === this.getOptionKey(t);\n    },\n    findOptionFromReducedValue(e) {\n      const t = (n) => JSON.stringify(this.reduce(n)) === JSON.stringify(e), s = [...this.options, ...this.pushedTags].filter(t);\n      return s.length === 1 ? s[0] : s.find((n) => this.optionComparator(n, this.$data._value)) || e;\n    },\n    closeSearchOptions() {\n      this.open = !1, this.$emit(\"search:blur\");\n    },\n    maybeDeleteValue() {\n      if (!this.searchEl.value.length && this.selectedValue && this.selectedValue.length && this.clearable) {\n        let e = null;\n        this.multiple && (e = [\n          ...this.selectedValue.slice(0, this.selectedValue.length - 1)\n        ]), this.updateValue(e);\n      }\n    },\n    optionExists(e) {\n      return this.optionList.some((t) => this.optionComparator(t, e));\n    },\n    normalizeOptionForSlot(e) {\n      return typeof e == \"object\" ? e : { [this.label]: e };\n    },\n    pushTag(e) {\n      this.pushedTags.push(e);\n    },\n    onEscape() {\n      this.search.length ? this.search = \"\" : this.searchEl.blur();\n    },\n    onSearchBlur() {\n      if (this.mousedown && !this.searching)\n        this.mousedown = !1;\n      else {\n        const { clearSearchOnSelect: e, multiple: t } = this;\n        this.clearSearchOnBlur({ clearSearchOnSelect: e, multiple: t }) && (this.search = \"\"), this.closeSearchOptions();\n        return;\n      }\n      if (this.search.length === 0 && this.options.length === 0) {\n        this.closeSearchOptions();\n        return;\n      }\n    },\n    onSearchFocus() {\n      this.open = !0, this.$emit(\"search:focus\");\n    },\n    onMousedown() {\n      this.mousedown = !0;\n    },\n    onMouseUp() {\n      this.mousedown = !1;\n    },\n    onSearchKeyDown(e) {\n      const t = (l) => (l.preventDefault(), !this.isComposing && this.typeAheadSelect()), s = {\n        8: (l) => this.maybeDeleteValue(),\n        9: (l) => this.onTab(),\n        27: (l) => this.onEscape(),\n        38: (l) => (l.preventDefault(), this.typeAheadUp()),\n        40: (l) => (l.preventDefault(), this.typeAheadDown())\n      };\n      this.selectOnKeyCodes.forEach((l) => s[l] = t);\n      const n = this.mapKeydown(s, this);\n      if (typeof n[e.keyCode] == \"function\")\n        return n[e.keyCode](e);\n    }\n  }\n}, he = [\"dir\"], ce = [\"id\", \"aria-expanded\", \"aria-owns\"], ue = {\n  ref: \"selectedOptions\",\n  class: \"vs__selected-options\"\n}, pe = [\"disabled\", \"title\", \"aria-label\", \"onClick\"], fe = {\n  ref: \"actions\",\n  class: \"vs__actions\"\n}, ge = [\"disabled\"], ye = { class: \"vs__spinner\" }, me = [\"id\"], be = [\"id\", \"aria-selected\", \"onMouseover\", \"onClick\"], _e = {\n  key: 0,\n  class: \"vs__no-options\"\n}, Oe = /* @__PURE__ */ v(\" Sorry, no matching options. \"), we = [\"id\"];\nfunction ve(e, t, s, n, l, i) {\n  const y = K(\"append-to-body\");\n  return a(), h(\"div\", {\n    dir: s.dir,\n    class: A([\"v-select\", i.stateClasses])\n  }, [\n    r(e.$slots, \"header\", d(c(i.scope.header))),\n    u(\"div\", {\n      id: `vs${s.uid}__combobox`,\n      ref: \"toggle\",\n      class: \"vs__dropdown-toggle\",\n      role: \"combobox\",\n      \"aria-expanded\": i.dropdownOpen.toString(),\n      \"aria-owns\": `vs${s.uid}__listbox`,\n      \"aria-label\": \"Search for option\",\n      onMousedown: t[1] || (t[1] = (o) => i.toggleDropdown(o))\n    }, [\n      u(\"div\", ue, [\n        (a(!0), h(B, null, L(i.selectedValue, (o, p) => r(e.$slots, \"selected-option-container\", {\n          option: i.normalizeOptionForSlot(o),\n          deselect: i.deselect,\n          multiple: s.multiple,\n          disabled: s.disabled\n        }, () => [\n          (a(), h(\"span\", {\n            key: s.getOptionKey(o),\n            class: \"vs__selected\"\n          }, [\n            r(e.$slots, \"selected-option\", d(c(i.normalizeOptionForSlot(o))), () => [\n              v(D(s.getOptionLabel(o)), 1)\n            ]),\n            s.multiple ? (a(), h(\"button\", {\n              key: 0,\n              ref_for: !0,\n              ref: (g) => l.deselectButtons[p] = g,\n              disabled: s.disabled,\n              type: \"button\",\n              class: \"vs__deselect\",\n              title: `Deselect ${s.getOptionLabel(o)}`,\n              \"aria-label\": `Deselect ${s.getOptionLabel(o)}`,\n              onClick: (g) => i.deselect(o)\n            }, [\n              (a(), b(_(i.childComponents.Deselect)))\n            ], 8, pe)) : O(\"\", !0)\n          ]))\n        ])), 256)),\n        r(e.$slots, \"search\", d(c(i.scope.search)), () => [\n          u(\"input\", k({ class: \"vs__search\" }, i.scope.search.attributes, j(i.scope.search.events)), null, 16)\n        ])\n      ], 512),\n      u(\"div\", fe, [\n        w(u(\"button\", {\n          ref: \"clearButton\",\n          disabled: s.disabled,\n          type: \"button\",\n          class: \"vs__clear\",\n          title: \"Clear Selected\",\n          \"aria-label\": \"Clear Selected\",\n          onClick: t[0] || (t[0] = (...o) => i.clearSelection && i.clearSelection(...o))\n        }, [\n          (a(), b(_(i.childComponents.Deselect)))\n        ], 8, ge), [\n          [P, i.showClearButton]\n        ]),\n        r(e.$slots, \"open-indicator\", d(c(i.scope.openIndicator)), () => [\n          s.noDrop ? O(\"\", !0) : (a(), b(_(i.childComponents.OpenIndicator), d(k({ key: 0 }, i.scope.openIndicator.attributes)), null, 16))\n        ]),\n        r(e.$slots, \"spinner\", d(c(i.scope.spinner)), () => [\n          w(u(\"div\", ye, \"Loading...\", 512), [\n            [P, e.mutableLoading]\n          ])\n        ])\n      ], 512)\n    ], 40, ce),\n    $(R, { name: s.transition }, {\n      default: z(() => [\n        i.dropdownOpen ? w((a(), h(\"ul\", {\n          id: `vs${s.uid}__listbox`,\n          ref: \"dropdownMenu\",\n          key: `vs${s.uid}__listbox`,\n          class: \"vs__dropdown-menu\",\n          role: \"listbox\",\n          tabindex: \"-1\",\n          onMousedown: t[2] || (t[2] = F((...o) => i.onMousedown && i.onMousedown(...o), [\"prevent\"])),\n          onMouseup: t[3] || (t[3] = (...o) => i.onMouseUp && i.onMouseUp(...o))\n        }, [\n          r(e.$slots, \"list-header\", d(c(i.scope.listHeader))),\n          (a(!0), h(B, null, L(i.filteredOptions, (o, p) => (a(), h(\"li\", {\n            id: `vs${s.uid}__option-${p}`,\n            key: s.getOptionKey(o),\n            role: \"option\",\n            class: A([\"vs__dropdown-option\", {\n              \"vs__dropdown-option--deselect\": i.isOptionDeselectable(o) && p === e.typeAheadPointer,\n              \"vs__dropdown-option--selected\": i.isOptionSelected(o),\n              \"vs__dropdown-option--highlight\": p === e.typeAheadPointer,\n              \"vs__dropdown-option--disabled\": !s.selectable(o)\n            }]),\n            \"aria-selected\": p === e.typeAheadPointer ? !0 : null,\n            onMouseover: (g) => s.selectable(o) ? e.typeAheadPointer = p : null,\n            onClick: F((g) => s.selectable(o) ? i.select(o) : null, [\"prevent\", \"stop\"])\n          }, [\n            r(e.$slots, \"option\", d(c(i.normalizeOptionForSlot(o))), () => [\n              v(D(s.getOptionLabel(o)), 1)\n            ])\n          ], 42, be))), 128)),\n          i.filteredOptions.length === 0 ? (a(), h(\"li\", _e, [\n            r(e.$slots, \"no-options\", d(c(i.scope.noOptions)), () => [\n              Oe\n            ])\n          ])) : O(\"\", !0),\n          r(e.$slots, \"list-footer\", d(c(i.scope.listFooter)))\n        ], 40, me)), [\n          [y]\n        ]) : (a(), h(\"ul\", {\n          key: 1,\n          id: `vs${s.uid}__listbox`,\n          role: \"listbox\",\n          style: { display: \"none\", visibility: \"hidden\" }\n        }, null, 8, we))\n      ]),\n      _: 3\n    }, 8, [\"name\"]),\n    r(e.$slots, \"footer\", d(c(i.scope.footer)))\n  ], 10, he);\n}\nconst Ce = /* @__PURE__ */ S(de, [[\"render\", ve]]);\nexport {\n  Ce as default\n};\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nconst invalidOverflowDisplayValues = /*#__PURE__*/new Set(['inline', 'contents']);\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);\n}\nconst tableElements = /*#__PURE__*/new Set(['table', 'td', 'th']);\nfunction isTableElement(element) {\n  return tableElements.has(getNodeName(element));\n}\nconst topLayerSelectors = [':popover-open', ':modal'];\nfunction isTopLayer(element) {\n  return topLayerSelectors.some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (_e) {\n      return false;\n    }\n  });\n}\nconst transformProperties = ['transform', 'translate', 'scale', 'rotate', 'perspective'];\nconst willChangeValues = ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'];\nconst containValues = ['paint', 'layout', 'strict', 'content'];\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\n  return transformProperties.some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || willChangeValues.some(value => (css.willChange || '').includes(value)) || containValues.some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nconst lastTraversableNodeNames = /*#__PURE__*/new Set(['html', 'body', '#document']);\nfunction isLastTraversableNode(node) {\n  return lastTraversableNodeNames.has(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, arrow as arrow$1, autoPlacement as autoPlacement$1, detectOverflow as detectOverflow$1, flip as flip$1, hide as hide$1, inline as inline$1, limitShift as limitShift$1, offset as offset$1, shift as shift$1, size as size$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle as getComputedStyle$1, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle$1(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle$1(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll) {\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - getWindowScrollBarX(documentElement, htmlRect);\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle$1(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Safety check: ensure the scrollbar space is reasonable in case this\n// calculation is affected by unusual styles.\n// Most scrollbars leave 15-18px of space.\nconst SCROLLBAR_MAX = 25;\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  const windowScrollbarX = getWindowScrollBarX(html);\n  // <html> `overflow: hidden` + `scrollbar-gutter: stable` reduces the\n  // visual width of the <html> but this is not considered in the size\n  // of `html.clientWidth`.\n  if (windowScrollbarX <= 0) {\n    const doc = html.ownerDocument;\n    const body = doc.body;\n    const bodyStyles = getComputedStyle(body);\n    const bodyMarginInline = doc.compatMode === 'CSS1Compat' ? parseFloat(bodyStyles.marginLeft) + parseFloat(bodyStyles.marginRight) || 0 : 0;\n    const clippingStableScrollbarWidth = Math.abs(html.clientWidth - body.clientWidth - bodyMarginInline);\n    if (clippingStableScrollbarWidth <= SCROLLBAR_MAX) {\n      width -= clippingStableScrollbarWidth;\n    }\n  } else if (windowScrollbarX <= SCROLLBAR_MAX) {\n    // If the <body> scrollbar is on the left, the width needs to be extended\n    // by the scrollbar amount so there isn't extra space on the right.\n    width += windowScrollbarX;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nconst absoluteOrFixed = /*#__PURE__*/new Set(['absolute', 'fixed']);\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle$1(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n\n  // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n  // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n  function setLeftRTLScrollbarOffset() {\n    offsets.x = getWindowScrollBarX(documentElement);\n  }\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      setLeftRTLScrollbarOffset();\n    }\n  }\n  if (isFixed && !isOffsetParentAnElement && documentElement) {\n    setLeftRTLScrollbarOffset();\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle$1(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle$1(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (_e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n","import { defineComponent, h } from \"vue\";\n/*!\n * SPDX-FileCopyrightText: 2020 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nfunction findRanges(text, search) {\n  const ranges = [];\n  let currentIndex = 0;\n  let index = text.toLowerCase().indexOf(search.toLowerCase(), currentIndex);\n  let i = 0;\n  while (index > -1 && i++ < text.length) {\n    currentIndex = index + search.length;\n    ranges.push({ start: index, end: currentIndex });\n    index = text.toLowerCase().indexOf(search.toLowerCase(), currentIndex);\n  }\n  return ranges;\n}\nconst _sfc_main = defineComponent({\n  name: \"NcHighlight\",\n  props: {\n    /**\n     * The string to display\n     */\n    text: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * The string to match and highlight\n     */\n    search: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * The ranges to highlight, takes precedence over the search prop.\n     */\n    highlight: {\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    /**\n     * The indice ranges which should be highlighted.\n     * If an array with ranges is provided, we use it. Otherwise\n     * we calculate it based on the provided substring to highlight.\n     *\n     * @return The array of ranges to highlight\n     */\n    ranges() {\n      let ranges = [];\n      if (!this.search && this.highlight.length === 0) {\n        return ranges;\n      }\n      if (this.highlight.length > 0) {\n        ranges = this.highlight;\n      } else {\n        ranges = findRanges(this.text, this.search);\n      }\n      ranges.forEach((range, i) => {\n        if (range.end < range.start) {\n          ranges[i] = {\n            start: range.end,\n            end: range.start\n          };\n        }\n      });\n      ranges = ranges.reduce((validRanges, range) => {\n        if (range.start < this.text.length && range.end > 0) {\n          validRanges.push({\n            start: range.start < 0 ? 0 : range.start,\n            end: range.end > this.text.length ? this.text.length : range.end\n          });\n        }\n        return validRanges;\n      }, []);\n      ranges.sort((a, b) => {\n        return a.start - b.start;\n      });\n      ranges = ranges.reduce((mergedRanges, range) => {\n        if (!mergedRanges.length) {\n          mergedRanges.push(range);\n        } else {\n          const idx = mergedRanges.length - 1;\n          if (mergedRanges[idx].end >= range.start) {\n            mergedRanges[idx] = {\n              start: mergedRanges[idx].start,\n              end: Math.max(mergedRanges[idx].end, range.end)\n            };\n          } else {\n            mergedRanges.push(range);\n          }\n        }\n        return mergedRanges;\n      }, []);\n      return ranges;\n    },\n    /**\n     * Calculate the different chunks to show based on the ranges to highlight.\n     */\n    chunks() {\n      if (this.ranges.length === 0) {\n        return [{\n          start: 0,\n          end: this.text.length,\n          highlight: false,\n          text: this.text\n        }];\n      }\n      const chunks = [];\n      let currentIndex = 0;\n      let currentRange = 0;\n      while (currentIndex < this.text.length) {\n        const range = this.ranges[currentRange];\n        if (range.start === currentIndex) {\n          chunks.push({\n            ...range,\n            highlight: true,\n            text: this.text.slice(range.start, range.end)\n          });\n          currentRange++;\n          currentIndex = range.end;\n          if (currentRange >= this.ranges.length && currentIndex < this.text.length) {\n            chunks.push({\n              start: currentIndex,\n              end: this.text.length,\n              highlight: false,\n              text: this.text.slice(currentIndex)\n            });\n            currentIndex = this.text.length;\n          }\n          continue;\n        }\n        chunks.push({\n          start: currentIndex,\n          end: range.start,\n          highlight: false,\n          text: this.text.slice(currentIndex, range.start)\n        });\n        currentIndex = range.start;\n      }\n      return chunks;\n    }\n  },\n  /**\n   * The render function to display the component\n   */\n  render() {\n    if (!this.ranges.length) {\n      return h(\"span\", {}, this.text);\n    }\n    return h(\"span\", {}, this.chunks.map((chunk) => {\n      return chunk.highlight ? h(\"strong\", {}, chunk.text) : chunk.text;\n    }));\n  }\n});\nexport {\n  _sfc_main as _,\n  findRanges as f\n};\n//# sourceMappingURL=NcHighlight.vue_vue_type_script_lang-DnWQDM_2.mjs.map\n","import '../assets/NcEllipsisedOption-BNLv_eyF.css';\nimport { _ as _sfc_main$1, f as findRanges } from \"./NcHighlight.vue_vue_type_script_lang-DnWQDM_2.mjs\";\nimport { resolveComponent, createElementBlock, openBlock, createVNode, createBlock, createCommentVNode } from \"vue\";\nimport { _ as _export_sfc } from \"./_plugin-vue_export-helper-1tPrXgE0.mjs\";\nconst _sfc_main = {\n  name: \"NcEllipsisedOption\",\n  components: {\n    NcHighlight: _sfc_main$1\n  },\n  props: {\n    /**\n     * The text to be display in one line. If it is longer than 10 characters, it is be truncated with ellipsis in the end but keeping up to 10 last characters to fit the parent container.\n     */\n    name: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * The search value to highlight in the text\n     */\n    search: {\n      type: String,\n      default: \"\"\n    }\n  },\n  computed: {\n    needsTruncate() {\n      return this.name && this.name.length >= 10;\n    },\n    /**\n     * Index at which to split the name if it is longer than 10 characters.\n     *\n     * @return {number} The position at which to split\n     */\n    split() {\n      return this.name.length - Math.min(Math.floor(this.name.length / 2), 10);\n    },\n    part1() {\n      if (this.needsTruncate) {\n        return this.name.slice(0, this.split);\n      }\n      return this.name;\n    },\n    part2() {\n      if (this.needsTruncate) {\n        return this.name.slice(this.split);\n      }\n      return \"\";\n    },\n    /**\n     * The ranges to highlight. Since we split the string for ellipsising,\n     * the Highlight component cannot figure this out itself and needs the ranges provided.\n     *\n     * @return {Array} The array with the ranges to highlight\n     */\n    highlight1() {\n      if (!this.search) {\n        return [];\n      }\n      return findRanges(this.name, this.search);\n    },\n    /**\n     * We shift the ranges for the second part by the position of the split.\n     * Ranges out of the string length are discarded by the Highlight component,\n     * so we don't need to take care of this here.\n     *\n     * @return {Array} The array with the ranges to highlight\n     */\n    highlight2() {\n      return this.highlight1.map((range) => {\n        return {\n          start: range.start - this.split,\n          end: range.end - this.split\n        };\n      });\n    }\n  }\n};\nconst _hoisted_1 = [\"title\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NcHighlight = resolveComponent(\"NcHighlight\");\n  return openBlock(), createElementBlock(\"span\", {\n    dir: \"auto\",\n    class: \"name-parts\",\n    title: $props.name\n  }, [\n    createVNode(_component_NcHighlight, {\n      class: \"name-parts__first\",\n      text: $options.part1,\n      search: $props.search,\n      highlight: $options.highlight1\n    }, null, 8, [\"text\", \"search\", \"highlight\"]),\n    $options.part2 ? (openBlock(), createBlock(_component_NcHighlight, {\n      key: 0,\n      class: \"name-parts__last\",\n      text: $options.part2,\n      search: $props.search,\n      highlight: $options.highlight2\n    }, null, 8, [\"text\", \"search\", \"highlight\"])) : createCommentVNode(\"\", true)\n  ], 8, _hoisted_1);\n}\nconst NcEllipsisedOption = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__scopeId\", \"data-v-eeeedf6b\"]]);\nexport {\n  NcEllipsisedOption as N\n};\n//# sourceMappingURL=NcEllipsisedOption-C8uNDC-j.mjs.map\n","import '../assets/NcSelect-DjCC5X0A.css';\nimport \"vue-select/dist/vue-select.css\";\nimport VueSelect from \"vue-select\";\nimport { autoUpdate, computePosition, offset, flip, shift, limitShift } from \"@floating-ui/dom\";\nimport { h, resolveComponent, createBlock, openBlock, mergeProps, createSlots, withCtx, createTextVNode, toDisplayString, createCommentVNode, renderSlot, createVNode, normalizeProps, guardReactiveProps, createElementVNode, toHandlers, renderList, warn } from \"vue\";\nimport { c as createElementId } from \"./createElementId-DhjFt1I9.mjs\";\nimport { r as register, c as t16, a as t } from \"./_l10n-ZllQPIu_.mjs\";\nimport { C as ChevronDown } from \"./ChevronDown-FiGpp0KT.mjs\";\nimport { I as IconClose } from \"./Close-D6ngJ4t9.mjs\";\nimport { N as NcEllipsisedOption } from \"./NcEllipsisedOption-C8uNDC-j.mjs\";\nimport { N as NcLoadingIcon } from \"./NcLoadingIcon-CiMp51wb.mjs\";\nimport { _ as _export_sfc } from \"./_plugin-vue_export-helper-1tPrXgE0.mjs\";\nregister(t16);\nconst _sfc_main = {\n  name: \"NcSelect\",\n  components: {\n    ChevronDown,\n    NcEllipsisedOption,\n    NcLoadingIcon,\n    VueSelect\n  },\n  props: {\n    // Add VueSelect props to $props\n    ...VueSelect.props,\n    ...VueSelect.mixins.reduce((allProps, mixin) => ({ ...allProps, ...mixin.props }), {}),\n    /**\n     * `aria-label` for the clear input button\n     */\n    ariaLabelClearSelected: {\n      type: String,\n      default: t(\"Clear selected\")\n    },\n    /**\n     * `aria-label` for the search input\n     *\n     * A descriptive `inputLabel` is preferred as this is not visible.\n     */\n    ariaLabelCombobox: {\n      type: String,\n      default: null\n    },\n    /**\n     * `aria-label` for the listbox element\n     */\n    ariaLabelListbox: {\n      type: String,\n      default: t(\"Options\")\n    },\n    /**\n     * Allows to customize the `aria-label` for the deselect-option button\n     * The default is \"Deselect \" + optionLabel\n     * @type {(optionLabel: string) => string}\n     */\n    ariaLabelDeselectOption: {\n      type: Function,\n      default: (optionLabel) => t(\"Deselect {option}\", { option: optionLabel })\n    },\n    /**\n     * Append the dropdown element to the end of the body\n     * and size/position it dynamically.\n     *\n     * @see https://vue-select.org/api/props.html#appendtobody\n     */\n    appendToBody: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * When `appendToBody` is true, this function is responsible for\n     * positioning the drop down list.\n     *\n     * If a function is returned from `calculatePosition`, it will\n     * be called when the drop down list is removed from the DOM.\n     * This allows for any garbage collection you may need to do.\n     *\n     * @see https://vue-select.org/api/props.html#calculateposition\n     */\n    calculatePosition: {\n      type: Function,\n      default: null\n    },\n    /**\n     * Keep the dropdown open after selecting an option.\n     *\n     * @default false\n     * @since 8.25.0\n     */\n    keepOpen: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Replace default vue-select components\n     *\n     * @see https://vue-select.org/api/props.html#components\n     */\n    components: {\n      type: Object,\n      default: () => ({\n        Deselect: {\n          render: () => h(IconClose, {\n            size: 20,\n            fillColor: \"var(--vs-controls-color)\",\n            style: [\n              { cursor: \"pointer\" }\n            ]\n          })\n        }\n      })\n    },\n    /**\n     * Sets the maximum number of options to display in the dropdown list\n     */\n    limit: {\n      type: Number,\n      default: null\n    },\n    /**\n     * Disable the component\n     *\n     * @see https://vue-select.org/api/props.html#disabled\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Determines whether the dropdown should be open.\n     * Receives the component instance as the only argument.\n     *\n     * @see https://vue-select.org/api/props.html#dropdownshouldopen\n     */\n    dropdownShouldOpen: {\n      type: Function,\n      default: ({ noDrop, open }) => {\n        return noDrop ? false : open;\n      }\n    },\n    /**\n     * Callback to determine if the provided option should\n     * match the current search text. Used to determine\n     * if the option should be displayed.\n     *\n     * Defaults to the internal vue-select function documented at the link\n     * below\n     *\n     * @see https://vue-select.org/api/props.html#filterby\n     */\n    filterBy: {\n      type: Function,\n      default: null\n    },\n    /**\n     * Class for the `input`\n     *\n     * Necessary for use in NcActionInput\n     */\n    inputClass: {\n      type: [String, Object],\n      default: null\n    },\n    /**\n     * Input element id\n     */\n    inputId: {\n      type: String,\n      default: () => createElementId()\n    },\n    /**\n     * Visible label for the input element\n     */\n    inputLabel: {\n      type: String,\n      default: null\n    },\n    /**\n     * Pass true if you are using an external label\n     */\n    labelOutside: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Display a visible border around dropdown options\n     * which have keyboard focus\n     */\n    keyboardFocusBorder: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Key of the displayed label for object options\n     *\n     * Defaults to the internal vue-select string documented at the link\n     * below\n     *\n     * @see https://vue-select.org/api/props.html#label\n     */\n    label: {\n      type: String,\n      default: null\n    },\n    /**\n     * Show the loading icon\n     *\n     * @see https://vue-select.org/api/props.html#loading\n     */\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Allow selection of multiple options\n     *\n     * @see https://vue-select.org/api/props.html#multiple\n     */\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Disable automatic wrapping when selected options overflow the width\n     */\n    noWrap: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Array of options\n     *\n     * @type {Array<string | number | Record<string | number, any>>}\n     *\n     * @see https://vue-select.org/api/props.html#options\n     */\n    options: {\n      type: Array,\n      default: () => []\n    },\n    /**\n     * Placeholder text\n     *\n     * @see https://vue-select.org/api/props.html#placeholder\n     */\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    /**\n     * Customized component's response to keydown events while the search input has focus\n     *\n     * @see https://vue-select.org/guide/keydown.html#mapkeydown\n     */\n    mapKeydown: {\n      type: Function,\n      /**\n       * Patched Vue-Select keydown events handlers map to stop Escape propagation in open select\n       *\n       * @param {Record<number, Function>} map - Mapped keyCode to handlers { <keyCode>:<callback> }\n       * @param {import('@nextcloud/vue-select').VueSelect} vm - VueSelect instance\n       * @return {Record<number, Function>} patched keydown event handlers\n       */\n      default(map, vm) {\n        return {\n          ...map,\n          /**\n           * Patched Escape handler to stop propagation from open select\n           *\n           * @param {KeyboardEvent} event - default keydown event handler\n           */\n          27: (event) => {\n            if (vm.open) {\n              event.stopPropagation();\n            }\n            map[27](event);\n          }\n        };\n      }\n    },\n    /**\n     * A unique identifier used to generate IDs and DOM attributes. Must be unique for every instance of the component.\n     *\n     * @see https://vue-select.org/api/props.html#uid\n     */\n    uid: {\n      type: String,\n      default: () => createElementId()\n    },\n    /**\n     * When `appendToBody` is true, this sets the placement of the dropdown\n     *\n     * @type {'bottom' | 'top'}\n     */\n    placement: {\n      type: String,\n      default: \"bottom\"\n    },\n    /**\n     * If false, the focused dropdown option will not be reset when filtered\n     * options change\n     */\n    resetFocusOnOptionsChange: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Currently selected value\n     *\n     * The `v-model` directive may be used for two-way data binding\n     *\n     * @type {string | number | Record<string | number, any> | Array<any>}\n     *\n     * @see https://vue-select.org/api/props.html#value\n     */\n    modelValue: {\n      type: [String, Number, Object, Array],\n      default: null\n    },\n    /**\n     * Enable if a value is required for native form validation\n     */\n    required: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Any available prop\n     *\n     * @see https://vue-select.org/api/props.html\n     */\n    // Not an actual prop but needed to show in vue-styleguidist docs\n    // eslint-disable-next-line\n    \" \": {}\n  },\n  emits: [\n    /**\n     * All events from https://vue-select.org/api/events.html\n     */\n    // Not an actual event but needed to show in vue-styleguidist docs\n    \" \",\n    \"update:modelValue\"\n  ],\n  setup() {\n    const clickableArea = Number.parseInt(window.getComputedStyle(document.body).getPropertyValue(\"--default-clickable-area\"));\n    const gridBaseLine = Number.parseInt(window.getComputedStyle(document.body).getPropertyValue(\"--default-grid-baseline\"));\n    const avatarSize = clickableArea - 2 * gridBaseLine;\n    return {\n      avatarSize\n    };\n  },\n  data() {\n    return {\n      search: \"\"\n    };\n  },\n  computed: {\n    inputRequired() {\n      if (!this.required) {\n        return null;\n      }\n      return this.modelValue === null || Array.isArray(this.modelValue) && this.modelValue.length === 0;\n    },\n    localCalculatePosition() {\n      if (this.calculatePosition !== null) {\n        return this.calculatePosition;\n      }\n      return (dropdownMenu, component, { width }) => {\n        dropdownMenu.style.width = width;\n        const addClass = {\n          name: \"addClass\",\n          fn() {\n            dropdownMenu.classList.add(\"vs__dropdown-menu--floating\");\n            return {};\n          }\n        };\n        const togglePlacementClass = {\n          name: \"togglePlacementClass\",\n          fn({ placement }) {\n            component.$el.classList.toggle(\n              \"select--drop-up\",\n              placement === \"top\"\n            );\n            dropdownMenu.classList.toggle(\n              \"vs__dropdown-menu--floating-placement-top\",\n              placement === \"top\"\n            );\n            return {};\n          }\n        };\n        const updatePosition = () => {\n          computePosition(component.$refs.toggle, dropdownMenu, {\n            placement: this.placement,\n            middleware: [\n              offset(-1),\n              addClass,\n              togglePlacementClass,\n              // Match popperjs default collision prevention behavior by appending the following middleware in order\n              flip(),\n              shift({ limiter: limitShift() })\n            ]\n          }).then(({ x, y }) => {\n            Object.assign(dropdownMenu.style, {\n              left: `${x}px`,\n              top: `${y}px`,\n              width: `${component.$refs.toggle.getBoundingClientRect().width}px`\n            });\n          });\n        };\n        const cleanup = autoUpdate(\n          component.$refs.toggle,\n          dropdownMenu,\n          updatePosition\n        );\n        return cleanup;\n      };\n    },\n    localFilterBy() {\n      return this.filterBy ?? VueSelect.props.filterBy.default;\n    },\n    localLabel() {\n      return this.label ?? VueSelect.props.label.default;\n    },\n    propsToForward() {\n      const vueSelectKeys = [\n        ...Object.keys(VueSelect.props),\n        ...VueSelect.mixins.flatMap((mixin) => Object.keys(mixin.props ?? {}))\n      ];\n      const initialPropsToForward = Object.fromEntries(\n        Object.entries(this.$props).filter(([key, _value]) => vueSelectKeys.includes(key))\n      );\n      const propsToForward = {\n        ...initialPropsToForward,\n        // Custom overrides of vue-select props\n        calculatePosition: this.localCalculatePosition,\n        closeOnSelect: !this.keepOpen,\n        filterBy: this.localFilterBy,\n        label: this.localLabel\n      };\n      return propsToForward;\n    }\n  },\n  mounted() {\n    if (!this.labelOutside && !this.inputLabel && !this.ariaLabelCombobox) {\n      warn(\"[NcSelect] An `inputLabel` or `ariaLabelCombobox` should be set. If an external label is used, `labelOutside` should be set to `true`.\");\n    }\n    if (this.inputLabel && this.ariaLabelCombobox) {\n      warn(\"[NcSelect] Only one of `inputLabel` or `ariaLabelCombobox` should to be set.\");\n    }\n  },\n  methods: {\n    t\n  }\n};\nconst _hoisted_1 = [\"for\"];\nconst _hoisted_2 = [\"required\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ChevronDown = resolveComponent(\"ChevronDown\");\n  const _component_NcEllipsisedOption = resolveComponent(\"NcEllipsisedOption\");\n  const _component_NcLoadingIcon = resolveComponent(\"NcLoadingIcon\");\n  const _component_VueSelect = resolveComponent(\"VueSelect\");\n  return openBlock(), createBlock(_component_VueSelect, mergeProps({\n    class: [\"select\", {\n      \"select--no-wrap\": $props.noWrap\n    }]\n  }, $options.propsToForward, {\n    onSearch: _cache[0] || (_cache[0] = ($event) => $data.search = $event),\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event) => _ctx.$emit(\"update:modelValue\", $event))\n  }), createSlots({\n    search: withCtx(({ attributes, events }) => [\n      createElementVNode(\"input\", mergeProps({\n        class: [\"vs__search\", $props.inputClass]\n      }, attributes, {\n        required: $options.inputRequired,\n        dir: \"auto\"\n      }, toHandlers(events, true)), null, 16, _hoisted_2)\n    ]),\n    \"open-indicator\": withCtx(({ attributes }) => [\n      createVNode(_component_ChevronDown, mergeProps(attributes, {\n        \"fill-color\": \"var(--vs-controls-color)\",\n        style: {\n          cursor: !$props.disabled ? \"pointer\" : null\n        },\n        size: 26\n      }), null, 16, [\"style\"])\n    ]),\n    option: withCtx((option) => [\n      renderSlot(_ctx.$slots, \"option\", normalizeProps(guardReactiveProps(option)), () => [\n        createVNode(_component_NcEllipsisedOption, {\n          name: String(option[$options.localLabel]),\n          search: $data.search\n        }, null, 8, [\"name\", \"search\"])\n      ])\n    ]),\n    \"selected-option\": withCtx((selectedOption) => [\n      renderSlot(_ctx.$slots, \"selected-option\", { vBind: selectedOption }, () => [\n        createVNode(_component_NcEllipsisedOption, {\n          name: String(selectedOption[$options.localLabel]),\n          search: $data.search\n        }, null, 8, [\"name\", \"search\"])\n      ])\n    ]),\n    spinner: withCtx((spinner) => [\n      spinner.loading ? (openBlock(), createBlock(_component_NcLoadingIcon, { key: 0 })) : createCommentVNode(\"\", true)\n    ]),\n    \"no-options\": withCtx(() => [\n      createTextVNode(toDisplayString($options.t(\"No results\")), 1)\n    ]),\n    _: 2\n  }, [\n    !$props.labelOutside && $props.inputLabel ? {\n      name: \"header\",\n      fn: withCtx(() => [\n        createElementVNode(\"label\", {\n          for: $props.inputId,\n          class: \"select__label\"\n        }, toDisplayString($props.inputLabel), 9, _hoisted_1)\n      ]),\n      key: \"0\"\n    } : void 0,\n    renderList(_ctx.$slots, (_, name) => {\n      return {\n        name,\n        fn: withCtx((data) => [\n          renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(data)))\n        ])\n      };\n    })\n  ]), 1040, [\"class\"]);\n}\nconst NcSelect = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport {\n  NcSelect as N\n};\n//# sourceMappingURL=NcSelect-C6qHqfAO.mjs.map\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import {dequal} from 'dequal'\n\n/**\n * @type {Set<string>}\n */\nconst codesWarned = new Set()\n\nclass AssertionError extends Error {\n  name = /** @type {const} */ ('Assertion')\n  code = /** @type {const} */ ('ERR_ASSERTION')\n\n  /**\n   * Create an assertion error.\n   *\n   * @param {string} message\n   *   Message explaining error.\n   * @param {unknown} actual\n   *   Value.\n   * @param {unknown} expected\n   *   Baseline.\n   * @param {string} operator\n   *   Name of equality operation.\n   * @param {boolean} generated\n   *   Whether `message` is a custom message or not\n   * @returns\n   *   Instance.\n   */\n  // eslint-disable-next-line max-params\n  constructor(message, actual, expected, operator, generated) {\n    super(message)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    }\n\n    /**\n     * @type {unknown}\n     */\n    this.actual = actual\n\n    /**\n     * @type {unknown}\n     */\n    this.expected = expected\n\n    /**\n     * @type {boolean}\n     */\n    this.generated = generated\n\n    /**\n     * @type {string}\n     */\n    this.operator = operator\n  }\n}\n\nclass DeprecationError extends Error {\n  name = /** @type {const} */ ('DeprecationWarning')\n\n  /**\n   * Create a deprecation message.\n   *\n   * @param {string} message\n   *   Message explaining deprecation.\n   * @param {string | undefined} code\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\n   * @returns\n   *   Instance.\n   */\n  constructor(message, code) {\n    super(message)\n\n    /**\n     * @type {string | undefined}\n     */\n    this.code = code\n  }\n}\n\n/**\n * Wrap a function or class to show a deprecation message when first called.\n *\n * > 👉 **Important**: only shows a message when the `development` condition is\n * > used, does nothing in production.\n *\n * When the resulting wrapped `fn` is called, emits a warning once to\n * `console.error` (`stderr`).\n * If a code is given, one warning message will be emitted in total per code.\n *\n * @template {Function} T\n *   Function or class kind.\n * @param {T} fn\n *   Function or class.\n * @param {string} message\n *   Message explaining deprecation.\n * @param {string | null | undefined} [code]\n *   Deprecation identifier (optional); deprecation messages will be generated\n *   only once per code.\n * @returns {T}\n *   Wrapped `fn`.\n */\nexport function deprecate(fn, message, code) {\n  let warned = false\n\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn)\n\n  // @ts-expect-error: it’s perfect, typescript…\n  return deprecated\n\n  /**\n   * @this {unknown}\n   * @param  {...Array<unknown>} args\n   * @returns {unknown}\n   */\n  function deprecated(...args) {\n    if (!warned) {\n      warned = true\n\n      if (typeof code === 'string' && codesWarned.has(code)) {\n        // Empty.\n      } else {\n        console.error(new DeprecationError(message, code || undefined))\n\n        if (typeof code === 'string') codesWarned.add(code)\n      }\n    }\n\n    return new.target\n      ? Reflect.construct(fn, args, new.target)\n      : Reflect.apply(fn, this, args)\n  }\n}\n\n/**\n * Assert deep strict equivalence.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @template {unknown} T\n *   Expected kind.\n * @param {unknown} actual\n *   Value.\n * @param {T} expected\n *   Baseline.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\n * @returns {asserts actual is T}\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\n * @throws {AssertionError}\n *   Throws when `actual` is not deep strict equal to `expected`.\n */\nexport function equal(actual, expected, message) {\n  assert(\n    dequal(actual, expected),\n    actual,\n    expected,\n    'equal',\n    'Expected values to be deeply equal',\n    message\n  )\n}\n\n/**\n * Assert if `value` is truthy.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {unknown} value\n *   Value to assert.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected value to be truthy'`).\n * @returns {asserts value}\n *   Nothing; throws when `value` is falsey.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */\nexport function ok(value, message) {\n  assert(\n    Boolean(value),\n    false,\n    true,\n    'ok',\n    'Expected value to be truthy',\n    message\n  )\n}\n\n/**\n * Assert that a code path never happens.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Unreachable'`).\n * @returns {never}\n *   Nothing; always throws.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */\nexport function unreachable(message) {\n  assert(false, false, true, 'ok', 'Unreachable', message)\n}\n\n/**\n * @param {boolean} bool\n *   Whether to skip this operation.\n * @param {unknown} actual\n *   Actual value.\n * @param {unknown} expected\n *   Expected value.\n * @param {string} operator\n *   Operator.\n * @param {string} defaultMessage\n *   Default message for operation.\n * @param {Error | string | null | undefined} userMessage\n *   User-provided message.\n * @returns {asserts bool}\n *   Nothing; throws when falsey.\n */\n// eslint-disable-next-line max-params\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\n  if (!bool) {\n    throw userMessage instanceof Error\n      ? userMessage\n      : new AssertionError(\n          userMessage || defaultMessage,\n          actual,\n          expected,\n          operator,\n          !userMessage\n        )\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * Character codes.\n *\n * This module is compiled away!\n *\n * micromark works based on character codes.\n * This module contains constants for the ASCII block and the replacement\n * character.\n * A couple of them are handled in a special way, such as the line endings\n * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal\n * tab) and its expansion based on what column it’s at (virtual space),\n * and the end-of-file (eof) character.\n * As values are preprocessed before handling them, the actual characters LF,\n * CR, HT, and NUL (which is present as the replacement character), are\n * guaranteed to not exist.\n *\n * Unicode basic latin block.\n */\nexport const codes = /** @type {const} */ ({\n  carriageReturn: -5,\n  lineFeed: -4,\n  carriageReturnLineFeed: -3,\n  horizontalTab: -2,\n  virtualSpace: -1,\n  eof: null,\n  nul: 0,\n  soh: 1,\n  stx: 2,\n  etx: 3,\n  eot: 4,\n  enq: 5,\n  ack: 6,\n  bel: 7,\n  bs: 8,\n  ht: 9, // `\\t`\n  lf: 10, // `\\n`\n  vt: 11, // `\\v`\n  ff: 12, // `\\f`\n  cr: 13, // `\\r`\n  so: 14,\n  si: 15,\n  dle: 16,\n  dc1: 17,\n  dc2: 18,\n  dc3: 19,\n  dc4: 20,\n  nak: 21,\n  syn: 22,\n  etb: 23,\n  can: 24,\n  em: 25,\n  sub: 26,\n  esc: 27,\n  fs: 28,\n  gs: 29,\n  rs: 30,\n  us: 31,\n  space: 32,\n  exclamationMark: 33, // `!`\n  quotationMark: 34, // `\"`\n  numberSign: 35, // `#`\n  dollarSign: 36, // `$`\n  percentSign: 37, // `%`\n  ampersand: 38, // `&`\n  apostrophe: 39, // `'`\n  leftParenthesis: 40, // `(`\n  rightParenthesis: 41, // `)`\n  asterisk: 42, // `*`\n  plusSign: 43, // `+`\n  comma: 44, // `,`\n  dash: 45, // `-`\n  dot: 46, // `.`\n  slash: 47, // `/`\n  digit0: 48, // `0`\n  digit1: 49, // `1`\n  digit2: 50, // `2`\n  digit3: 51, // `3`\n  digit4: 52, // `4`\n  digit5: 53, // `5`\n  digit6: 54, // `6`\n  digit7: 55, // `7`\n  digit8: 56, // `8`\n  digit9: 57, // `9`\n  colon: 58, // `:`\n  semicolon: 59, // `;`\n  lessThan: 60, // `<`\n  equalsTo: 61, // `=`\n  greaterThan: 62, // `>`\n  questionMark: 63, // `?`\n  atSign: 64, // `@`\n  uppercaseA: 65, // `A`\n  uppercaseB: 66, // `B`\n  uppercaseC: 67, // `C`\n  uppercaseD: 68, // `D`\n  uppercaseE: 69, // `E`\n  uppercaseF: 70, // `F`\n  uppercaseG: 71, // `G`\n  uppercaseH: 72, // `H`\n  uppercaseI: 73, // `I`\n  uppercaseJ: 74, // `J`\n  uppercaseK: 75, // `K`\n  uppercaseL: 76, // `L`\n  uppercaseM: 77, // `M`\n  uppercaseN: 78, // `N`\n  uppercaseO: 79, // `O`\n  uppercaseP: 80, // `P`\n  uppercaseQ: 81, // `Q`\n  uppercaseR: 82, // `R`\n  uppercaseS: 83, // `S`\n  uppercaseT: 84, // `T`\n  uppercaseU: 85, // `U`\n  uppercaseV: 86, // `V`\n  uppercaseW: 87, // `W`\n  uppercaseX: 88, // `X`\n  uppercaseY: 89, // `Y`\n  uppercaseZ: 90, // `Z`\n  leftSquareBracket: 91, // `[`\n  backslash: 92, // `\\`\n  rightSquareBracket: 93, // `]`\n  caret: 94, // `^`\n  underscore: 95, // `_`\n  graveAccent: 96, // `` ` ``\n  lowercaseA: 97, // `a`\n  lowercaseB: 98, // `b`\n  lowercaseC: 99, // `c`\n  lowercaseD: 100, // `d`\n  lowercaseE: 101, // `e`\n  lowercaseF: 102, // `f`\n  lowercaseG: 103, // `g`\n  lowercaseH: 104, // `h`\n  lowercaseI: 105, // `i`\n  lowercaseJ: 106, // `j`\n  lowercaseK: 107, // `k`\n  lowercaseL: 108, // `l`\n  lowercaseM: 109, // `m`\n  lowercaseN: 110, // `n`\n  lowercaseO: 111, // `o`\n  lowercaseP: 112, // `p`\n  lowercaseQ: 113, // `q`\n  lowercaseR: 114, // `r`\n  lowercaseS: 115, // `s`\n  lowercaseT: 116, // `t`\n  lowercaseU: 117, // `u`\n  lowercaseV: 118, // `v`\n  lowercaseW: 119, // `w`\n  lowercaseX: 120, // `x`\n  lowercaseY: 121, // `y`\n  lowercaseZ: 122, // `z`\n  leftCurlyBrace: 123, // `{`\n  verticalBar: 124, // `|`\n  rightCurlyBrace: 125, // `}`\n  tilde: 126, // `~`\n  del: 127,\n  // Unicode Specials block.\n  byteOrderMarker: 65_279,\n  // Unicode Specials block.\n  replacementCharacter: 65_533 // `�`\n})\n","/**\n * This module is compiled away!\n *\n * Parsing markdown comes with a couple of constants, such as minimum or maximum\n * sizes of certain sequences.\n * Additionally, there are a couple symbols used inside micromark.\n * These are all defined here, but compiled away by scripts.\n */\nexport const constants = /** @type {const} */ ({\n  attentionSideAfter: 2, // Symbol to mark an attention sequence as after content: `a*`\n  attentionSideBefore: 1, // Symbol to mark an attention sequence as before content: `*a`\n  atxHeadingOpeningFenceSizeMax: 6, // 6 number signs is fine, 7 isn’t.\n  autolinkDomainSizeMax: 63, // 63 characters is fine, 64 is too many.\n  autolinkSchemeSizeMax: 32, // 32 characters is fine, 33 is too many.\n  cdataOpeningString: 'CDATA[', // And preceded by `<![`.\n  characterGroupPunctuation: 2, // Symbol used to indicate a character is punctuation\n  characterGroupWhitespace: 1, // Symbol used to indicate a character is whitespace\n  characterReferenceDecimalSizeMax: 7, // `&#9999999;`.\n  characterReferenceHexadecimalSizeMax: 6, // `&#xff9999;`.\n  characterReferenceNamedSizeMax: 31, // `&CounterClockwiseContourIntegral;`.\n  codeFencedSequenceSizeMin: 3, // At least 3 ticks or tildes are needed.\n  contentTypeContent: 'content',\n  contentTypeDocument: 'document',\n  contentTypeFlow: 'flow',\n  contentTypeString: 'string',\n  contentTypeText: 'text',\n  hardBreakPrefixSizeMin: 2, // At least 2 trailing spaces are needed.\n  htmlBasic: 6, // Symbol for `<div`\n  htmlCdata: 5, // Symbol for `<![CDATA[]]>`\n  htmlComment: 2, // Symbol for `<!---->`\n  htmlComplete: 7, // Symbol for `<x>`\n  htmlDeclaration: 4, // Symbol for `<!doctype>`\n  htmlInstruction: 3, // Symbol for `<?php?>`\n  htmlRawSizeMax: 8, // Length of `textarea`.\n  htmlRaw: 1, // Symbol for `<script>`\n  linkResourceDestinationBalanceMax: 32, // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>\n  linkReferenceSizeMax: 999, // See: <https://spec.commonmark.org/0.30/#link-label>\n  listItemValueSizeMax: 10, // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>\n  numericBaseDecimal: 10,\n  numericBaseHexadecimal: 0x10,\n  tabSize: 4, // Tabs have a hard-coded size of 4, per CommonMark.\n  thematicBreakMarkerCountMin: 3, // At least 3 asterisks, dashes, or underscores are needed.\n  v8MaxSafeChunkSize: 10_000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.\n})\n","/**\n * This module is compiled away!\n *\n * Here is the list of all types of tokens exposed by micromark, with a short\n * explanation of what they include and where they are found.\n * In picking names, generally, the rule is to be as explicit as possible\n * instead of reusing names.\n * For example, there is a `definitionDestination` and a `resourceDestination`,\n * instead of one shared name.\n */\n\n// Note: when changing the next record, you must also change `TokenTypeMap`\n// in `micromark-util-types/index.d.ts`.\nexport const types = /** @type {const} */ ({\n  // Generic type for data, such as in a title, a destination, etc.\n  data: 'data',\n\n  // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).\n  // Such as, between a fenced code fence and an info string.\n  whitespace: 'whitespace',\n\n  // Generic type for line endings (line feed, carriage return, carriage return +\n  // line feed).\n  lineEnding: 'lineEnding',\n\n  // A line ending, but ending a blank line.\n  lineEndingBlank: 'lineEndingBlank',\n\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a\n  // line.\n  linePrefix: 'linePrefix',\n\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a\n  // line.\n  lineSuffix: 'lineSuffix',\n\n  // Whole ATX heading:\n  //\n  // ```markdown\n  // #\n  // ## Alpha\n  // ### Bravo ###\n  // ```\n  //\n  // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.\n  atxHeading: 'atxHeading',\n\n  // Sequence of number signs in an ATX heading (`###`).\n  atxHeadingSequence: 'atxHeadingSequence',\n\n  // Content in an ATX heading (`alpha`).\n  // Includes text.\n  atxHeadingText: 'atxHeadingText',\n\n  // Whole autolink (`<https://example.com>` or `<admin@example.com>`)\n  // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.\n  autolink: 'autolink',\n\n  // Email autolink w/o markers (`admin@example.com`)\n  autolinkEmail: 'autolinkEmail',\n\n  // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).\n  autolinkMarker: 'autolinkMarker',\n\n  // Protocol autolink w/o markers (`https://example.com`)\n  autolinkProtocol: 'autolinkProtocol',\n\n  // A whole character escape (`\\-`).\n  // Includes `escapeMarker` and `characterEscapeValue`.\n  characterEscape: 'characterEscape',\n\n  // The escaped character (`-`).\n  characterEscapeValue: 'characterEscapeValue',\n\n  // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).\n  // Includes `characterReferenceMarker`, an optional\n  // `characterReferenceMarkerNumeric`, in which case an optional\n  // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.\n  characterReference: 'characterReference',\n\n  // The start or end marker (`&` or `;`).\n  characterReferenceMarker: 'characterReferenceMarker',\n\n  // Mark reference as numeric (`#`).\n  characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',\n\n  // Mark reference as numeric (`x` or `X`).\n  characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',\n\n  // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).\n  characterReferenceValue: 'characterReferenceValue',\n\n  // Whole fenced code:\n  //\n  // ````markdown\n  // ```js\n  // alert(1)\n  // ```\n  // ````\n  codeFenced: 'codeFenced',\n\n  // A fenced code fence, including whitespace, sequence, info, and meta\n  // (` ```js `).\n  codeFencedFence: 'codeFencedFence',\n\n  // Sequence of grave accent or tilde characters (` ``` `) in a fence.\n  codeFencedFenceSequence: 'codeFencedFenceSequence',\n\n  // Info word (`js`) in a fence.\n  // Includes string.\n  codeFencedFenceInfo: 'codeFencedFenceInfo',\n\n  // Meta words (`highlight=\"1\"`) in a fence.\n  // Includes string.\n  codeFencedFenceMeta: 'codeFencedFenceMeta',\n\n  // A line of code.\n  codeFlowValue: 'codeFlowValue',\n\n  // Whole indented code:\n  //\n  // ```markdown\n  //     alert(1)\n  // ```\n  //\n  // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.\n  codeIndented: 'codeIndented',\n\n  // A text code (``` `alpha` ```).\n  // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include\n  // `codeTextPadding`.\n  codeText: 'codeText',\n\n  codeTextData: 'codeTextData',\n\n  // A space or line ending right after or before a tick.\n  codeTextPadding: 'codeTextPadding',\n\n  // A text code fence (` `` `).\n  codeTextSequence: 'codeTextSequence',\n\n  // Whole content:\n  //\n  // ```markdown\n  // [a]: b\n  // c\n  // =\n  // d\n  // ```\n  //\n  // Includes `paragraph` and `definition`.\n  content: 'content',\n  // Whole definition:\n  //\n  // ```markdown\n  // [micromark]: https://github.com/micromark/micromark\n  // ```\n  //\n  // Includes `definitionLabel`, `definitionMarker`, `whitespace`,\n  // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.\n  definition: 'definition',\n\n  // Destination of a definition (`https://github.com/micromark/micromark` or\n  // `<https://github.com/micromark/micromark>`).\n  // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.\n  definitionDestination: 'definitionDestination',\n\n  // Enclosed destination of a definition\n  // (`<https://github.com/micromark/micromark>`).\n  // Includes `definitionDestinationLiteralMarker` and optionally\n  // `definitionDestinationString`.\n  definitionDestinationLiteral: 'definitionDestinationLiteral',\n\n  // Markers of an enclosed definition destination (`<` or `>`).\n  definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',\n\n  // Unenclosed destination of a definition\n  // (`https://github.com/micromark/micromark`).\n  // Includes `definitionDestinationString`.\n  definitionDestinationRaw: 'definitionDestinationRaw',\n\n  // Text in an destination (`https://github.com/micromark/micromark`).\n  // Includes string.\n  definitionDestinationString: 'definitionDestinationString',\n\n  // Label of a definition (`[micromark]`).\n  // Includes `definitionLabelMarker` and `definitionLabelString`.\n  definitionLabel: 'definitionLabel',\n\n  // Markers of a definition label (`[` or `]`).\n  definitionLabelMarker: 'definitionLabelMarker',\n\n  // Value of a definition label (`micromark`).\n  // Includes string.\n  definitionLabelString: 'definitionLabelString',\n\n  // Marker between a label and a destination (`:`).\n  definitionMarker: 'definitionMarker',\n\n  // Title of a definition (`\"x\"`, `'y'`, or `(z)`).\n  // Includes `definitionTitleMarker` and optionally `definitionTitleString`.\n  definitionTitle: 'definitionTitle',\n\n  // Marker around a title of a definition (`\"`, `'`, `(`, or `)`).\n  definitionTitleMarker: 'definitionTitleMarker',\n\n  // Data without markers in a title (`z`).\n  // Includes string.\n  definitionTitleString: 'definitionTitleString',\n\n  // Emphasis (`*alpha*`).\n  // Includes `emphasisSequence` and `emphasisText`.\n  emphasis: 'emphasis',\n\n  // Sequence of emphasis markers (`*` or `_`).\n  emphasisSequence: 'emphasisSequence',\n\n  // Emphasis text (`alpha`).\n  // Includes text.\n  emphasisText: 'emphasisText',\n\n  // The character escape marker (`\\`).\n  escapeMarker: 'escapeMarker',\n\n  // A hard break created with a backslash (`\\\\n`).\n  // Note: does not include the line ending.\n  hardBreakEscape: 'hardBreakEscape',\n\n  // A hard break created with trailing spaces (`  \\n`).\n  // Does not include the line ending.\n  hardBreakTrailing: 'hardBreakTrailing',\n\n  // Flow HTML:\n  //\n  // ```markdown\n  // <div\n  // ```\n  //\n  // Inlcudes `lineEnding`, `htmlFlowData`.\n  htmlFlow: 'htmlFlow',\n\n  htmlFlowData: 'htmlFlowData',\n\n  // HTML in text (the tag in `a <i> b`).\n  // Includes `lineEnding`, `htmlTextData`.\n  htmlText: 'htmlText',\n\n  htmlTextData: 'htmlTextData',\n\n  // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or\n  // `![alpha]`).\n  // Includes `label` and an optional `resource` or `reference`.\n  image: 'image',\n\n  // Whole link label (`[*alpha*]`).\n  // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.\n  label: 'label',\n\n  // Text in an label (`*alpha*`).\n  // Includes text.\n  labelText: 'labelText',\n\n  // Start a link label (`[`).\n  // Includes a `labelMarker`.\n  labelLink: 'labelLink',\n\n  // Start an image label (`![`).\n  // Includes `labelImageMarker` and `labelMarker`.\n  labelImage: 'labelImage',\n\n  // Marker of a label (`[` or `]`).\n  labelMarker: 'labelMarker',\n\n  // Marker to start an image (`!`).\n  labelImageMarker: 'labelImageMarker',\n\n  // End a label (`]`).\n  // Includes `labelMarker`.\n  labelEnd: 'labelEnd',\n\n  // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).\n  // Includes `label` and an optional `resource` or `reference`.\n  link: 'link',\n\n  // Whole paragraph:\n  //\n  // ```markdown\n  // alpha\n  // bravo.\n  // ```\n  //\n  // Includes text.\n  paragraph: 'paragraph',\n\n  // A reference (`[alpha]` or `[]`).\n  // Includes `referenceMarker` and an optional `referenceString`.\n  reference: 'reference',\n\n  // A reference marker (`[` or `]`).\n  referenceMarker: 'referenceMarker',\n\n  // Reference text (`alpha`).\n  // Includes string.\n  referenceString: 'referenceString',\n\n  // A resource (`(https://example.com \"alpha\")`).\n  // Includes `resourceMarker`, an optional `resourceDestination` with an optional\n  // `whitespace` and `resourceTitle`.\n  resource: 'resource',\n\n  // A resource destination (`https://example.com`).\n  // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.\n  resourceDestination: 'resourceDestination',\n\n  // A literal resource destination (`<https://example.com>`).\n  // Includes `resourceDestinationLiteralMarker` and optionally\n  // `resourceDestinationString`.\n  resourceDestinationLiteral: 'resourceDestinationLiteral',\n\n  // A resource destination marker (`<` or `>`).\n  resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',\n\n  // A raw resource destination (`https://example.com`).\n  // Includes `resourceDestinationString`.\n  resourceDestinationRaw: 'resourceDestinationRaw',\n\n  // Resource destination text (`https://example.com`).\n  // Includes string.\n  resourceDestinationString: 'resourceDestinationString',\n\n  // A resource marker (`(` or `)`).\n  resourceMarker: 'resourceMarker',\n\n  // A resource title (`\"alpha\"`, `'alpha'`, or `(alpha)`).\n  // Includes `resourceTitleMarker` and optionally `resourceTitleString`.\n  resourceTitle: 'resourceTitle',\n\n  // A resource title marker (`\"`, `'`, `(`, or `)`).\n  resourceTitleMarker: 'resourceTitleMarker',\n\n  // Resource destination title (`alpha`).\n  // Includes string.\n  resourceTitleString: 'resourceTitleString',\n\n  // Whole setext heading:\n  //\n  // ```markdown\n  // alpha\n  // bravo\n  // =====\n  // ```\n  //\n  // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and\n  // `setextHeadingLine`.\n  setextHeading: 'setextHeading',\n\n  // Content in a setext heading (`alpha\\nbravo`).\n  // Includes text.\n  setextHeadingText: 'setextHeadingText',\n\n  // Underline in a setext heading, including whitespace suffix (`==`).\n  // Includes `setextHeadingLineSequence`.\n  setextHeadingLine: 'setextHeadingLine',\n\n  // Sequence of equals or dash characters in underline in a setext heading (`-`).\n  setextHeadingLineSequence: 'setextHeadingLineSequence',\n\n  // Strong (`**alpha**`).\n  // Includes `strongSequence` and `strongText`.\n  strong: 'strong',\n\n  // Sequence of strong markers (`**` or `__`).\n  strongSequence: 'strongSequence',\n\n  // Strong text (`alpha`).\n  // Includes text.\n  strongText: 'strongText',\n\n  // Whole thematic break:\n  //\n  // ```markdown\n  // * * *\n  // ```\n  //\n  // Includes `thematicBreakSequence` and `whitespace`.\n  thematicBreak: 'thematicBreak',\n\n  // A sequence of one or more thematic break markers (`***`).\n  thematicBreakSequence: 'thematicBreakSequence',\n\n  // Whole block quote:\n  //\n  // ```markdown\n  // > a\n  // >\n  // > b\n  // ```\n  //\n  // Includes `blockQuotePrefix` and flow.\n  blockQuote: 'blockQuote',\n  // The `>` or `> ` of a block quote.\n  blockQuotePrefix: 'blockQuotePrefix',\n  // The `>` of a block quote prefix.\n  blockQuoteMarker: 'blockQuoteMarker',\n  // The optional ` ` of a block quote prefix.\n  blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',\n\n  // Whole ordered list:\n  //\n  // ```markdown\n  // 1. a\n  //    b\n  // ```\n  //\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\n  // lines.\n  listOrdered: 'listOrdered',\n\n  // Whole unordered list:\n  //\n  // ```markdown\n  // - a\n  //   b\n  // ```\n  //\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\n  // lines.\n  listUnordered: 'listUnordered',\n\n  // The indent of further list item lines.\n  listItemIndent: 'listItemIndent',\n\n  // A marker, as in, `*`, `+`, `-`, `.`, or `)`.\n  listItemMarker: 'listItemMarker',\n\n  // The thing that starts a list item, such as `1. `.\n  // Includes `listItemValue` if ordered, `listItemMarker`, and\n  // `listItemPrefixWhitespace` (unless followed by a line ending).\n  listItemPrefix: 'listItemPrefix',\n\n  // The whitespace after a marker.\n  listItemPrefixWhitespace: 'listItemPrefixWhitespace',\n\n  // The numerical value of an ordered item.\n  listItemValue: 'listItemValue',\n\n  // Internal types used for subtokenizers, compiled away\n  chunkDocument: 'chunkDocument',\n  chunkContent: 'chunkContent',\n  chunkFlow: 'chunkFlow',\n  chunkText: 'chunkText',\n  chunkString: 'chunkString'\n})\n","/**\n * This module is compiled away!\n *\n * While micromark works based on character codes, this module includes the\n * string versions of ’em.\n * The C0 block, except for LF, CR, HT, and w/ the replacement character added,\n * are available here.\n */\nexport const values = /** @type {const} */ ({\n  ht: '\\t',\n  lf: '\\n',\n  cr: '\\r',\n  space: ' ',\n  exclamationMark: '!',\n  quotationMark: '\"',\n  numberSign: '#',\n  dollarSign: '$',\n  percentSign: '%',\n  ampersand: '&',\n  apostrophe: \"'\",\n  leftParenthesis: '(',\n  rightParenthesis: ')',\n  asterisk: '*',\n  plusSign: '+',\n  comma: ',',\n  dash: '-',\n  dot: '.',\n  slash: '/',\n  digit0: '0',\n  digit1: '1',\n  digit2: '2',\n  digit3: '3',\n  digit4: '4',\n  digit5: '5',\n  digit6: '6',\n  digit7: '7',\n  digit8: '8',\n  digit9: '9',\n  colon: ':',\n  semicolon: ';',\n  lessThan: '<',\n  equalsTo: '=',\n  greaterThan: '>',\n  questionMark: '?',\n  atSign: '@',\n  uppercaseA: 'A',\n  uppercaseB: 'B',\n  uppercaseC: 'C',\n  uppercaseD: 'D',\n  uppercaseE: 'E',\n  uppercaseF: 'F',\n  uppercaseG: 'G',\n  uppercaseH: 'H',\n  uppercaseI: 'I',\n  uppercaseJ: 'J',\n  uppercaseK: 'K',\n  uppercaseL: 'L',\n  uppercaseM: 'M',\n  uppercaseN: 'N',\n  uppercaseO: 'O',\n  uppercaseP: 'P',\n  uppercaseQ: 'Q',\n  uppercaseR: 'R',\n  uppercaseS: 'S',\n  uppercaseT: 'T',\n  uppercaseU: 'U',\n  uppercaseV: 'V',\n  uppercaseW: 'W',\n  uppercaseX: 'X',\n  uppercaseY: 'Y',\n  uppercaseZ: 'Z',\n  leftSquareBracket: '[',\n  backslash: '\\\\',\n  rightSquareBracket: ']',\n  caret: '^',\n  underscore: '_',\n  graveAccent: '`',\n  lowercaseA: 'a',\n  lowercaseB: 'b',\n  lowercaseC: 'c',\n  lowercaseD: 'd',\n  lowercaseE: 'e',\n  lowercaseF: 'f',\n  lowercaseG: 'g',\n  lowercaseH: 'h',\n  lowercaseI: 'i',\n  lowercaseJ: 'j',\n  lowercaseK: 'k',\n  lowercaseL: 'l',\n  lowercaseM: 'm',\n  lowercaseN: 'n',\n  lowercaseO: 'o',\n  lowercaseP: 'p',\n  lowercaseQ: 'q',\n  lowercaseR: 'r',\n  lowercaseS: 's',\n  lowercaseT: 't',\n  lowercaseU: 'u',\n  lowercaseV: 'v',\n  lowercaseW: 'w',\n  lowercaseX: 'x',\n  lowercaseY: 'y',\n  lowercaseZ: 'z',\n  leftCurlyBrace: '{',\n  verticalBar: '|',\n  rightCurlyBrace: '}',\n  tilde: '~',\n  replacementCharacter: '�'\n})\n","import {constants} from 'micromark-util-symbol'\n\n/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < constants.v8MaxSafeChunkSize) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(\n        chunkStart,\n        chunkStart + constants.v8MaxSafeChunkSize\n      )\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n\n      chunkStart += constants.v8MaxSafeChunkSize\n      start += constants.v8MaxSafeChunkSize\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","import {codes, values} from 'micromark-util-symbol'\n\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < codes.ht ||\n    code === codes.vt ||\n    (code > codes.cr && code < codes.space) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > codes.tilde && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55_295 && code < 57_344) ||\n    // Noncharacters.\n    (code > 64_975 && code < 65_008) ||\n    /* eslint-disable no-bitwise */\n    (code & 65_535) === 65_535 ||\n    (code & 65_535) === 65_534 ||\n    /* eslint-enable no-bitwise */\n    // Out of range\n    code > 1_114_111\n  ) {\n    return values.replacementCharacter\n  }\n\n  return String.fromCodePoint(code)\n}\n","import {values} from 'micromark-util-symbol'\n\n/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, values.space)\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport {codes} from 'micromark-util-symbol'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < codes.space || code === codes.del)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < codes.horizontalTab\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < codes.nul || code === codes.space)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return (\n    code === codes.horizontalTab ||\n    code === codes.virtualSpace ||\n    code === codes.space\n  )\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\nimport {codes, values} from 'micromark-util-symbol'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === codes.percentSign &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = values.replacementCharacter\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {InitialConstruct} */\nexport const content = {tokenize: initializeContent}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, contentStart, types.linePrefix)\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    assert(\n      code !== codes.eof && !markdownLineEnding(code),\n      'expected anything other than a line ending or EOF'\n    )\n    effects.enter(types.paragraph)\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(types.chunkText, {\n      contentType: constants.contentTypeText,\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === codes.eof) {\n      effects.exit(types.chunkText)\n      effects.exit(types.paragraph)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit(types.chunkText)\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {InitialConstruct} */\nexport const document = {tokenize: initializeDocument}\n\n/** @type {Construct} */\nconst containerConstruct = {tokenize: tokenizeContainer}\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      assert(\n        item[0].continuation,\n        'expected `continuation` to be defined on container construct'\n      )\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined after continuation'\n    )\n\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      assert(point, 'could not find previous flow chunk')\n\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = {...point}\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    assert(\n      self.currentConstruct,\n      'expected `currentConstruct` to be defined on tokenizer'\n    )\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined on tokenizer'\n    )\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === codes.eof) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter(types.chunkFlow, {\n      _tokenizer: childFlow,\n      contentType: constants.contentTypeFlow,\n      previous: childToken\n    })\n\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === codes.eof) {\n      writeToChild(effects.exit(types.chunkFlow), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit(types.chunkFlow))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    assert(childFlow, 'expected `childFlow` to be defined when continuing')\n    const stream = self.sliceStream(token)\n    if (endOfFile) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      assert(point, 'could not find previous flow chunk')\n\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = {...point}\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      assert(\n        entry[0].exit,\n        'expected `exit` to be defined on container construct'\n      )\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined when closing flow'\n    )\n    assert(childFlow, 'expected `childFlow` to be defined when closing it')\n    childFlow.write([codes.eof])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n  assert(\n    this.parser.constructs.disable.null,\n    'expected `disable.null` to be populated'\n  )\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    types.linePrefix,\n    this.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize\n  )\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nimport {codes, constants} from 'micromark-util-symbol'\n\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === codes.eof ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return constants.characterGroupWhitespace\n  }\n\n  if (unicodePunctuation(code)) {\n    return constants.characterGroupPunctuation\n  }\n}\n","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n\n          const start = {...events[open][1].end}\n          const end = {...events[index][1].start}\n          movePoint(start, -use)\n          movePoint(end, use)\n\n          openingSequence = {\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\n            start,\n            end: {...events[open][1].end}\n          }\n          closingSequence = {\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\n            start: {...events[index][1].start},\n            end\n          }\n          text = {\n            type: use > 1 ? types.strongText : types.emphasisText,\n            start: {...events[open][1].end},\n            end: {...events[index][1].start}\n          }\n          group = {\n            type: use > 1 ? types.strong : types.emphasis,\n            start: {...openingSequence.start},\n            end: {...closingSequence.end}\n          }\n\n          events[open][1].end = {...openingSequence.start}\n          events[index][1].start = {...closingSequence.end}\n\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n          assert(\n            context.parser.constructs.insideSpan.null,\n            'expected `insideSpan` to be populated'\n          )\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(\n      code === codes.asterisk || code === codes.underscore,\n      'expected asterisk or underscore'\n    )\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n    assert(attentionMarkers, 'expected `attentionMarkers` to be populated')\n\n    const open =\n      !after ||\n      (after === constants.characterGroupPunctuation && before) ||\n      attentionMarkers.includes(code)\n    const close =\n      !before ||\n      (before === constants.characterGroupPunctuation && after) ||\n      attentionMarkers.includes(previous)\n\n    token._open = Boolean(\n      marker === codes.asterisk ? open : open && (before || !close)\n    )\n    token._close = Boolean(\n      marker === codes.asterisk ? close : close && (after || !open)\n    )\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {\n  asciiAlphanumeric,\n  asciiAlpha,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const autolink = {name: 'autolink', tokenize: tokenizeAutolink}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.autolink)\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.enter(types.autolinkProtocol)\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    if (code === codes.atSign) {\n      return nok(code)\n    }\n\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      code === codes.plusSign ||\n      code === codes.dash ||\n      code === codes.dot ||\n      asciiAlphanumeric(code)\n    ) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === codes.plusSign ||\n        code === codes.dash ||\n        code === codes.dot ||\n        asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkSchemeSizeMax\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol)\n      effects.enter(types.autolinkMarker)\n      effects.consume(code)\n      effects.exit(types.autolinkMarker)\n      effects.exit(types.autolink)\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.lessThan ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === codes.greaterThan) {\n      // Exit, then change the token type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail\n      effects.enter(types.autolinkMarker)\n      effects.consume(code)\n      effects.exit(types.autolinkMarker)\n      effects.exit(types.autolink)\n      return ok\n    }\n\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if (\n      (code === codes.dash || asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkDomainSizeMax\n    ) {\n      const next = code === codes.dash ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const blankLine = {partial: true, tokenize: tokenizeBlankLine}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, types.linePrefix)(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {tokenize: tokenizeBlockQuoteContinuation},\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === codes.greaterThan) {\n      const state = self.containerState\n\n      assert(state, 'expected `containerState` to be defined in container')\n\n      if (!state.open) {\n        effects.enter(types.blockQuote, {_container: true})\n        state.open = true\n      }\n\n      effects.enter(types.blockQuotePrefix)\n      effects.enter(types.blockQuoteMarker)\n      effects.consume(code)\n      effects.exit(types.blockQuoteMarker)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.blockQuotePrefixWhitespace)\n      effects.consume(code)\n      effects.exit(types.blockQuotePrefixWhitespace)\n      effects.exit(types.blockQuotePrefix)\n      return ok\n    }\n\n    effects.exit(types.blockQuotePrefix)\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n      assert(\n        self.parser.constructs.disable.null,\n        'expected `disable.null` to be populated'\n      )\n\n      return factorySpace(\n        effects,\n        contBefore,\n        types.linePrefix,\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : constants.tabSize\n      )(code)\n    }\n\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(types.blockQuote)\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {asciiPunctuation} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.characterEscape)\n    effects.enter(types.escapeMarker)\n    effects.consume(code)\n    effects.exit(types.escapeMarker)\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue)\n      effects.consume(code)\n      effects.exit(types.characterEscapeValue)\n      effects.exit(types.characterEscape)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.ampersand, 'expected `&`')\n    effects.enter(types.characterReference)\n    effects.enter(types.characterReferenceMarker)\n    effects.consume(code)\n    effects.exit(types.characterReferenceMarker)\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.characterReferenceMarkerNumeric)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarkerNumeric)\n      return numeric\n    }\n\n    effects.enter(types.characterReferenceValue)\n    max = constants.characterReferenceNamedSizeMax\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter(types.characterReferenceMarkerHexadecimal)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarkerHexadecimal)\n      effects.enter(types.characterReferenceValue)\n      max = constants.characterReferenceHexadecimalSizeMax\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter(types.characterReferenceValue)\n    max = constants.characterReferenceDecimalSizeMax\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === codes.semicolon && size) {\n      const token = effects.exit(types.characterReferenceValue)\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(types.characterReferenceMarker)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarker)\n      effects.exit(types.characterReference)\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {partial: true, tokenize: tokenizeCloseStart}\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    assert(\n      code === codes.graveAccent || code === codes.tilde,\n      'expected `` ` `` or `~`'\n    )\n\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === types.linePrefix\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n\n    marker = code\n    effects.enter(types.codeFenced)\n    effects.enter(types.codeFencedFence)\n    effects.enter(types.codeFencedFenceSequence)\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    if (sizeOpen < constants.codeFencedSequenceSizeMin) {\n      return nok(code)\n    }\n\n    effects.exit(types.codeFencedFenceSequence)\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, types.whitespace)(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFencedFence)\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n\n    effects.enter(types.codeFencedFenceInfo)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceInfo)\n      return infoBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceInfo)\n      return factorySpace(effects, metaBefore, types.whitespace)(code)\n    }\n\n    if (code === codes.graveAccent && code === marker) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n\n    effects.enter(types.codeFencedFenceMeta)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceMeta)\n      return infoBefore(code)\n    }\n\n    if (code === codes.graveAccent && code === marker) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          types.linePrefix,\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return beforeContentChunk(code)\n    }\n\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(types.codeFenced)\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      assert(markdownLineEnding(code), 'expected eol')\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n      assert(\n        self.parser.constructs.disable.null,\n        'expected `disable.null` to be populated'\n      )\n\n      // To do: `enter` here or in next state?\n      effects.enter(types.codeFencedFence)\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            types.linePrefix,\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : constants.tabSize\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(types.codeFencedFenceSequence)\n        return sequenceClose(code)\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n\n      if (size >= sizeOpen) {\n        effects.exit(types.codeFencedFenceSequence)\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, types.whitespace)(code)\n          : sequenceCloseAfter(code)\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === codes.eof || markdownLineEnding(code)) {\n        effects.exit(types.codeFencedFence)\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {partial: true, tokenize: tokenizeFurtherStart}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n    assert(markdownSpace(code))\n    effects.enter(types.codeIndented)\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === codes.eof) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeIndented)\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? ok(code)\n      : markdownLineEnding(code)\n        ? furtherStart(code)\n        : nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === types.lineEnding ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === types.lineEnding ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === types.codeTextData) {\n        // Then we have padding.\n        events[headEnterIndex][1].type = types.codeTextPadding\n        events[tailExitIndex][1].type = types.codeTextPadding\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (\n        index !== tailExitIndex &&\n        events[index][1].type !== types.lineEnding\n      ) {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === types.lineEnding\n    ) {\n      events[enter][1].type = types.codeTextData\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== codes.graveAccent ||\n    this.events[this.events.length - 1][1].type === types.characterEscape\n  )\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.graveAccent, 'expected `` ` ``')\n    assert(previous.call(self, self.previous), 'expected correct previous')\n    effects.enter(types.codeText)\n    effects.enter(types.codeTextSequence)\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === codes.graveAccent) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit(types.codeTextSequence)\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === codes.space) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === codes.graveAccent) {\n      token = effects.enter(types.codeTextSequence)\n      size = 0\n      return sequenceClose(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return between\n    }\n\n    // Data.\n    effects.enter(types.codeTextData)\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.graveAccent ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit(types.codeTextData)\n      return between(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === codes.graveAccent) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(types.codeTextSequence)\n      effects.exit(types.codeText)\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = types.codeTextData\n    return data(code)\n  }\n}\n","import {constants} from 'micromark-util-symbol'\n\n/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : []\n    /** @type {Array<T>} */\n    this.right = []\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError(\n        'Cannot access index `' +\n          index +\n          '` in a splice buffer of size `' +\n          (this.left.length + this.right.length) +\n          '`'\n      )\n    }\n\n    if (index < this.left.length) return this.left[index]\n    return this.right[this.right.length - index + this.left.length - 1]\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0)\n    return this.right.pop()\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop =\n      end === null || end === undefined ? Number.POSITIVE_INFINITY : end\n\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop)\n    }\n\n    if (start > this.left.length) {\n      return this.right\n        .slice(\n          this.right.length - stop + this.left.length,\n          this.right.length - start + this.left.length\n        )\n        .reverse()\n    }\n\n    return this.left\n      .slice(start)\n      .concat(\n        this.right.slice(this.right.length - stop + this.left.length).reverse()\n      )\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0\n\n    this.setCursor(Math.trunc(start))\n    const removed = this.right.splice(\n      this.right.length - count,\n      Number.POSITIVE_INFINITY\n    )\n    if (items) chunkedPush(this.left, items)\n    return removed.reverse()\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY)\n    return this.left.pop()\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY)\n    this.left.push(item)\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY)\n    chunkedPush(this.left, items)\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0)\n    this.right.push(item)\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0)\n    chunkedPush(this.right, items.reverse())\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (\n      n === this.left.length ||\n      (n > this.left.length && this.right.length === 0) ||\n      (n < 0 && this.left.length === 0)\n    )\n      return\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY)\n      chunkedPush(this.right, removed.reverse())\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(\n        this.left.length + this.right.length - n,\n        Number.POSITIVE_INFINITY\n      )\n      chunkedPush(this.left, removed.reverse())\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0\n\n  if (right.length < constants.v8MaxSafeChunkSize) {\n    list.push(...right)\n  } else {\n    while (chunkStart < right.length) {\n      list.push(\n        ...right.slice(chunkStart, chunkStart + constants.v8MaxSafeChunkSize)\n      )\n      chunkStart += constants.v8MaxSafeChunkSize\n    }\n  }\n}\n","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {splice} from 'micromark-util-chunked'\nimport {codes, types} from 'micromark-util-symbol'\nimport {SpliceBuffer} from './lib/splice-buffer.js'\n\n// Hidden API exposed for testing.\nexport {SpliceBuffer} from './lib/splice-buffer.js'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  const events = new SpliceBuffer(eventsArray)\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events.get(index)\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === types.chunkFlow &&\n      events.get(index - 1)[1].type === types.listItemPrefix\n    ) {\n      assert(event[1]._tokenizer, 'expected `_tokenizer` on subtokens')\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === types.lineEndingBlank\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === types.content\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === types.content) {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === types.chunkText) {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex)\n\n        if (\n          otherEvent[1].type === types.lineEnding ||\n          otherEvent[1].type === types.lineEndingBlank\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = types.lineEndingBlank\n            }\n\n            otherEvent[1].type = types.lineEnding\n            lineIndex = otherIndex\n          }\n        } else if (\n          otherEvent[1].type === types.linePrefix ||\n          otherEvent[1].type === types.listItemIndent\n        ) {\n          // Move past.\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {...events.get(lineIndex)[1].start}\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        events.splice(lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0))\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1]\n  const context = events.get(eventIndex)[2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  assert(token.contentType, 'expected `contentType` on subtokens')\n\n  let tokenizer = token._tokenizer\n\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start)\n\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true\n    }\n  }\n\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n\n    assert(\n      !previous || current.previous === previous,\n      'expected previous to match'\n    )\n    assert(!previous || previous.next === current, 'expected next to match')\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(codes.eof)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      assert(current, 'expected a current token')\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n    assert(!current.next, 'expected no next token')\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    assert(start !== undefined, 'expected a start position when splicing')\n    jumps.push([start, start + slice.length - 1])\n    events.splice(start, 2, slice)\n  }\n\n  jumps.reverse()\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {resolve: resolveContent, tokenize: tokenizeContent}\n\n/** @type {Construct} */\nconst continuationConstruct = {partial: true, tokenize: tokenizeContinuation}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    assert(\n      code !== codes.eof && !markdownLineEnding(code),\n      'expected no eof or eol'\n    )\n\n    effects.enter(types.content)\n    previous = effects.enter(types.chunkContent, {\n      contentType: constants.contentTypeContent\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === codes.eof) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(types.chunkContent)\n    effects.exit(types.content)\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.consume(code)\n    effects.exit(types.chunkContent)\n    assert(previous, 'expected previous token')\n    previous.next = effects.enter(types.chunkContent, {\n      contentType: constants.contentTypeContent,\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    assert(markdownLineEnding(code), 'expected a line ending')\n    effects.exit(types.chunkContent)\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, prefixed, types.linePrefix)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n    assert(\n      self.parser.constructs.disable.null,\n      'expected `disable.null` to be populated'\n    )\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === codes.lessThan) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.rightParenthesis ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === codes.greaterThan) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.chunkString)\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      markdownLineEnding(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (\n      code === codes.lessThan ||\n      code === codes.greaterThan ||\n      code === codes.backslash\n    ) {\n      effects.consume(code)\n      return enclosed\n    }\n\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === codes.eof ||\n        code === codes.rightParenthesis ||\n        markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit(types.chunkString)\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (balance < limit && code === codes.leftParenthesis) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n\n    if (code === codes.rightParenthesis) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.leftParenthesis ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (\n      code === codes.leftParenthesis ||\n      code === codes.rightParenthesis ||\n      code === codes.backslash\n    ) {\n      effects.consume(code)\n      return raw\n    }\n\n    return raw(code)\n  }\n}\n","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > constants.linkReferenceSizeMax ||\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      (code === codes.rightSquareBracket && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === codes.caret &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return atBreak\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      code === codes.rightSquareBracket ||\n      markdownLineEnding(code) ||\n      size++ > constants.linkReferenceSizeMax\n    ) {\n      effects.exit(types.chunkString)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === codes.backslash ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n\n    return labelInside(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.leftParenthesis\n    ) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\n      return begin\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return factorySpace(effects, atBreak, types.linePrefix)\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code)\n      return inside\n    }\n\n    return inside(code)\n  }\n}\n","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol'\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? types.linePrefix : types.lineSuffix\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const definition = {name: 'definition', tokenize: tokenizeDefinition}\n\n/** @type {Construct} */\nconst titleBefore = {partial: true, tokenize: tokenizeTitleBefore}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(types.definition)\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      types.definitionLabel,\n      types.definitionLabelMarker,\n      types.definitionLabelString\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === codes.colon) {\n      effects.enter(types.definitionMarker)\n      effects.consume(code)\n      effects.exit(types.definitionMarker)\n      return markerAfter\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      types.definitionDestination,\n      types.definitionDestinationLiteral,\n      types.definitionDestinationLiteralMarker,\n      types.definitionDestinationRaw,\n      types.definitionDestinationString\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, types.whitespace)(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.definition)\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      types.definitionTitle,\n      types.definitionTitleMarker,\n      types.definitionTitleString\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          titleAfterOptionalWhitespace,\n          types.whitespace\n        )(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.hardBreakEscape)\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(types.hardBreakEscape)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === types.whitespace) {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === types.whitespace\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === types.atxHeadingSequence &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === types.whitespace))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: types.atxHeadingText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: types.chunkText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: constants.contentTypeText\n    }\n\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(types.atxHeading)\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    assert(code === codes.numberSign, 'expected `#`')\n    effects.enter(types.atxHeadingSequence)\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (\n      code === codes.numberSign &&\n      size++ < constants.atxHeadingOpeningFenceSizeMax\n    ) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      effects.exit(types.atxHeadingSequence)\n      return atBreak(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.atxHeadingSequence)\n      return sequenceFurther(code)\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.atxHeading)\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, types.whitespace)(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(types.atxHeadingText)\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === codes.numberSign) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n\n    effects.exit(types.atxHeadingSequence)\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === codes.eof ||\n      code === codes.numberSign ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      effects.exit(types.atxHeadingText)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {\n  asciiAlphanumeric,\n  asciiAlpha,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {codes, constants, types} from 'micromark-util-symbol'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {partial: true, tokenize: tokenizeBlankLineBefore}\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === types.htmlFlow\n    ) {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.htmlFlow)\n    effects.enter(types.htmlFlowData)\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      marker = constants.htmlInstruction\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      assert(code !== null) // Always the case.\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      marker = constants.htmlComment\n      return commentOpenInside\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code)\n      marker = constants.htmlCdata\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = constants.htmlDeclaration\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = constants.cdataOpeningString\n\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n\n      return cdataOpenInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      assert(code !== null) // Always the case.\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === codes.eof ||\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === codes.slash\n      const name = buffer.toLowerCase()\n\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = constants.htmlRaw\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = constants.htmlBasic\n\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      marker = constants.htmlComplete\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n          ? completeClosingTagAfter(code)\n          : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === codes.dash ||\n      code === codes.dot ||\n      code === codes.colon ||\n      code === codes.underscore ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === codes.eof ||\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.slash ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownSpace(code)\n    ) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === codes.dash && marker === constants.htmlComment) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === codes.lessThan && marker === constants.htmlRaw) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === codes.greaterThan && marker === constants.htmlDeclaration) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === codes.questionMark && marker === constants.htmlInstruction) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === codes.rightSquareBracket && marker === constants.htmlCdata) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n\n    if (\n      markdownLineEnding(code) &&\n      (marker === constants.htmlBasic || marker === constants.htmlComplete)\n    ) {\n      effects.exit(types.htmlFlowData)\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData)\n      return continuationStart(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    assert(markdownLineEnding(code))\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n\n    effects.enter(types.htmlFlowData)\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === codes.greaterThan) {\n      const name = buffer.toLowerCase()\n\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n\n      return continuation(code)\n    }\n\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\n      assert(code !== null) // Always the case.\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === codes.dash && marker === constants.htmlComment) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData)\n      return continuationAfter(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(types.htmlFlow)\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected a line ending')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlphanumeric,\n  asciiAlpha,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const htmlText = {name: 'htmlText', tokenize: tokenizeHtmlText}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.htmlText)\n    effects.enter(types.htmlTextData)\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentEnd\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentEnd\n    }\n\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === codes.greaterThan\n      ? end(code)\n      : code === codes.dash\n        ? commentClose(code)\n        : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = constants.cdataOpeningString\n\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === codes.greaterThan) {\n      return end(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === codes.greaterThan ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === codes.dash ||\n      code === codes.dot ||\n      code === codes.colon ||\n      code === codes.underscore ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === codes.eof ||\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      effects.exit(types.htmlTextData)\n      effects.exit(types.htmlText)\n      return ok\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    assert(returnState, 'expected return state')\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.exit(types.htmlTextData)\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n    assert(\n      self.parser.constructs.disable.null,\n      'expected `disable.null` to be populated'\n    )\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          types.linePrefix,\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : constants.tabSize\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(types.htmlTextData)\n    return returnState(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {tokenize: tokenizeResource}\n/** @type {Construct} */\nconst referenceFullConstruct = {tokenize: tokenizeReferenceFull}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {tokenize: tokenizeReferenceCollapsed}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Array<Event>} */\n  const newEvents = []\n  while (++index < events.length) {\n    const token = events[index][1]\n    newEvents.push(events[index])\n\n    if (\n      token.type === types.labelImage ||\n      token.type === types.labelLink ||\n      token.type === types.labelEnd\n    ) {\n      // Remove the marker.\n      const offset = token.type === types.labelImage ? 4 : 2\n      token.type = types.data\n      index += offset\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents)\n  }\n\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === types.link ||\n        (token.type === types.labelLink && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === types.labelLink) {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === types.labelImage || token.type === types.labelLink) &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== types.labelLink) {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === types.labelEnd) {\n      close = index\n    }\n  }\n\n  assert(open !== undefined, '`open` is supposed to be found')\n  assert(close !== undefined, '`close` is supposed to be found')\n\n  const group = {\n    type: events[open][1].type === types.labelLink ? types.link : types.image,\n    start: {...events[open][1].start},\n    end: {...events[events.length - 1][1].end}\n  }\n\n  const label = {\n    type: types.label,\n    start: {...events[open][1].start},\n    end: {...events[close][1].end}\n  }\n\n  const text = {\n    type: types.labelText,\n    start: {...events[open + offset + 2][1].end},\n    end: {...events[close - 2][1].start}\n  }\n\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n  assert(\n    context.parser.constructs.insideSpan.null,\n    'expected `insideSpan.null` to be populated'\n  )\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n\n  splice(events, open, events.length, media)\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === types.labelImage ||\n        self.events[index][1].type === types.labelLink) &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.rightSquareBracket, 'expected `]`')\n\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({start: labelStart.end, end: self.now()})\n      )\n    )\n    effects.enter(types.labelEnd)\n    effects.enter(types.labelMarker)\n    effects.consume(code)\n    effects.exit(types.labelMarker)\n    effects.exit(types.labelEnd)\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === codes.leftParenthesis) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === codes.leftSquareBracket) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    assert(code === codes.leftParenthesis, 'expected left paren')\n    effects.enter(types.resource)\n    effects.enter(types.resourceMarker)\n    effects.consume(code)\n    effects.exit(types.resourceMarker)\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === codes.rightParenthesis) {\n      return resourceEnd(code)\n    }\n\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      types.resourceDestination,\n      types.resourceDestinationLiteral,\n      types.resourceDestinationLiteralMarker,\n      types.resourceDestinationRaw,\n      types.resourceDestinationString,\n      constants.linkResourceDestinationBalanceMax\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.leftParenthesis\n    ) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        types.resourceTitle,\n        types.resourceTitleMarker,\n        types.resourceTitleString\n      )(code)\n    }\n\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === codes.rightParenthesis) {\n      effects.enter(types.resourceMarker)\n      effects.consume(code)\n      effects.exit(types.resourceMarker)\n      effects.exit(types.resource)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      types.reference,\n      types.referenceMarker,\n      types.referenceString\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\n    effects.enter(types.reference)\n    effects.enter(types.referenceMarker)\n    effects.consume(code)\n    effects.exit(types.referenceMarker)\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter(types.referenceMarker)\n      effects.consume(code)\n      effects.exit(types.referenceMarker)\n      effects.exit(types.reference)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {codes, types} from 'micromark-util-symbol'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.exclamationMark, 'expected `!`')\n    effects.enter(types.labelImage)\n    effects.enter(types.labelImageMarker)\n    effects.consume(code)\n    effects.exit(types.labelImageMarker)\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === codes.leftSquareBracket) {\n      effects.enter(types.labelMarker)\n      effects.consume(code)\n      effects.exit(types.labelMarker)\n      effects.exit(types.labelImage)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {codes, types} from 'micromark-util-symbol'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(types.labelLink)\n    effects.enter(types.labelMarker)\n    effects.consume(code)\n    effects.exit(types.labelMarker)\n    effects.exit(types.labelLink)\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const lineEnding = {name: 'lineEnding', tokenize: tokenizeLineEnding}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, ok, types.linePrefix)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(types.thematicBreak)\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    assert(\n      code === codes.asterisk ||\n        code === codes.dash ||\n        code === codes.underscore,\n      'expected `*`, `-`, or `_`'\n    )\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence)\n      return sequence(code)\n    }\n\n    if (\n      size >= constants.thematicBreakMarkerCountMin &&\n      (code === codes.eof || markdownLineEnding(code))\n    ) {\n      effects.exit(types.thematicBreak)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit(types.thematicBreakSequence)\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, types.whitespace)(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {tokenize: tokenizeListContinuation},\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n}\n\n/** @type {Construct} */\nconst indentConstruct = {partial: true, tokenize: tokenizeIndent}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === types.linePrefix\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(self.containerState, 'expected state')\n    const kind =\n      self.containerState.type ||\n      (code === codes.asterisk || code === codes.plusSign || code === codes.dash\n        ? types.listUnordered\n        : types.listOrdered)\n\n    if (\n      kind === types.listUnordered\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {_container: true})\n      }\n\n      if (kind === types.listUnordered) {\n        effects.enter(types.listItemPrefix)\n        return code === codes.asterisk || code === codes.dash\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === codes.digit1) {\n        effects.enter(types.listItemPrefix)\n        effects.enter(types.listItemValue)\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    assert(self.containerState, 'expected state')\n    if (asciiDigit(code) && ++size < constants.listItemValueSizeMax) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === codes.rightParenthesis || code === codes.dot)\n    ) {\n      effects.exit(types.listItemValue)\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    assert(self.containerState, 'expected state')\n    assert(code !== codes.eof, 'eof (`null`) is not a marker')\n    effects.enter(types.listItemMarker)\n    effects.consume(code)\n    effects.exit(types.listItemMarker)\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    assert(self.containerState, 'expected state')\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.listItemPrefixWhitespace)\n      effects.consume(code)\n      effects.exit(types.listItemPrefixWhitespace)\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    assert(self.containerState, 'expected state')\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit(types.listItemPrefix), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n\n  assert(self.containerState, 'expected state')\n  self.containerState._closeFlow = undefined\n\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    assert(self.containerState, 'expected state')\n    assert(typeof self.containerState.size === 'number', 'expected size')\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      types.listItemIndent,\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    assert(self.containerState, 'expected state')\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    assert(self.containerState, 'expected state')\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n    assert(\n      self.parser.constructs.disable.null,\n      'expected `disable.null` to be populated'\n    )\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      types.linePrefix,\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : constants.tabSize\n    )(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n\n  assert(self.containerState, 'expected state')\n  assert(typeof self.containerState.size === 'number', 'expected size')\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    types.listItemIndent,\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    assert(self.containerState, 'expected state')\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.listItemIndent &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  assert(this.containerState, 'expected state')\n  assert(typeof this.containerState.type === 'string', 'expected type')\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n  assert(\n    self.parser.constructs.disable.null,\n    'expected `disable.null` to be populated'\n  )\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    types.listItemPrefixWhitespace,\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === types.listItemPrefixWhitespace\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === types.content) {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === types.paragraph) {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === types.content) {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === types.definition) {\n        definition = index\n      }\n    }\n  }\n\n  assert(text !== undefined, 'expected a `text` index to be found')\n  assert(content !== undefined, 'expected a `text` index to be found')\n  assert(events[content][2] === context, 'enter context should be same')\n  assert(\n    events[events.length - 1][2] === context,\n    'enter context should be same'\n  )\n  const heading = {\n    type: types.setextHeading,\n    start: {...events[content][1].start},\n    end: {...events[events.length - 1][1].end}\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = types.setextHeadingText\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = {...events[definition][1].end}\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n\n    assert(\n      code === codes.dash || code === codes.equalsTo,\n      'expected `=` or `-`'\n    )\n\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== types.lineEnding &&\n        self.events[index][1].type !== types.linePrefix &&\n        self.events[index][1].type !== types.content\n      ) {\n        paragraph = self.events[index][1].type === types.paragraph\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(types.setextHeadingLine)\n      marker = code\n      return before(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(types.setextHeadingLineSequence)\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n\n    effects.exit(types.setextHeadingLineSequence)\n\n    return markdownSpace(code)\n      ? factorySpace(effects, after, types.lineSuffix)(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.setextHeadingLine)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {InitialConstruct} */\nexport const flow = {tokenize: initializeFlow}\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        types.linePrefix\n      )\n    )\n  )\n\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEndingBlank)\n    effects.consume(code)\n    effects.exit(types.lineEndingBlank)\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\nexport const resolver = {resolveAll: createResolver()}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    ),\n    tokenize: initializeText\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === codes.eof) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter(types.data)\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(types.data)\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === codes.eof) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        // Always populated by defaults.\n        assert(Array.isArray(list), 'expected `disable.null` to be populated')\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === types.data) {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== types.data) {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === types.lineEnding) &&\n      events[eventIndex - 1][1].type === types.data\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === codes.horizontalTab) {\n          tabs = true\n          size++\n        } else if (chunk === codes.virtualSpace) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length ||\n            tabs ||\n            size < constants.hardBreakPrefixSizeMin\n              ? types.lineSuffix\n              : types.hardBreakTrailing,\n          start: {\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {...data.end}\n        }\n\n        data.end = {...token.start}\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {codes} from 'micromark-util-symbol'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [codes.asterisk]: list,\n  [codes.plusSign]: list,\n  [codes.dash]: list,\n  [codes.digit0]: list,\n  [codes.digit1]: list,\n  [codes.digit2]: list,\n  [codes.digit3]: list,\n  [codes.digit4]: list,\n  [codes.digit5]: list,\n  [codes.digit6]: list,\n  [codes.digit7]: list,\n  [codes.digit8]: list,\n  [codes.digit9]: list,\n  [codes.greaterThan]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [codes.leftSquareBracket]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [codes.horizontalTab]: codeIndented,\n  [codes.virtualSpace]: codeIndented,\n  [codes.space]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [codes.numberSign]: headingAtx,\n  [codes.asterisk]: thematicBreak,\n  [codes.dash]: [setextUnderline, thematicBreak],\n  [codes.lessThan]: htmlFlow,\n  [codes.equalsTo]: setextUnderline,\n  [codes.underscore]: thematicBreak,\n  [codes.graveAccent]: codeFenced,\n  [codes.tilde]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [codes.ampersand]: characterReference,\n  [codes.backslash]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [codes.carriageReturn]: lineEnding,\n  [codes.lineFeed]: lineEnding,\n  [codes.carriageReturnLineFeed]: lineEnding,\n  [codes.exclamationMark]: labelStartImage,\n  [codes.ampersand]: characterReference,\n  [codes.asterisk]: attention,\n  [codes.lessThan]: [autolink, htmlText],\n  [codes.leftSquareBracket]: labelStartLink,\n  [codes.backslash]: [hardBreakEscape, characterEscape],\n  [codes.rightSquareBracket]: labelEnd,\n  [codes.underscore]: attention,\n  [codes.graveAccent]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {null: [attention, resolveText]}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {null: [codes.asterisk, codes.underscore]}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {null: []}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\n\t\t\t.trim()\n\t\t\t.replace(/\\s+/g, ',')\n\t\t\t.split(',')\n\t\t\t.filter(Boolean);\n\n\t\tfor (const ns of split) {\n\t\t\tif (ns[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(ns);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given string matches a namespace template, honoring\n\t * asterisks as wildcards.\n\t *\n\t * @param {String} search\n\t * @param {String} template\n\t * @return {Boolean}\n\t */\n\tfunction matchesTemplate(search, template) {\n\t\tlet searchIndex = 0;\n\t\tlet templateIndex = 0;\n\t\tlet starIndex = -1;\n\t\tlet matchIndex = 0;\n\n\t\twhile (searchIndex < search.length) {\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\n\t\t\t\t// Match character or proceed with wildcard\n\t\t\t\tif (template[templateIndex] === '*') {\n\t\t\t\t\tstarIndex = templateIndex;\n\t\t\t\t\tmatchIndex = searchIndex;\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\n\t\t\t\t} else {\n\t\t\t\t\tsearchIndex++;\n\t\t\t\t\ttemplateIndex++;\n\t\t\t\t}\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\n\t\t\t\ttemplateIndex = starIndex + 1;\n\t\t\t\tmatchIndex++;\n\t\t\t\tsearchIndex = matchIndex;\n\t\t\t} else {\n\t\t\t\treturn false; // No match\n\t\t\t}\n\t\t}\n\n\t\t// Handle trailing '*' in template\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\n\t\t\ttemplateIndex++;\n\t\t}\n\n\t\treturn templateIndex === template.length;\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names,\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tfor (const skip of createDebug.skips) {\n\t\t\tif (matchesTemplate(name, skip)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const ns of createDebug.names) {\n\t\t\tif (matchesTemplate(name, ns)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\t// eslint-disable-next-line no-return-assign\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport createDebug from 'debug'\nimport {ok as assert} from 'devlop'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes, values} from 'micromark-util-symbol'\n\nconst debug = createDebug('micromark')\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: (from && from.line) || 1,\n    column: (from && from.column) || 1,\n    offset: (from && from.offset) || 0\n  }\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {interrupt: true})\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: codes.eof,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: codes.eof,\n    sliceSerialize,\n    sliceStream,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== codes.eof) {\n      return []\n    }\n\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {_bufferIndex, _index, line, column, offset} = point\n    return {_bufferIndex, _index, line, column, offset}\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n    debug('position: define skip: `%j`', point)\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    assert(consumed === true, 'expected character to be consumed')\n    consumed = undefined\n    debug('main: passing `%s` to %s', code, state && state.name)\n    expectedCode = code\n    assert(typeof state === 'function', 'expected state')\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    assert(code === expectedCode, 'expected given code to equal expected code')\n\n    debug('consume: `%s`', code)\n\n    assert(\n      consumed === undefined,\n      'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used'\n    )\n    assert(\n      code === null\n        ? context.events.length === 0 ||\n            context.events[context.events.length - 1][0] === 'exit'\n        : context.events[context.events.length - 1][0] === 'enter',\n      'expected last token to be open'\n    )\n\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === codes.carriageReturnLineFeed ? 2 : 1\n      accountForPotentialSkip()\n      debug('position: after eol: `%j`', point)\n    } else if (code !== codes.virtualSpace) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      if (\n        point._bufferIndex ===\n        // Points w/ non-negative `_bufferIndex` reference\n        // strings.\n        /** @type {string} */ (chunks[point._index]).length\n      ) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n\n    assert(typeof type === 'string', 'expected string type')\n    assert(type.length > 0, 'expected non-empty string')\n    debug('enter: `%s`', type)\n\n    context.events.push(['enter', token, context])\n\n    stack.push(token)\n\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    assert(typeof type === 'string', 'expected string type')\n    assert(type.length > 0, 'expected non-empty string')\n\n    const token = stack.pop()\n    assert(token, 'cannot close w/o open tokens')\n    token.end = now()\n\n    assert(type === token.type, 'expected exit token to match current token')\n\n    assert(\n      !(\n        token.start._index === token.end._index &&\n        token.start._bufferIndex === token.end._bufferIndex\n      ),\n      'expected non-empty token (`' + type + '`)'\n    )\n\n    debug('exit: `%s`', token.type)\n    context.events.push(['exit', token, context])\n\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n          ? // Looks like a construct.\n            handleListOfConstructs([/** @type {Construct} */ (constructs)])\n          : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(left) ? left : left ? [left] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          assert(bogusState, 'expected `bogusState` to be given')\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n          assert(\n            context.parser.constructs.disable.null,\n            'expected `disable.null` to be populated'\n          )\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        assert(code === expectedCode, 'expected code')\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        assert(code === expectedCode, 'expected code')\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n\n    assert(\n      construct.partial ||\n        context.events.length === 0 ||\n        context.events[context.events.length - 1][0] === 'exit',\n      'expected last token to end'\n    )\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n\n    return {from: startEventsIndex, restore}\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n      debug('position: restore: `%j`', point)\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n\n  if (startIndex === endIndex) {\n    assert(endBufferIndex > -1, 'expected non-negative end buffer index')\n    assert(startBufferIndex > -1, 'expected non-negative start buffer index')\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        assert(startBufferIndex === 0, 'expected `startBufferIndex` to be `0`')\n        view.shift()\n      }\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case codes.carriageReturn: {\n          value = values.cr\n\n          break\n        }\n\n        case codes.lineFeed: {\n          value = values.lf\n\n          break\n        }\n\n        case codes.carriageReturnLineFeed: {\n          value = values.cr + values.lf\n\n          break\n        }\n\n        case codes.horizontalTab: {\n          value = expandTabs ? values.space : values.ht\n\n          break\n        }\n\n        case codes.virtualSpace: {\n          if (!expandTabs && atTab) continue\n          value = values.space\n\n          break\n        }\n\n        default: {\n          assert(typeof chunk === 'number', 'expected number')\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === codes.horizontalTab\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport * as defaultConstructs from './constructs.js'\nimport {createTokenizer} from './create-tokenizer.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs = /** @type {FullNormalizedExtension} */ (\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n  )\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  }\n\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nimport {codes, constants} from 'micromark-util-symbol'\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === codes.byteOrderMarker) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (\n        code === codes.lf &&\n        startPosition === endPosition &&\n        atCarriageReturn\n      ) {\n        chunks.push(codes.carriageReturnLineFeed)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(codes.carriageReturn)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case codes.nul: {\n            chunks.push(codes.replacementCharacter)\n            column++\n\n            break\n          }\n\n          case codes.ht: {\n            next = Math.ceil(column / constants.tabSize) * constants.tabSize\n            chunks.push(codes.horizontalTab)\n            while (column++ < next) chunks.push(codes.virtualSpace)\n\n            break\n          }\n\n          case codes.lf: {\n            chunks.push(codes.lineFeed)\n            column = 1\n\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(codes.carriageReturn)\n      if (buffer) chunks.push(buffer)\n      chunks.push(codes.eof)\n    }\n\n    return chunks\n  }\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {codes, constants} from 'micromark-util-symbol'\n\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n\n  if (head === codes.numberSign) {\n    const head = $2.charCodeAt(1)\n    const hex = head === codes.lowercaseX || head === codes.uppercaseX\n    return decodeNumericCharacterReference(\n      $2.slice(hex ? 2 : 1),\n      hex ? constants.numericBaseHexadecimal : constants.numericBaseDecimal\n    )\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport {ok as assert} from 'devlop'\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {codes, constants, types} from 'micromark-util-symbol'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n\n  return compiler(options)(\n    postprocess(\n      parse(options)\n        .document()\n        .write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {type: 'root', children: []}\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === types.listOrdered ||\n        events[index][1].type === types.listUnordered\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          assert(typeof tail === 'number', 'expected list ot be open')\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {sliceSerialize: events[index][2].sliceSerialize},\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0 ? events[0][1].start : {line: 1, column: 1, offset: 0}\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {line: 1, column: 1, offset: 0}\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      switch (event[1].type) {\n        case types.listUnordered:\n        case types.listOrdered:\n        case types.blockQuote: {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n\n          atMarker = undefined\n\n          break\n        }\n\n        case types.lineEndingBlank: {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n\n            atMarker = undefined\n          }\n\n          break\n        }\n\n        case types.linePrefix:\n        case types.listItemValue:\n        case types.listItemMarker:\n        case types.listItemPrefix:\n        case types.listItemPrefixWhitespace: {\n          // Empty.\n\n          break\n        }\n\n        default: {\n          atMarker = undefined\n        }\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === types.listItemPrefix) ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === types.listUnordered ||\n            event[1].type === types.listOrdered))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === types.lineEnding ||\n              tailEvent[1].type === types.lineEndingBlank\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = types.lineEndingBlank\n                listSpread = true\n              }\n\n              tailEvent[1].type = types.lineEnding\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === types.linePrefix ||\n              tailEvent[1].type === types.blockQuotePrefix ||\n              tailEvent[1].type === types.blockQuotePrefixWhitespace ||\n              tailEvent[1].type === types.blockQuoteMarker ||\n              tailEvent[1].type === types.listItemIndent\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === types.listItemPrefix) {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({type: 'fragment', children: []})\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    assert(parent, 'expected `parent`')\n    assert('children' in parent, 'expected `parent`')\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler || undefined])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    assert(node, 'expected `node`')\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({start: token.start, end: token.end}) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    assert(node.type !== 'fragment', 'unexpected fragment `exit`ed')\n    assert(node.position, 'expected `position` to be defined')\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      assert(ancestor, 'expected nodes on stack')\n      assert(ancestor.type === 'list', 'expected list on stack')\n      ancestor.start = Number.parseInt(\n        this.sliceSerialize(token),\n        constants.numericBaseDecimal\n      )\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'code', 'expected code on stack')\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'code', 'expected code on stack')\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'code', 'expected code on stack')\n\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'code', 'expected code on stack')\n\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'definition', 'expected definition on stack')\n\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'definition', 'expected definition on stack')\n\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'definition', 'expected definition on stack')\n\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'heading', 'expected heading on stack')\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n\n      assert(\n        depth === 1 ||\n          depth === 2 ||\n          depth === 3 ||\n          depth === 4 ||\n          depth === 5 ||\n          depth === 6,\n        'expected `depth` between `1` and `6`'\n      )\n\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'heading', 'expected heading on stack')\n\n    node.depth =\n      this.sliceSerialize(token).codePointAt(0) === codes.equalsTo ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert('children' in node, 'expected parent on stack')\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n\n    let tail = siblings[siblings.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    assert(tail, 'expected a `node` to be on the stack')\n    assert('value' in tail, 'expected a `literal` to be on the stack')\n    assert(tail.position, 'expected `node` to have an open position')\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    assert(context, 'expected `node`')\n\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      assert('children' in context, 'expected `parent`')\n      const tail = context.children[context.children.length - 1]\n      assert(tail.position, 'expected tail to have a starting position')\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'html', 'expected html on stack')\n\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'html', 'expected html on stack')\n\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'inlineCode', 'expected inline code on stack')\n\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'link', 'expected link on stack')\n\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'image', 'expected image on stack')\n\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    assert(ancestor, 'expected ancestor on stack')\n    assert(\n      ancestor.type === 'image' || ancestor.type === 'link',\n      'expected image or link on stack'\n    )\n\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    assert(fragment, 'expected node on stack')\n    assert(fragment.type === 'fragment', 'expected fragment on stack')\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(\n      node.type === 'image' || node.type === 'link',\n      'expected image or link on stack'\n    )\n\n    // Assume a reference.\n    this.data.inReference = true\n\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(\n      node.type === 'image' || node.type === 'link',\n      'expected image or link on stack'\n    )\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(\n      node.type === 'image' || node.type === 'link',\n      'expected image or link on stack'\n    )\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(\n      node.type === 'image' || node.type === 'link',\n      'expected image reference or link reference on stack'\n    )\n\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    assert(\n      token.type === 'characterReferenceMarkerNumeric' ||\n        token.type === 'characterReferenceMarkerHexadecimal'\n    )\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === types.characterReferenceMarkerNumeric\n          ? constants.numericBaseDecimal\n          : constants.numericBaseHexadecimal\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      assert(result !== false, 'expected reference to decode')\n      value = result\n    }\n\n    const tail = this.stack[this.stack.length - 1]\n    assert(tail, 'expected `node`')\n    assert('value' in tail, 'expected `node.value`')\n    tail.value += value\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop()\n    assert(tail, 'expected `node`')\n    assert(tail.position, 'expected `node.position`')\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'link', 'expected link on stack')\n\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'link', 'expected link on stack')\n\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {type: 'blockquote', children: []}\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {type: 'code', lang: null, meta: null, value: ''}\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {type: 'inlineCode', value: ''}\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {type: 'emphasis', children: []}\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {type: 'break'}\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {type: 'html', value: ''}\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {type: 'image', title: null, url: '', alt: null}\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {type: 'link', title: null, url: '', children: []}\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {type: 'paragraph', children: []}\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {type: 'strong', children: []}\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {type: 'text', value: ''}\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {type: 'thematicBreak'}\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {line: d.line, column: d.column, offset: d.offset}\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n\n          break\n        }\n\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n\n          break\n        }\n\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({start: left.start, end: left.end}) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({start: right.start, end: right.end}) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({start: right.start, end: right.end}) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/**\n * Turn normal line endings into hard breaks.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @returns {undefined}\n *   Nothing.\n */\nexport function newlineToBreak(tree) {\n  findAndReplace(tree, [/\\r?\\n|\\r/g, replace])\n}\n\n/**\n * Replace line endings.\n *\n * @type {ReplaceFunction}\n */\nfunction replace() {\n  return {type: 'break'}\n}\n","/**\n * @typedef {import('mdast').Root} Root\n */\n\nimport {newlineToBreak} from 'mdast-util-newline-to-break'\n\n/**\n * Support hard breaks without needing spaces or escapes (turns enters into\n * `<br>`s).\n *\n * @returns\n *   Transform.\n */\nexport default function remarkBreaks() {\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    newlineToBreak(tree)\n  }\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n */\n\nimport {visit} from 'unist-util-visit'\n\n/**\n * Remove empty paragraphs in `tree`.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @returns {undefined}\n *   Nothing.\n */\nexport function squeezeParagraphs(tree) {\n  visit(tree, function (node, index, parent) {\n    if (\n      index !== undefined &&\n      parent &&\n      node.type === 'paragraph' &&\n      node.children.every(function (child) {\n        return child.type === 'text' && /^\\s*$/.test(child.value)\n      })\n    ) {\n      parent.children.splice(index, 1)\n      return index\n    }\n  })\n}\n","/**\n * SPDX-FileCopyrightText: 2025 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: MIT\n */\n\n/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n */\n\nimport {squeezeParagraphs} from 'mdast-squeeze-paragraphs'\nimport {visit} from 'unist-util-visit'\n\n/**\n * Only keep links with the given protocols.\n *\n * @param {object} options Options\n * @param {string[]} options.except - Protocols to exclude. Defauls to `['http', 'https']`.\n * @returns\n *   Transform.\n */\nexport default function remarkUnlinkProtocols(\n  options = {except: ['http', 'https']}\n) {\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    /** @type {Map<string, string>} */\n    const definitions = new Map()\n\n    // Find definitions to look up linkReferences.\n    visit(tree, 'definition', function (node, index, parent) {\n      definitions.set(node.identifier, node.url)\n      if (parent && typeof index === 'number') {\n        const url = node.url\n        if (\n          url &&\n          url.includes(':') &&\n          !options.except.some((proto) => url.startsWith(`${proto}:`))\n        ) {\n          parent.children.splice(index, 1)\n          return index\n        }\n      }\n    })\n\n    visit(tree, function (node, index, parent) {\n      if (\n        parent &&\n        typeof index === 'number' &&\n        (node.type === 'link' || node.type === 'linkReference')\n      ) {\n        const url =\n          node.type === 'link' ? node.url : definitions.get(node.identifier)\n        if (\n          url &&\n          url.includes(':') &&\n          !options.except.some((proto) => url.startsWith(`${proto}:`))\n        ) {\n          parent.children.splice(index, 1, ...node.children)\n          return index\n        }\n      }\n    })\n\n    squeezeParagraphs(tree)\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\nvar utilities_1 = require(\"./utilities\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== 'string') {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function (property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS;\n//# sourceMappingURL=index.js.map","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Options} Options\n * @typedef {import('unified').Compiler<Root, JSX.Element>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, JSX.Element>} Processor\n */\n\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\n\n/**\n * Turn HTML into preact, react, solid, svelte, vue, etc.\n *\n * @param {Options} options\n *   Configuration (required).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function rehypeReact(options) {\n  // @ts-expect-error: TypeScript doesn’t handle `this` well.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n\n  self.compiler = compiler\n\n  /** @type {Compiler} */\n  function compiler(tree, file) {\n    return toJsxRuntime(tree, {filePath: file.path, ...options})\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is an element.\n * @param {unknown} this\n *   Context object (`this`) to call `test` with\n * @param {unknown} [element]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | null | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean}\n *   Whether this is an element and passes a test.\n *\n * @typedef {Array<TestFunction | string> | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary element.\n *\n *   * when `string`, checks that the element has that tag name\n *   * when `function`, see `TestFunction`\n *   * when `Array`, checks if one of the subtests pass\n *\n * @callback TestFunction\n *   Check if an element passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Element} element\n *   An element.\n * @param {number | undefined} [index]\n *   Position of `element` in its parent.\n * @param {Parents | undefined} [parent]\n *   Parent of `element`.\n * @returns {boolean | undefined | void}\n *   Whether this element passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `element` is an `Element` and whether it passes the given test.\n *\n * @param element\n *   Thing to check, typically `element`.\n * @param test\n *   Check for a specific element.\n * @param index\n *   Position of `element` in its parent.\n * @param parent\n *   Parent of `element`.\n * @param context\n *   Context object (`this`) to call `test` with.\n * @returns\n *   Whether `element` is an `Element` and passes a test.\n * @throws\n *   When an incorrect `test`, `index`, or `parent` is given; there is no error\n *   thrown when `element` is not a node or not an element.\n */\nexport const isElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(element: unknown, test: Condition, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((element?: null | undefined) => false) &\n   *   ((element: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((element: unknown, test?: Test, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [element]\n     * @param {Test | undefined} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parents | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (element, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== null &&\n        index !== undefined &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite `index`')\n      }\n\n      if (\n        parent !== null &&\n        parent !== undefined &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected valid `parent`')\n      }\n\n      if (\n        (index === null || index === undefined) !==\n        (parent === null || parent === undefined)\n      ) {\n        throw new Error('Expected both `index` and `parent`')\n      }\n\n      return looksLikeAnElement(element)\n        ? check.call(context, element, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate a check from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * an `element`, `index`, and `parent`.\n *\n * @param test\n *   A test for a specific element.\n * @returns\n *   A check.\n */\nexport const convertElement =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &\n   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &\n   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test | null | undefined} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      // Assume array.\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as `test`')\n    }\n  )\n\n/**\n * Handle multiple tests.\n *\n * @param {Array<TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn a string into a test for an element with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction tagNameFactory(check) {\n  return castFactory(tagName)\n\n  /**\n   * @param {Element} element\n   * @returns {boolean}\n   */\n  function tagName(element) {\n    return element.tagName === check\n  }\n}\n\n/**\n * Turn a custom test into a test for an element that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeAnElement(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\n/**\n * Make sure something is an element.\n *\n * @param {unknown} element\n * @returns {element is Element}\n */\nfunction element(element) {\n  return Boolean(\n    element &&\n      typeof element === 'object' &&\n      'type' in element &&\n      element.type === 'element' &&\n      'tagName' in element &&\n      typeof element.tagName === 'string'\n  )\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Element}\n */\nfunction looksLikeAnElement(value) {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    'type' in value &&\n    'tagName' in value\n  )\n}\n","// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/;\n\n// Windows paths like `c:\\`\nconst WINDOWS_PATH_REGEX = /^[a-zA-Z]:\\\\/;\n\nexport default function isAbsoluteUrl(url) {\n\tif (typeof url !== 'string') {\n\t\tthrow new TypeError(`Expected a \\`string\\`, got \\`${typeof url}\\``);\n\t}\n\n\tif (WINDOWS_PATH_REGEX.test(url)) {\n\t\treturn false;\n\t}\n\n\treturn ABSOLUTE_URL_REGEX.test(url);\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-is-element').Test} Test\n */\n\n/**\n * @callback CreateContent\n *   Create a target for the element.\n * @param {Element} element\n *   Element to check.\n * @returns {Array<ElementContent> | ElementContent | null | undefined}\n *   Content to add.\n *\n * @callback CreateProperties\n *   Create properties for an element.\n * @param {Element} element\n *   Element to check.\n * @returns {Properties | null | undefined}\n *   Properties to add.\n *\n * @callback CreateRel\n *   Create a `rel` for the element.\n * @param {Element} element\n *   Element to check.\n * @returns {Array<string> | string | null | undefined}\n *   `rel` to use.\n *\n * @callback CreateTarget\n *   Create a `target` for the element.\n * @param {Element} element\n *   Element to check.\n * @returns {Target | null | undefined}\n *   `target` to use.\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<ElementContent> | CreateContent | ElementContent | null | undefined} [content]\n *   Content to insert at the end of external links (optional); will be\n *   inserted in a `<span>` element; useful for improving accessibility by\n *   giving users advanced warning when opening a new window.\n * @property {CreateProperties | Properties | null | undefined} [contentProperties]\n *   Properties to add to the `span` wrapping `content` (optional).\n * @property {CreateProperties | Properties | null | undefined} [properties]\n *   Properties to add to the link itself (optional).\n * @property {Array<string> | null | undefined} [protocols=['http', 'https']]\n *   Protocols to check, such as `mailto` or `tel` (default: `['http',\n *   'https']`).\n * @property {Array<string> | CreateRel | string | null | undefined} [rel=['nofollow']]\n *   Link types to hint about the referenced documents (default:\n *   `['nofollow']`); pass an empty array (`[]`) to not set `rel`s on links;\n *   when using a `target`, add `noopener` and `noreferrer` to avoid\n *   exploitation of the `window.opener` API.\n * @property {CreateTarget | Target | null | undefined} [target]\n *   How to display referenced documents; the default (nothing) is to not set\n *   `target`s on links.\n * @property {Test | null | undefined} [test]\n *   Extra test to define which external link elements are modified (optional);\n *   any test that can be given to `hast-util-is-element` is supported.\n *\n * @typedef {'_blank' | '_parent' | '_self' | '_top'} Target\n *   Target.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {convertElement} from 'hast-util-is-element'\nimport isAbsoluteUrl from 'is-absolute-url'\nimport {parse} from 'space-separated-tokens'\nimport {visit} from 'unist-util-visit'\n\nconst defaultProtocols = ['http', 'https']\nconst defaultRel = ['nofollow']\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Automatically add `rel` (and `target`?) to external links.\n *\n * ###### Notes\n *\n * You should [likely not configure `target`][css-tricks].\n *\n * You should at least set `rel` to `['nofollow']`.\n * When using a `target`, add `noopener` and `noreferrer` to avoid exploitation\n * of the `window.opener` API.\n *\n * When using a `target`, you should set `content` to adhere to accessibility\n * guidelines by giving users advanced warning when opening a new window.\n *\n * [css-tricks]: https://css-tricks.com/use-target_blank/\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeExternalLinks(options) {\n  const settings = options || emptyOptions\n  const protocols = settings.protocols || defaultProtocols\n  const is = convertElement(settings.test)\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, 'element', function (node, index, parent) {\n      if (\n        node.tagName === 'a' &&\n        typeof node.properties.href === 'string' &&\n        is(node, index, parent)\n      ) {\n        const url = node.properties.href\n\n        if (\n          isAbsoluteUrl(url)\n            ? protocols.includes(url.slice(0, url.indexOf(':')))\n            : url.startsWith('//')\n        ) {\n          const contentRaw = createIfNeeded(settings.content, node)\n          const content =\n            contentRaw && !Array.isArray(contentRaw) ? [contentRaw] : contentRaw\n          const relRaw = createIfNeeded(settings.rel, node) || defaultRel\n          const rel = typeof relRaw === 'string' ? parse(relRaw) : relRaw\n          const target = createIfNeeded(settings.target, node)\n\n          const properties = createIfNeeded(settings.properties, node)\n\n          if (properties) {\n            Object.assign(node.properties, structuredClone(properties))\n          }\n\n          if (rel.length > 0) {\n            node.properties.rel = [...rel]\n          }\n\n          if (target) {\n            node.properties.target = target\n          }\n\n          if (content) {\n            const properties =\n              createIfNeeded(settings.contentProperties, node) || {}\n\n            node.children.push({\n              type: 'element',\n              tagName: 'span',\n              properties: structuredClone(properties),\n              children: structuredClone(content)\n            })\n          }\n        }\n      }\n    })\n  }\n}\n\n/**\n * Call a function to get a return value or use the value.\n *\n * @template T\n *   Type of value.\n * @param {T} value\n *   Value.\n * @param {Element} element\n *   Element.\n * @returns {T extends Function ? ReturnType<T> : T}\n *   Result.\n */\nfunction createIfNeeded(value, element) {\n  return typeof value === 'function' ? value(element) : value\n}\n","import { l as logger } from \"./logger-D3RVzcfQ.mjs\";\nwindow._vue_richtext_widgets ??= {};\nwindow._registerWidget ??= (id, callback, onDestroy, props) => {\n  registerWidget(id, callback, onDestroy, props);\n};\nfunction registerWidget(id, callback, onDestroy = () => {\n}, props) {\n  const propsWithDefaults = {\n    hasInteractiveView: true,\n    fullWidth: false,\n    ...props\n  };\n  if (window._vue_richtext_widgets[id]) {\n    logger.error(`[ReferencePicker]: Widget for id ${id} already registered`);\n    return;\n  }\n  window._vue_richtext_widgets[id] = {\n    id,\n    callback,\n    onDestroy,\n    ...propsWithDefaults\n  };\n}\nfunction renderWidget(el, options) {\n  const { richObjectType, richObject, accessible, interactive } = options;\n  if (richObjectType === \"open-graph\") {\n    return;\n  }\n  if (!window._vue_richtext_widgets[richObjectType]) {\n    console.error(\"Widget for rich object type \" + richObjectType + \" not registered\");\n    return;\n  }\n  window._vue_richtext_widgets[richObjectType].callback(el, { richObjectType, richObject, accessible, interactive });\n}\nfunction destroyWidget(richObjectType, el) {\n  if (richObjectType === \"open-graph\") {\n    return;\n  }\n  if (!window._vue_richtext_widgets[richObjectType]) {\n    return;\n  }\n  window._vue_richtext_widgets[richObjectType].onDestroy(el);\n}\nfunction isWidgetRegistered(id) {\n  return !!window._vue_richtext_widgets[id];\n}\nfunction hasInteractiveView(id) {\n  return !!window._vue_richtext_widgets[id]?.hasInteractiveView;\n}\nfunction hasFullWidth(id) {\n  return !!window._vue_richtext_widgets[id]?.fullWidth;\n}\nwindow._vue_richtext_custom_picker_elements ??= {};\nwindow._registerCustomPickerElement ??= registerCustomPickerElement;\nclass NcCustomPickerRenderResult {\n  element;\n  object;\n  /**\n   * @param element - The HTML element\n   * @param object - The object\n   */\n  constructor(element, object) {\n    this.element = element;\n    this.object = object;\n  }\n}\nfunction isCustomPickerElementRegistered(id) {\n  return !!window._vue_richtext_custom_picker_elements[id];\n}\nfunction getCustomPickerElementSize(id) {\n  const size = window._vue_richtext_custom_picker_elements[id]?.size;\n  if (size && [\"small\", \"normal\", \"large\", \"full\"].includes(size)) {\n    return size;\n  }\n  return null;\n}\nfunction registerCustomPickerElement(id, callback, onDestroy = () => {\n}, size = \"large\") {\n  if (window._vue_richtext_custom_picker_elements[id]) {\n    logger.error(`Custom reference picker element for id ${id} already registered`);\n    return;\n  }\n  window._vue_richtext_custom_picker_elements[id] = {\n    id,\n    callback,\n    onDestroy,\n    size\n  };\n}\nfunction renderCustomPickerElement(el, options) {\n  const { providerId, accessible } = options;\n  if (!window._vue_richtext_custom_picker_elements[providerId]) {\n    logger.error(`Custom reference picker element for reference provider ID ${providerId} not registered`);\n    return;\n  }\n  return window._vue_richtext_custom_picker_elements[providerId].callback(el, { providerId, accessible });\n}\nfunction destroyCustomPickerElement(providerId, el, renderResult) {\n  if (!window._vue_richtext_custom_picker_elements[providerId]) {\n    return;\n  }\n  window._vue_richtext_custom_picker_elements[providerId].onDestroy(el, renderResult);\n}\nexport {\n  NcCustomPickerRenderResult as N,\n  renderWidget as a,\n  registerCustomPickerElement as b,\n  renderCustomPickerElement as c,\n  destroyWidget as d,\n  destroyCustomPickerElement as e,\n  isCustomPickerElementRegistered as f,\n  getCustomPickerElementSize as g,\n  hasInteractiveView as h,\n  isWidgetRegistered as i,\n  hasFullWidth as j,\n  registerWidget as r\n};\n//# sourceMappingURL=customPickerElements-BmkXSNdO.mjs.map\n","import '../assets/referencePickerModal-D80hwmre.css';\nimport { c as renderCustomPickerElement, e as destroyCustomPickerElement, f as isCustomPickerElementRegistered, d as destroyWidget, a as renderWidget, i as isWidgetRegistered, h as hasInteractiveView, j as hasFullWidth, g as getCustomPickerElementSize } from \"./customPickerElements-BmkXSNdO.mjs\";\nimport { createElementBlock, openBlock, mergeProps, createElementVNode, createCommentVNode, toDisplayString, resolveComponent, createVNode, withCtx, ref, nextTick, normalizeClass, createBlock, resolveDynamicComponent, normalizeStyle, createTextVNode, withKeys, withModifiers, createApp } from \"vue\";\nimport { _ as _export_sfc } from \"./_plugin-vue_export-helper-1tPrXgE0.mjs\";\nimport { r as register, F as t7, a as t, G as t42, H as t38, I as t22, J as t23, k as t40, K as t30, p as t18, L as t11 } from \"./_l10n-ZllQPIu_.mjs\";\nimport axios from \"@nextcloud/axios\";\nimport { loadState } from \"@nextcloud/initial-state\";\nimport { imagePath, generateOcsUrl } from \"@nextcloud/router\";\nimport { l as logger } from \"./logger-D3RVzcfQ.mjs\";\nimport { N as NcEmptyContent } from \"./NcEmptyContent-BdOezubv.mjs\";\nimport { _ as _sfc_main$a } from \"./NcHighlight.vue_vue_type_script_lang-DnWQDM_2.mjs\";\nimport { N as NcSelect } from \"./NcSelect-C6qHqfAO.mjs\";\nimport debounce from \"debounce\";\nimport { useElementSize, useIntersectionObserver } from \"@vueuse/core\";\nimport { RouterLink } from \"vue-router\";\nimport { g as getRoute } from \"./autolink-Y0rlJ_CI.mjs\";\nimport { N as NcButton } from \"./NcButton-BMnvzy1A.mjs\";\nimport { N as NcLoadingIcon } from \"./NcLoadingIcon-CiMp51wb.mjs\";\nimport { _ as _sfc_main$b } from \"./NcTextField.vue_vue_type_script_setup_true_lang-DzcUUWHO.mjs\";\nimport { I as IconDotsHorizontal } from \"./NcActions-CDD8eIxC.mjs\";\nimport { N as NcModal } from \"./NcModal-CdXZncEM.mjs\";\nimport { emit } from \"@nextcloud/event-bus\";\nimport { I as IconClose } from \"./Close-D6ngJ4t9.mjs\";\nconst _sfc_main$9 = {\n  name: \"NcCustomPickerElement\",\n  props: {\n    /**\n     * The reference provider\n     */\n    provider: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: [\n    \"cancel\",\n    \"submit\"\n  ],\n  data() {\n    return {\n      isRegistered: isCustomPickerElementRegistered(this.provider.id),\n      renderResult: null\n    };\n  },\n  mounted() {\n    if (this.isRegistered) {\n      this.renderElement();\n    }\n  },\n  beforeUnmount() {\n    if (this.isRegistered) {\n      destroyCustomPickerElement(this.provider.id, this.$el, this.renderResult);\n    }\n  },\n  methods: {\n    renderElement() {\n      if (this.$refs.domElement) {\n        this.$refs.domElement.innerHTML = \"\";\n      }\n      const renderFunctionResult = renderCustomPickerElement(this.$refs.domElement, { providerId: this.provider.id, accessible: false });\n      Promise.resolve(renderFunctionResult).then((result) => {\n        this.renderResult = result;\n        if (this.renderResult.object?._isVue && this.renderResult.object?.$on) {\n          this.renderResult.object.$on(\"submit\", this.onSubmit);\n          this.renderResult.object.$on(\"cancel\", this.onCancel);\n        }\n        this.renderResult.element.addEventListener(\"submit\", (e) => {\n          this.onSubmit(e.detail);\n        });\n        this.renderResult.element.addEventListener(\"cancel\", this.onCancel);\n      });\n    },\n    onSubmit(value) {\n      this.$emit(\"submit\", value);\n    },\n    onCancel() {\n      this.$emit(\"cancel\");\n    }\n  }\n};\nconst _hoisted_1$9 = { ref: \"domElement\" };\nfunction _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", _hoisted_1$9, null, 512);\n}\nconst NcCustomPickerElement = /* @__PURE__ */ _export_sfc(_sfc_main$9, [[\"render\", _sfc_render$9], [\"__scopeId\", \"data-v-6b2012de\"]]);\nregister(t7);\nconst anyLinkProviderId = \"any-link\";\nconst anyLinkProvider = {\n  id: anyLinkProviderId,\n  title: t(\"Any link\"),\n  order: 0,\n  icon_url: imagePath(\"core\", \"filetypes/link.svg\")\n};\nwindow._vue_richtext_reference_providers ??= loadState(\"core\", \"reference-provider-list\", []);\nwindow._vue_richtext_reference_provider_timestamps ??= loadState(\"core\", \"reference-provider-timestamps\", {});\nfunction getProvider(providerId) {\n  if (providerId === anyLinkProviderId) {\n    return anyLinkProvider;\n  }\n  return getProviders().find((p) => p.id === providerId);\n}\nfunction getProviders() {\n  return window._vue_richtext_reference_providers.filter((p) => {\n    const keep = !!p.search_providers_ids && p.search_providers_ids.length > 0 || isCustomPickerElementRegistered(p.id);\n    if (!keep) {\n      logger.debug(`[smart picker] ${p.id} reference provider is discoverable but does not have any related search provider or custom picker component registered`);\n    }\n    return keep;\n  });\n}\nfunction sortProviders(providerList) {\n  const timestamps = window._vue_richtext_reference_provider_timestamps;\n  return providerList.sort((a, b) => {\n    return a.order === b.order ? 0 : a.order > b.order ? 1 : -1;\n  }).sort((a, b) => {\n    const ta = timestamps[a.id];\n    const tb = timestamps[b.id];\n    return ta === tb ? 0 : tb === void 0 ? -1 : ta === void 0 ? 1 : ta > tb ? -1 : 1;\n  });\n}\nfunction searchProvider(query, limit) {\n  const providers = getProviders();\n  const escapedQuery = query.replace(/[/\\-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  const regexp = new RegExp(escapedQuery, \"i\");\n  const sortedProviders = sortProviders(providers);\n  const filteredSortedProviders = sortedProviders.filter((p) => {\n    return p.title.match(regexp);\n  });\n  const searchResult = limit ? filteredSortedProviders.slice(0, limit) : filteredSortedProviders;\n  if (query === \"\" || searchResult.length === 0) {\n    searchResult.push(anyLinkProvider);\n  }\n  return searchResult;\n}\nasync function touchProvider(providerId) {\n  const timestamp = Math.floor(Date.now() / 1e3);\n  const url = generateOcsUrl(\"references/provider/{providerId}\", { providerId });\n  await axios.put(url, { timestamp });\n  window._vue_richtext_reference_provider_timestamps[providerId] = timestamp;\n}\n/*!\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nfunction isUrl(str) {\n  try {\n    return Boolean(new URL(str));\n  } catch (error) {\n    return false;\n  }\n}\nregister(t38, t42);\nconst _sfc_main$8 = {\n  name: \"LinkVariantIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$8 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2$7 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3$6 = { d: \"M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z\" };\nconst _hoisted_4$5 = { key: 0 };\nfunction _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon link-variant-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3$6, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4$5, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2$7))\n  ], 16, _hoisted_1$8);\n}\nconst LinkVariantIcon = /* @__PURE__ */ _export_sfc(_sfc_main$8, [[\"render\", _sfc_render$8]]);\nconst _sfc_main$7 = {\n  name: \"NcProviderList\",\n  components: {\n    NcSelect,\n    NcHighlight: _sfc_main$a,\n    NcEmptyContent,\n    LinkVariantIcon\n  },\n  emits: [\n    \"selectProvider\",\n    \"submit\"\n  ],\n  data() {\n    return {\n      selectedProvider: null,\n      query: \"\",\n      multiselectPlaceholder: t(\"Select provider\"),\n      providerIconAlt: t(\"Provider icon\")\n    };\n  },\n  computed: {\n    options() {\n      const result = [];\n      if (this.query !== \"\" && isUrl(this.query)) {\n        result.push({\n          id: this.query,\n          title: this.query,\n          isLink: true\n        });\n      }\n      result.push(...searchProvider(this.query));\n      return result;\n    }\n  },\n  methods: {\n    focus() {\n      setTimeout(() => {\n        this.$refs[\"provider-select\"]?.$el?.querySelector(\"#provider-select-input\")?.focus();\n      }, 300);\n    },\n    onProviderSelected(p) {\n      if (p !== null) {\n        if (p.isLink) {\n          this.$emit(\"submit\", p.title);\n        } else {\n          this.$emit(\"selectProvider\", p);\n        }\n        this.selectedProvider = null;\n      }\n    },\n    onSearch(query) {\n      this.query = query;\n    }\n  }\n};\nconst _hoisted_1$7 = { class: \"provider-list\" };\nconst _hoisted_2$6 = {\n  key: 0,\n  class: \"provider\"\n};\nconst _hoisted_3$5 = {\n  key: 1,\n  class: \"provider\"\n};\nconst _hoisted_4$4 = [\"src\", \"alt\"];\nfunction _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LinkVariantIcon = resolveComponent(\"LinkVariantIcon\");\n  const _component_NcHighlight = resolveComponent(\"NcHighlight\");\n  const _component_NcSelect = resolveComponent(\"NcSelect\");\n  const _component_NcEmptyContent = resolveComponent(\"NcEmptyContent\");\n  return openBlock(), createElementBlock(\"div\", _hoisted_1$7, [\n    createVNode(_component_NcSelect, {\n      ref: \"provider-select\",\n      modelValue: $data.selectedProvider,\n      \"onUpdate:modelValue\": [\n        _cache[0] || (_cache[0] = ($event) => $data.selectedProvider = $event),\n        $options.onProviderSelected\n      ],\n      class: \"provider-list--select\",\n      \"input-id\": \"provider-select-input\",\n      label: \"title\",\n      placeholder: $data.multiselectPlaceholder,\n      options: $options.options,\n      \"append-to-body\": false,\n      \"clear-search-on-select\": true,\n      \"clear-search-on-blur\": () => false,\n      filterable: false,\n      onSearch: $options.onSearch\n    }, {\n      option: withCtx((option) => [\n        option.isLink ? (openBlock(), createElementBlock(\"div\", _hoisted_2$6, [\n          createVNode(_component_LinkVariantIcon, {\n            class: \"link-icon\",\n            size: 20\n          }),\n          createElementVNode(\"span\", null, toDisplayString(option.title), 1)\n        ])) : (openBlock(), createElementBlock(\"div\", _hoisted_3$5, [\n          createElementVNode(\"img\", {\n            class: \"provider-icon\",\n            src: option.icon_url,\n            alt: $data.providerIconAlt\n          }, null, 8, _hoisted_4$4),\n          createVNode(_component_NcHighlight, {\n            class: \"option-text\",\n            search: $data.query,\n            text: option.title\n          }, null, 8, [\"search\", \"text\"])\n        ]))\n      ]),\n      _: 1\n    }, 8, [\"modelValue\", \"placeholder\", \"options\", \"onSearch\", \"onUpdate:modelValue\"]),\n    createVNode(_component_NcEmptyContent, { class: \"provider-list--empty-content\" }, {\n      icon: withCtx(() => [\n        createVNode(_component_LinkVariantIcon)\n      ]),\n      _: 1\n    })\n  ]);\n}\nconst NcProviderList = /* @__PURE__ */ _export_sfc(_sfc_main$7, [[\"render\", _sfc_render$7], [\"__scopeId\", \"data-v-867e58fc\"]]);\nregister(t22);\nconst IDLE_TIMEOUT = 3 * 60 * 1e3;\nconst _sfc_main$6 = {\n  name: \"NcReferenceWidget\",\n  components: {\n    NcButton\n  },\n  props: {\n    reference: {\n      type: Object,\n      required: true\n    },\n    interactive: {\n      type: Boolean,\n      default: true\n    },\n    interactiveOptIn: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup() {\n    const isVisible = ref(false);\n    const widgetRoot = ref();\n    const { width } = useElementSize(widgetRoot);\n    useIntersectionObserver(widgetRoot, ([entry]) => {\n      nextTick(() => {\n        isVisible.value = entry.isIntersecting;\n      });\n    });\n    return {\n      width,\n      isVisible,\n      widgetRoot\n    };\n  },\n  data() {\n    return {\n      showInteractive: false,\n      rendered: false,\n      idleTimeout: null\n    };\n  },\n  computed: {\n    isInteractive() {\n      return !this.interactiveOptIn && this.interactive || this.showInteractive;\n    },\n    hasFullWidth() {\n      return hasFullWidth(this.reference.richObjectType);\n    },\n    hasCustomWidget() {\n      return isWidgetRegistered(this.reference.richObjectType);\n    },\n    hasInteractiveView() {\n      return isWidgetRegistered(this.reference.richObjectType) && hasInteractiveView(this.reference.richObjectType);\n    },\n    noAccess() {\n      return this.reference && !this.reference.accessible;\n    },\n    descriptionStyle() {\n      if (this.numberOfLines === 0) {\n        return {\n          display: \"none\"\n        };\n      }\n      const lineClamp = this.numberOfLines;\n      return {\n        lineClamp,\n        webkitLineClamp: lineClamp\n      };\n    },\n    numberOfLines() {\n      const lineCountOffsets = [450, 550, 650, Infinity];\n      return lineCountOffsets.findIndex((max) => this.width < max);\n    },\n    compactLink() {\n      const link = this.reference.openGraphObject.link;\n      if (!link) {\n        return \"\";\n      }\n      if (link.startsWith(\"https://\")) {\n        return link.substring(8);\n      }\n      if (link.startsWith(\"http://\")) {\n        return link.substring(7);\n      }\n      return link;\n    },\n    route() {\n      return getRoute(this.$router, this.reference.openGraphObject.link);\n    },\n    referenceWidgetLinkComponent() {\n      return this.route ? RouterLink : \"a\";\n    },\n    referenceWidgetLinkProps() {\n      return this.route ? { to: this.route } : { href: this.reference.openGraphObject.link, target: \"_blank\" };\n    }\n  },\n  watch: {\n    isVisible: {\n      handler(val) {\n        if (!val) {\n          this.idleTimeout = setTimeout(() => {\n            if (!this.isVisible) {\n              this.destroyWidget();\n            }\n          }, IDLE_TIMEOUT);\n          return;\n        }\n        if (this.idleTimeout) {\n          clearTimeout(this.idleTimeout);\n          this.idleTimeout = null;\n        }\n        if (!this.rendered) {\n          this.renderWidget();\n        }\n      },\n      immediate: true\n    }\n  },\n  beforeUnmount() {\n    this.destroyWidget();\n  },\n  methods: {\n    t,\n    enableInteractive() {\n      this.showInteractive = true;\n      this.renderWidget();\n    },\n    renderWidget() {\n      if (!this.$refs.customWidget) {\n        return;\n      }\n      if (this?.reference?.richObjectType === \"open-graph\") {\n        return;\n      }\n      this.$refs.customWidget.innerHTML = \"\";\n      const widget = document.createElement(\"div\");\n      widget.style = \"width: 100%;\";\n      this.$refs.customWidget.appendChild(widget);\n      this.$nextTick(() => {\n        renderWidget(widget, {\n          ...this.reference,\n          interactive: this.isInteractive\n        });\n        this.rendered = true;\n      });\n    },\n    destroyWidget() {\n      if (this.rendered) {\n        destroyWidget(this.reference.richObjectType, this.$el);\n        this.rendered = false;\n      }\n    }\n  }\n};\nconst _hoisted_1$6 = [\"src\"];\nconst _hoisted_2$5 = { class: \"widget-default--details\" };\nconst _hoisted_3$4 = { class: \"widget-default--name\" };\nconst _hoisted_4$3 = { class: \"widget-default--link\" };\nfunction _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NcButton = resolveComponent(\"NcButton\");\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"widgetRoot\",\n    class: normalizeClass({ \"toggle-interactive\": $options.hasInteractiveView && !$options.isInteractive })\n  }, [\n    $props.reference && $options.hasCustomWidget ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      ref: \"customWidget\",\n      class: normalizeClass([\"widget-custom\", { \"full-width\": $options.hasFullWidth }])\n    }, null, 2)) : !$options.noAccess && $props.reference && $props.reference.openGraphObject && !$options.hasCustomWidget ? (openBlock(), createBlock(resolveDynamicComponent($options.referenceWidgetLinkComponent), mergeProps({ key: 1 }, $options.referenceWidgetLinkProps, {\n      rel: \"noopener noreferrer\",\n      class: \"widget-default\"\n    }), {\n      default: withCtx(() => [\n        $props.reference.openGraphObject.thumb ? (openBlock(), createElementBlock(\"img\", {\n          key: 0,\n          class: \"widget-default--image\",\n          src: $props.reference.openGraphObject.thumb\n        }, null, 8, _hoisted_1$6)) : createCommentVNode(\"\", true),\n        createElementVNode(\"div\", _hoisted_2$5, [\n          createElementVNode(\"p\", _hoisted_3$4, toDisplayString($props.reference.openGraphObject.name), 1),\n          createElementVNode(\"p\", {\n            class: \"widget-default--description\",\n            style: normalizeStyle($options.descriptionStyle)\n          }, toDisplayString($props.reference.openGraphObject.description), 5),\n          createElementVNode(\"p\", _hoisted_4$3, toDisplayString($options.compactLink), 1)\n        ])\n      ]),\n      _: 1\n    }, 16)) : createCommentVNode(\"\", true),\n    $props.interactiveOptIn && $options.hasInteractiveView && !$options.isInteractive ? (openBlock(), createBlock(_component_NcButton, {\n      key: 2,\n      class: \"toggle-interactive--button\",\n      onClick: $options.enableInteractive\n    }, {\n      default: withCtx(() => [\n        createTextVNode(toDisplayString($options.t(\"Enable interactive view\")), 1)\n      ]),\n      _: 1\n    }, 8, [\"onClick\"])) : createCommentVNode(\"\", true)\n  ], 2);\n}\nconst NcReferenceWidget = /* @__PURE__ */ _export_sfc(_sfc_main$6, [[\"render\", _sfc_render$6], [\"__scopeId\", \"data-v-8285b115\"]]);\nregister(t23);\nconst _sfc_main$5 = {\n  name: \"NcRawLinkInput\",\n  components: {\n    LinkVariantIcon,\n    NcEmptyContent,\n    NcLoadingIcon,\n    NcReferenceWidget,\n    NcTextField: _sfc_main$b\n  },\n  props: {\n    /**\n     * The reference provider\n     */\n    provider: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: [\n    \"submit\"\n  ],\n  data() {\n    return {\n      inputValue: \"\",\n      loading: false,\n      reference: null,\n      abortController: null,\n      inputPlaceholder: t(\"Enter link\")\n    };\n  },\n  computed: {\n    isLinkValid() {\n      return isUrl(this.inputValue);\n    },\n    debouncedUpdateReference() {\n      return debounce(this.updateReference, 500);\n    }\n  },\n  methods: {\n    focus() {\n      this.$refs[\"url-input\"].$el.getElementsByTagName(\"input\")[0]?.focus();\n    },\n    onSubmit(e) {\n      const value = e.target.value;\n      if (this.isLinkValid) {\n        this.$emit(\"submit\", value);\n      }\n    },\n    onClear() {\n      this.inputValue = \"\";\n      this.reference = null;\n    },\n    onInput() {\n      this.reference = null;\n      if (this.abortController) {\n        this.abortController.abort();\n      }\n      if (this.isLinkValid) {\n        this.debouncedUpdateReference();\n      }\n    },\n    updateReference() {\n      this.loading = true;\n      this.abortController = new AbortController();\n      axios.get(generateOcsUrl(\"references/resolve\", 2) + \"?reference=\" + encodeURIComponent(this.inputValue), {\n        signal: this.abortController.signal\n      }).then((response) => {\n        this.reference = response.data.ocs.data.references[this.inputValue];\n      }).catch((error) => {\n        console.error(error);\n      }).then(() => {\n        this.loading = false;\n      });\n    }\n  }\n};\nconst _hoisted_1$5 = { class: \"raw-link\" };\nconst _hoisted_2$4 = { class: \"input-wrapper\" };\nconst _hoisted_3$3 = [\"src\"];\nfunction _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NcLoadingIcon = resolveComponent(\"NcLoadingIcon\");\n  const _component_LinkVariantIcon = resolveComponent(\"LinkVariantIcon\");\n  const _component_NcTextField = resolveComponent(\"NcTextField\");\n  const _component_NcReferenceWidget = resolveComponent(\"NcReferenceWidget\");\n  const _component_NcEmptyContent = resolveComponent(\"NcEmptyContent\");\n  return openBlock(), createElementBlock(\"div\", _hoisted_1$5, [\n    createElementVNode(\"div\", _hoisted_2$4, [\n      createVNode(_component_NcTextField, {\n        ref: \"url-input\",\n        modelValue: $data.inputValue,\n        \"onUpdate:modelValue\": [\n          _cache[0] || (_cache[0] = ($event) => $data.inputValue = $event),\n          $options.onInput\n        ],\n        \"show-trailing-button\": $data.inputValue !== \"\",\n        label: $data.inputPlaceholder,\n        onTrailingButtonClick: $options.onClear,\n        onKeyup: withKeys($options.onSubmit, [\"enter\"])\n      }, {\n        default: withCtx(() => [\n          $data.loading ? (openBlock(), createBlock(_component_NcLoadingIcon, {\n            key: 0,\n            size: 16\n          })) : (openBlock(), createBlock(_component_LinkVariantIcon, {\n            key: 1,\n            size: 16\n          }))\n        ]),\n        _: 1\n      }, 8, [\"modelValue\", \"show-trailing-button\", \"label\", \"onTrailingButtonClick\", \"onUpdate:modelValue\", \"onKeyup\"])\n    ]),\n    $data.reference !== null ? (openBlock(), createBlock(_component_NcReferenceWidget, {\n      key: 0,\n      class: \"reference-widget\",\n      reference: $data.reference\n    }, null, 8, [\"reference\"])) : (openBlock(), createBlock(_component_NcEmptyContent, {\n      key: 1,\n      class: \"raw-link--empty-content\"\n    }, {\n      icon: withCtx(() => [\n        $props.provider.icon_url ? (openBlock(), createElementBlock(\"img\", {\n          key: 0,\n          class: \"provider-icon\",\n          src: $props.provider.icon_url\n        }, null, 8, _hoisted_3$3)) : (openBlock(), createBlock(_component_LinkVariantIcon, { key: 1 }))\n      ]),\n      _: 1\n    }))\n  ]);\n}\nconst NcRawLinkInput = /* @__PURE__ */ _export_sfc(_sfc_main$5, [[\"render\", _sfc_render$5], [\"__scopeId\", \"data-v-4c1766c7\"]]);\nconst _sfc_main$4 = {\n  name: \"NcSearchResult\",\n  components: {\n    NcHighlight: _sfc_main$a\n  },\n  props: {\n    /**\n     * Unified search result entry\n     */\n    entry: {\n      type: Object,\n      required: true\n    },\n    /**\n     * The query that led to getting this result\n     * Used to highlight the entry text\n     */\n    query: {\n      type: String,\n      required: true\n    }\n  }\n};\nconst _hoisted_1$4 = { class: \"result\" };\nconst _hoisted_2$3 = [\"src\"];\nconst _hoisted_3$2 = { class: \"result--content\" };\nconst _hoisted_4$2 = { class: \"result--content--name\" };\nconst _hoisted_5$1 = { class: \"result--content--subline\" };\nfunction _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NcHighlight = resolveComponent(\"NcHighlight\");\n  return openBlock(), createElementBlock(\"div\", _hoisted_1$4, [\n    $props.entry.icon ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass([{ [$props.entry.icon]: true, rounded: $props.entry.rounded }, \"result--icon-class\"])\n    }, null, 2)) : (openBlock(), createElementBlock(\"img\", {\n      key: 1,\n      class: normalizeClass([\"result--image\", { rounded: $props.entry.rounded }]),\n      src: $props.entry.thumbnailUrl\n    }, null, 10, _hoisted_2$3)),\n    createElementVNode(\"div\", _hoisted_3$2, [\n      createElementVNode(\"span\", _hoisted_4$2, [\n        createVNode(_component_NcHighlight, {\n          search: $props.query,\n          text: $props.entry.title\n        }, null, 8, [\"search\", \"text\"])\n      ]),\n      createElementVNode(\"span\", _hoisted_5$1, [\n        createVNode(_component_NcHighlight, {\n          search: $props.query,\n          text: $props.entry.subline\n        }, null, 8, [\"search\", \"text\"])\n      ])\n    ])\n  ]);\n}\nconst NcSearchResult = /* @__PURE__ */ _export_sfc(_sfc_main$4, [[\"render\", _sfc_render$4], [\"__scopeId\", \"data-v-f7b56afd\"]]);\nregister(t30, t38, t40);\nconst LIMIT = 5;\nconst _sfc_main$3 = {\n  name: \"NcSearch\",\n  components: {\n    LinkVariantIcon,\n    DotsHorizontalIcon: IconDotsHorizontal,\n    NcEmptyContent,\n    NcSelect,\n    NcSearchResult\n  },\n  props: {\n    /**\n     * The selected reference provider\n     */\n    provider: {\n      type: Object,\n      required: true\n    },\n    showEmptyContent: {\n      type: Boolean,\n      default: true\n    },\n    searchPlaceholder: {\n      type: String,\n      default: null\n    }\n  },\n  emits: [\n    \"submit\"\n  ],\n  data() {\n    return {\n      searchQuery: \"\",\n      selectedResult: null,\n      resultsBySearchProvider: {},\n      searching: false,\n      searchingMoreOf: null,\n      abortController: null,\n      noOptionsText: t(\"Start typing to search\"),\n      providerIconAlt: t(\"Provider icon\")\n    };\n  },\n  computed: {\n    mySearchPlaceholder() {\n      return this.searchPlaceholder || t(\"Search\");\n    },\n    searchProviderIds() {\n      return this.provider.search_providers_ids;\n    },\n    options() {\n      if (this.searchQuery === \"\") {\n        return [];\n      }\n      const options = [];\n      if (isUrl(this.searchQuery)) {\n        options.push(this.rawLinkEntry);\n      }\n      options.push(...this.formattedSearchResults);\n      return options;\n    },\n    rawLinkEntry() {\n      return {\n        id: \"rawLinkEntry\",\n        resourceUrl: this.searchQuery,\n        isRawLink: true\n      };\n    },\n    formattedSearchResults() {\n      const results = [];\n      this.searchProviderIds.forEach((pid) => {\n        if (this.resultsBySearchProvider[pid].entries.length > 0) {\n          if (this.searchProviderIds.length > 1 || this.resultsBySearchProvider[pid].entries.length > 1) {\n            results.push({\n              id: \"groupTitle-\" + pid,\n              name: this.resultsBySearchProvider[pid].name,\n              isCustomGroupTitle: true,\n              providerId: pid\n            });\n          }\n          const providerEntriesWithId = this.resultsBySearchProvider[pid].entries.map((entry, index) => {\n            return {\n              id: \"provider-\" + pid + \"-entry-\" + index,\n              ...entry\n            };\n          });\n          results.push(...providerEntriesWithId);\n          if (this.resultsBySearchProvider[pid].isPaginated) {\n            results.push({\n              id: \"moreOf-\" + pid,\n              name: this.resultsBySearchProvider[pid].name,\n              isMore: true,\n              providerId: pid,\n              isLoading: this.searchingMoreOf === pid\n            });\n          }\n        }\n      });\n      return results;\n    },\n    debouncedUpdateSearch() {\n      return debounce(this.updateSearch, 500);\n    }\n  },\n  mounted() {\n    this.resetResults();\n  },\n  beforeUnmount() {\n    this.cancelSearchRequests();\n  },\n  methods: {\n    t,\n    resetResults() {\n      const resultsBySearchProvider = {};\n      this.searchProviderIds.forEach((pid) => {\n        resultsBySearchProvider[pid] = {\n          entries: []\n        };\n      });\n      this.resultsBySearchProvider = resultsBySearchProvider;\n    },\n    focus() {\n      setTimeout(() => {\n        this.$refs[\"search-select\"]?.$el?.querySelector(\"#search-select-input\")?.focus();\n      }, 300);\n    },\n    cancelSearchRequests() {\n      if (this.abortController) {\n        this.abortController.abort();\n      }\n    },\n    onSearchInput(query) {\n      this.searchQuery = query;\n      this.debouncedUpdateSearch();\n    },\n    onSelectResultSelected(item) {\n      if (item !== null) {\n        if (item.resourceUrl) {\n          this.cancelSearchRequests();\n          this.$emit(\"submit\", item.resourceUrl);\n        } else if (item.isMore) {\n          this.searchMoreOf(item.providerId).then(() => {\n            this.selectedResult = null;\n          });\n        }\n      }\n    },\n    searchMoreOf(searchProviderId) {\n      this.searchingMoreOf = searchProviderId;\n      this.cancelSearchRequests();\n      return this.searchProviders(searchProviderId);\n    },\n    updateSearch() {\n      this.cancelSearchRequests();\n      this.resetResults();\n      if (this.searchQuery === \"\") {\n        this.searching = false;\n        return;\n      }\n      return this.searchProviders();\n    },\n    searchProviders(searchProviderId = null) {\n      this.abortController = new AbortController();\n      this.searching = true;\n      const searchPromises = searchProviderId === null ? [...this.searchProviderIds].map((pid) => {\n        return this.searchOneProvider(pid);\n      }) : [this.searchOneProvider(searchProviderId, this.resultsBySearchProvider[searchProviderId]?.cursor ?? null)];\n      return Promise.allSettled(searchPromises).then((promises) => {\n        const isOneCanceled = !!promises.find((p) => {\n          return p.status === \"rejected\" && (p.reason.name === \"CanceledError\" || p.reason.code === \"ERR_CANCELED\");\n        });\n        if (!isOneCanceled) {\n          this.searching = false;\n          this.searchingMoreOf = null;\n        }\n      });\n    },\n    searchOneProvider(providerId, cursor = null) {\n      const url = cursor === null ? generateOcsUrl(\"search/providers/{providerId}/search?term={term}&limit={limit}\", { providerId, term: this.searchQuery, limit: LIMIT }) : generateOcsUrl(\"search/providers/{providerId}/search?term={term}&limit={limit}&cursor={cursor}\", { providerId, term: this.searchQuery, limit: LIMIT, cursor });\n      return axios.get(url, {\n        signal: this.abortController.signal\n      }).then((response) => {\n        const data = response.data.ocs.data;\n        this.resultsBySearchProvider[providerId].name = data.name;\n        this.resultsBySearchProvider[providerId].cursor = data.cursor;\n        this.resultsBySearchProvider[providerId].isPaginated = data.isPaginated;\n        this.resultsBySearchProvider[providerId].entries.push(...data.entries);\n      });\n    }\n  }\n};\nconst _hoisted_1$3 = {\n  key: 0,\n  class: \"custom-option\"\n};\nconst _hoisted_2$2 = { class: \"option-text\" };\nconst _hoisted_3$1 = {\n  key: 2,\n  class: \"custom-option group-name\"\n};\nconst _hoisted_4$1 = [\"src\"];\nconst _hoisted_5 = { class: \"option-text\" };\nconst _hoisted_6 = {\n  key: 3,\n  class: /* @__PURE__ */ normalizeClass({ \"custom-option\": true })\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"option-simple-icon icon-loading-small\"\n};\nconst _hoisted_8 = { class: \"option-text\" };\nconst _hoisted_9 = [\"alt\", \"src\"];\nfunction _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LinkVariantIcon = resolveComponent(\"LinkVariantIcon\");\n  const _component_NcSearchResult = resolveComponent(\"NcSearchResult\");\n  const _component_DotsHorizontalIcon = resolveComponent(\"DotsHorizontalIcon\");\n  const _component_NcSelect = resolveComponent(\"NcSelect\");\n  const _component_NcEmptyContent = resolveComponent(\"NcEmptyContent\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"smart-picker-search\", { \"with-empty-content\": $props.showEmptyContent }])\n  }, [\n    createVNode(_component_NcSelect, {\n      ref: \"search-select\",\n      modelValue: $data.selectedResult,\n      \"onUpdate:modelValue\": [\n        _cache[0] || (_cache[0] = ($event) => $data.selectedResult = $event),\n        $options.onSelectResultSelected\n      ],\n      class: \"smart-picker-search--select\",\n      \"input-id\": \"search-select-input\",\n      label: \"name\",\n      placeholder: $options.mySearchPlaceholder,\n      options: $options.options,\n      \"append-to-body\": false,\n      \"close-on-select\": false,\n      \"clear-search-on-select\": false,\n      \"clear-search-on-blur\": () => false,\n      \"reset-focus-on-options-change\": false,\n      filterable: false,\n      autoscroll: true,\n      \"reset-on-options-change\": false,\n      loading: $data.searching,\n      onSearch: $options.onSearchInput\n    }, {\n      option: withCtx((option) => [\n        option.isRawLink ? (openBlock(), createElementBlock(\"div\", _hoisted_1$3, [\n          createVNode(_component_LinkVariantIcon, {\n            class: \"option-simple-icon\",\n            size: 20\n          }),\n          createElementVNode(\"span\", _hoisted_2$2, toDisplayString($options.t(\"Raw link {options}\", { options: option.resourceUrl })), 1)\n        ])) : option.resourceUrl ? (openBlock(), createBlock(_component_NcSearchResult, {\n          key: 1,\n          class: \"search-result\",\n          entry: option,\n          query: $data.searchQuery\n        }, null, 8, [\"entry\", \"query\"])) : option.isCustomGroupTitle ? (openBlock(), createElementBlock(\"span\", _hoisted_3$1, [\n          $props.provider.icon_url ? (openBlock(), createElementBlock(\"img\", {\n            key: 0,\n            class: \"provider-icon group-name-icon\",\n            src: $props.provider.icon_url\n          }, null, 8, _hoisted_4$1)) : createCommentVNode(\"\", true),\n          createElementVNode(\"span\", _hoisted_5, [\n            createElementVNode(\"strong\", null, toDisplayString(option.name), 1)\n          ])\n        ])) : option.isMore ? (openBlock(), createElementBlock(\"span\", _hoisted_6, [\n          option.isLoading ? (openBlock(), createElementBlock(\"span\", _hoisted_7)) : (openBlock(), createBlock(_component_DotsHorizontalIcon, {\n            key: 1,\n            class: \"option-simple-icon\",\n            size: 20\n          })),\n          createElementVNode(\"span\", _hoisted_8, toDisplayString($options.t('Load more \"{options}\"', { options: option.name })), 1)\n        ])) : createCommentVNode(\"\", true)\n      ]),\n      \"no-options\": withCtx(() => [\n        createTextVNode(toDisplayString($data.noOptionsText), 1)\n      ]),\n      _: 1\n    }, 8, [\"modelValue\", \"placeholder\", \"options\", \"loading\", \"onSearch\", \"onUpdate:modelValue\"]),\n    $props.showEmptyContent ? (openBlock(), createBlock(_component_NcEmptyContent, {\n      key: 0,\n      class: \"smart-picker-search--empty-content\"\n    }, {\n      icon: withCtx(() => [\n        $props.provider.icon_url ? (openBlock(), createElementBlock(\"img\", {\n          key: 0,\n          class: \"provider-icon\",\n          alt: $data.providerIconAlt,\n          src: $props.provider.icon_url\n        }, null, 8, _hoisted_9)) : (openBlock(), createBlock(_component_LinkVariantIcon, { key: 1 }))\n      ]),\n      _: 1\n    })) : createCommentVNode(\"\", true)\n  ], 2);\n}\nconst NcSearch = /* @__PURE__ */ _export_sfc(_sfc_main$3, [[\"render\", _sfc_render$3], [\"__scopeId\", \"data-v-17458277\"]]);\nconst MODES = {\n  providerList: 1,\n  standardLinkInput: 2,\n  searchInput: 3,\n  customElement: 4\n};\nconst _sfc_main$2 = {\n  name: \"NcReferencePicker\",\n  components: {\n    NcCustomPickerElement,\n    NcProviderList,\n    NcRawLinkInput,\n    NcSearch\n  },\n  props: {\n    /**\n     * Provider to select on creation\n     * Default: null. Show the provider list\n     */\n    initialProvider: {\n      type: Object,\n      default: () => null\n    },\n    /**\n     * Optional width in pixels\n     * Default: 100%\n     */\n    width: {\n      type: Number,\n      default: null\n    },\n    /**\n     * Focus on the provider list select input on creation\n     * Default: true\n     */\n    focusOnCreate: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: [\n    \"cancel\",\n    \"cancelRawLink\",\n    \"cancelSearch\",\n    \"providerSelected\",\n    \"submit\"\n  ],\n  data() {\n    return {\n      MODES,\n      selectedProvider: this.initialProvider\n    };\n  },\n  computed: {\n    mode() {\n      return this.selectedProvider === null ? MODES.providerList : isCustomPickerElementRegistered(this.selectedProvider.id) ? MODES.customElement : this.selectedProvider.search_providers_ids ? MODES.searchInput : MODES.standardLinkInput;\n    },\n    pickerWrapperStyle() {\n      return {\n        width: this.width ? this.width + \"px\" : void 0\n      };\n    }\n  },\n  mounted() {\n    if (this.focusOnCreate) {\n      if (this.initialProvider) {\n        setTimeout(() => {\n          this.$refs[\"url-input\"]?.focus();\n        }, 300);\n      } else {\n        this.$nextTick(() => {\n          this.$refs[\"provider-list\"]?.focus();\n        });\n      }\n    }\n  },\n  methods: {\n    onEscapePressed() {\n      if (this.selectedProvider !== null) {\n        this.deselectProvider();\n      } else {\n        this.cancelProviderSelection();\n      }\n    },\n    onProviderSelected(provider) {\n      this.selectedProvider = provider;\n      this.$emit(\"providerSelected\", provider);\n      this.$nextTick(() => {\n        this.$refs[\"url-input\"]?.focus();\n      });\n    },\n    cancelCustomElement() {\n      this.deselectProvider();\n    },\n    cancelSearch() {\n      this.$emit(\"cancelSearch\", this.selectedProvider?.title);\n      this.deselectProvider();\n    },\n    cancelRawLinkInput() {\n      this.$emit(\"cancelRawLink\", this.selectedProvider?.title);\n      this.deselectProvider();\n    },\n    cancelProviderSelection() {\n      this.$emit(\"cancel\");\n    },\n    submitLink(link) {\n      if (this.selectedProvider !== null) {\n        touchProvider(this.selectedProvider.id);\n      }\n      this.$emit(\"submit\", link);\n      this.deselectProvider();\n    },\n    deselectProvider() {\n      this.selectedProvider = null;\n      this.$emit(\"providerSelected\", null);\n      setTimeout(() => {\n        this.$refs[\"provider-list\"]?.focus();\n      }, 300);\n    }\n  }\n};\nconst _hoisted_1$2 = {\n  key: 3,\n  class: \"custom-element-wrapper\"\n};\nfunction _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NcProviderList = resolveComponent(\"NcProviderList\");\n  const _component_NcRawLinkInput = resolveComponent(\"NcRawLinkInput\");\n  const _component_NcSearch = resolveComponent(\"NcSearch\");\n  const _component_NcCustomPickerElement = resolveComponent(\"NcCustomPickerElement\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"reference-picker\",\n    style: normalizeStyle($options.pickerWrapperStyle),\n    tabindex: \"-1\",\n    onKeydown: _cache[0] || (_cache[0] = withKeys(withModifiers((...args) => $options.onEscapePressed && $options.onEscapePressed(...args), [\"stop\", \"prevent\"]), [\"esc\"]))\n  }, [\n    $options.mode === $data.MODES.providerList ? (openBlock(), createBlock(_component_NcProviderList, {\n      key: 0,\n      ref: \"provider-list\",\n      onSelectProvider: $options.onProviderSelected,\n      onSubmit: $options.submitLink,\n      onCancel: $options.cancelProviderSelection\n    }, null, 8, [\"onSelectProvider\", \"onSubmit\", \"onCancel\"])) : $options.mode === $data.MODES.standardLinkInput ? (openBlock(), createBlock(_component_NcRawLinkInput, {\n      key: 1,\n      ref: \"url-input\",\n      provider: $data.selectedProvider,\n      onSubmit: $options.submitLink,\n      onCancel: $options.cancelRawLinkInput\n    }, null, 8, [\"provider\", \"onSubmit\", \"onCancel\"])) : $options.mode === $data.MODES.searchInput ? (openBlock(), createBlock(_component_NcSearch, {\n      key: 2,\n      ref: \"url-input\",\n      provider: $data.selectedProvider,\n      onCancel: $options.cancelSearch,\n      onSubmit: $options.submitLink\n    }, null, 8, [\"provider\", \"onCancel\", \"onSubmit\"])) : $options.mode === $data.MODES.customElement ? (openBlock(), createElementBlock(\"div\", _hoisted_1$2, [\n      createVNode(_component_NcCustomPickerElement, {\n        provider: $data.selectedProvider,\n        class: \"custom-element\",\n        onSubmit: $options.submitLink,\n        onCancel: $options.cancelCustomElement\n      }, null, 8, [\"provider\", \"onSubmit\", \"onCancel\"])\n    ])) : createCommentVNode(\"\", true)\n  ], 36);\n}\nconst NcReferencePicker = /* @__PURE__ */ _export_sfc(_sfc_main$2, [[\"render\", _sfc_render$2], [\"__scopeId\", \"data-v-b8f307ac\"]]);\nregister(t11, t18);\nconst _sfc_main$1 = {\n  name: \"ArrowLeftIcon\",\n  emits: [\"click\"],\n  props: {\n    title: {\n      type: String\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n};\nconst _hoisted_1$1 = [\"aria-hidden\", \"aria-label\"];\nconst _hoisted_2$1 = [\"fill\", \"width\", \"height\"];\nconst _hoisted_3 = { d: \"M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z\" };\nconst _hoisted_4 = { key: 0 };\nfunction _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", mergeProps(_ctx.$attrs, {\n    \"aria-hidden\": $props.title ? null : \"true\",\n    \"aria-label\": $props.title,\n    class: \"material-design-icon arrow-left-icon\",\n    role: \"img\",\n    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit(\"click\", $event))\n  }), [\n    (openBlock(), createElementBlock(\"svg\", {\n      fill: $props.fillColor,\n      class: \"material-design-icon__svg\",\n      width: $props.size,\n      height: $props.size,\n      viewBox: \"0 0 24 24\"\n    }, [\n      createElementVNode(\"path\", _hoisted_3, [\n        $props.title ? (openBlock(), createElementBlock(\"title\", _hoisted_4, toDisplayString($props.title), 1)) : createCommentVNode(\"\", true)\n      ])\n    ], 8, _hoisted_2$1))\n  ], 16, _hoisted_1$1);\n}\nconst ArrowLeftIcon = /* @__PURE__ */ _export_sfc(_sfc_main$1, [[\"render\", _sfc_render$1]]);\nconst _sfc_main = {\n  name: \"NcReferencePickerModal\",\n  components: {\n    NcReferencePicker,\n    NcModal,\n    NcButton,\n    ArrowLeftIcon,\n    CloseIcon: IconClose\n  },\n  props: {\n    /**\n     * Provider to select on creation\n     * Show the provider list if no initial one is provided\n     */\n    initialProvider: {\n      type: Object,\n      default: () => null\n    },\n    /**\n     * Focus on the input item on create\n     */\n    focusOnCreate: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * If true, add the modal content to the Viewer trap elements via the event-bus\n     */\n    isInsideViewer: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\n    \"cancel\",\n    \"submit\"\n  ],\n  data() {\n    return {\n      show: true,\n      selectedProvider: this.initialProvider,\n      backButtonTitle: t(\"Back to provider selection\"),\n      closeButtonTitle: t(\"Close\"),\n      closeButtonLabel: t(\"Close Smart Picker\")\n    };\n  },\n  computed: {\n    isProviderSelected() {\n      return this.selectedProvider !== null;\n    },\n    showBackButton() {\n      return this.initialProvider === null && this.isProviderSelected;\n    },\n    modalSize() {\n      return this.isProviderSelected && isCustomPickerElementRegistered(this.selectedProvider.id) ? getCustomPickerElementSize(this.selectedProvider.id) ?? \"large\" : \"normal\";\n    },\n    showModalName() {\n      return !this.isProviderSelected || !isCustomPickerElementRegistered(this.selectedProvider.id);\n    },\n    modalName() {\n      return this.isProviderSelected ? this.selectedProvider.title : t(\"Smart Picker\");\n    }\n  },\n  mounted() {\n    if (this.isInsideViewer) {\n      const elem = this.$refs.modal_content;\n      emit(\"viewer:trapElements:changed\", elem);\n    }\n  },\n  methods: {\n    onCancel() {\n      this.show = false;\n      this.$emit(\"cancel\");\n    },\n    onSubmit(value) {\n      this.show = false;\n      this.$emit(\"submit\", value);\n    },\n    onProviderSelect(provider) {\n      this.selectedProvider = provider;\n      if (provider === null && this.initialProvider !== null) {\n        this.onCancel();\n      }\n    },\n    onBackClicked() {\n      this.$refs.referencePicker.deselectProvider();\n    }\n  }\n};\nconst _hoisted_1 = {\n  ref: \"modal_content\",\n  class: \"reference-picker-modal--content\"\n};\nconst _hoisted_2 = { key: 1 };\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ArrowLeftIcon = resolveComponent(\"ArrowLeftIcon\");\n  const _component_NcButton = resolveComponent(\"NcButton\");\n  const _component_CloseIcon = resolveComponent(\"CloseIcon\");\n  const _component_NcReferencePicker = resolveComponent(\"NcReferencePicker\");\n  const _component_NcModal = resolveComponent(\"NcModal\");\n  return $data.show ? (openBlock(), createBlock(_component_NcModal, {\n    key: 0,\n    size: $options.modalSize,\n    class: \"reference-picker-modal\",\n    onClose: $options.onCancel\n  }, {\n    default: withCtx(() => [\n      createElementVNode(\"div\", _hoisted_1, [\n        $options.showBackButton ? (openBlock(), createBlock(_component_NcButton, {\n          key: 0,\n          \"aria-label\": $data.backButtonTitle,\n          title: $data.backButtonTitle,\n          class: \"back-button\",\n          onClick: $options.onBackClicked\n        }, {\n          icon: withCtx(() => [\n            createVNode(_component_ArrowLeftIcon)\n          ]),\n          _: 1\n        }, 8, [\"aria-label\", \"title\", \"onClick\"])) : createCommentVNode(\"\", true),\n        createVNode(_component_NcButton, {\n          class: \"close-button\",\n          \"aria-label\": $data.closeButtonLabel,\n          title: $data.closeButtonTitle,\n          variant: \"tertiary\",\n          onClick: $options.onCancel\n        }, {\n          icon: withCtx(() => [\n            createVNode(_component_CloseIcon)\n          ]),\n          _: 1\n        }, 8, [\"aria-label\", \"title\", \"onClick\"]),\n        $options.showModalName ? (openBlock(), createElementBlock(\"h2\", _hoisted_2, toDisplayString($options.modalName), 1)) : createCommentVNode(\"\", true),\n        createVNode(_component_NcReferencePicker, {\n          ref: \"referencePicker\",\n          \"initial-provider\": $props.initialProvider,\n          \"focus-on-create\": $props.focusOnCreate,\n          onProviderSelected: $options.onProviderSelect,\n          onSubmit: $options.onSubmit,\n          onCancel: $options.onCancel\n        }, null, 8, [\"initial-provider\", \"focus-on-create\", \"onProviderSelected\", \"onSubmit\", \"onCancel\"])\n      ], 512)\n    ]),\n    _: 1\n  }, 8, [\"size\", \"onClose\"])) : createCommentVNode(\"\", true);\n}\nconst NcReferencePickerModal = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__scopeId\", \"data-v-2a52b076\"]]);\nasync function getLinkWithPicker(providerId, isInsideViewer) {\n  const modalId = \"referencePickerModal\";\n  const modalElement = document.createElement(\"div\");\n  modalElement.id = modalId;\n  document.body.append(modalElement);\n  const { promise, reject, resolve } = Promise.withResolvers();\n  const initialProvider = providerId && getProvider(providerId) || null;\n  const view = createApp(NcReferencePickerModal, {\n    initialProvider,\n    isInsideViewer,\n    onCancel() {\n      view.unmount();\n      reject(new Error(\"User cancellation\"));\n    },\n    onSubmit(link) {\n      view.unmount();\n      resolve(link);\n    }\n  });\n  view.mount(modalElement);\n  return promise;\n}\nexport {\n  NcReferenceWidget as N,\n  getProvider as a,\n  getProviders as b,\n  searchProvider as c,\n  anyLinkProviderId as d,\n  NcReferencePicker as e,\n  NcReferencePickerModal as f,\n  getLinkWithPicker as g,\n  NcSearch as h,\n  sortProviders as s\n};\n//# sourceMappingURL=referencePickerModal-BtI-8rNN.mjs.map\n","import { loadState } from \"@nextcloud/initial-state\";\n/*!\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: GPL-3.0-or-later\n */\nfunction isPublicShare() {\n  return loadState(\"files_sharing\", \"isPublic\", null) ?? document.querySelector('input#isPublic[type=\"hidden\"][name=\"isPublic\"][value=\"1\"]') !== null;\n}\nfunction getSharingToken() {\n  return loadState(\"files_sharing\", \"sharingToken\", null) ?? document.querySelector('input#sharingToken[type=\"hidden\"]')?.value ?? null;\n}\nexport {\n  getSharingToken,\n  isPublicShare\n};\n//# sourceMappingURL=public.mjs.map\n","import '../assets/NcRichText-Fp8zf8zq.css';\nimport { unified } from \"unified\";\nimport { resolveComponent, createElementBlock, createCommentVNode, openBlock, normalizeClass, Fragment, renderList, createBlock, ref, h } from \"vue\";\nimport { RouterLink } from \"vue-router\";\nimport remarkParse from \"remark-parse\";\nimport breaks from \"remark-breaks\";\nimport remarkUnlinkProtocols from \"remark-unlink-protocols\";\nimport remark2rehype from \"remark-rehype\";\nimport rehype2react from \"rehype-react\";\nimport rehypeExternalLinks from \"rehype-external-links\";\nimport { N as NcCheckboxRadioSwitch } from \"./NcCheckboxRadioSwitch-Da0F7y0G.mjs\";\nimport { N as NcReferenceWidget } from \"./referencePickerModal-BtI-8rNN.mjs\";\nimport { U as URL_PATTERN, g as getRoute, p as parseUrl, r as remarkAutolink } from \"./autolink-Y0rlJ_CI.mjs\";\nimport axios from \"@nextcloud/axios\";\nimport { getSharingToken } from \"@nextcloud/sharing/public\";\nimport { getCurrentUser } from \"@nextcloud/auth\";\nimport { generateOcsUrl } from \"@nextcloud/router\";\nimport { _ as _export_sfc } from \"./_plugin-vue_export-helper-1tPrXgE0.mjs\";\nimport { visit, EXIT as EXIT$1, SKIP as SKIP$1 } from \"unist-util-visit\";\nimport { c as createElementId } from \"./createElementId-DhjFt1I9.mjs\";\nimport { u } from \"unist-builder\";\nfunction ccount(value, character) {\n  const source = String(value);\n  if (typeof character !== \"string\") {\n    throw new TypeError(\"Expected character\");\n  }\n  let count = 0;\n  let index = source.indexOf(character);\n  while (index !== -1) {\n    count++;\n    index = source.indexOf(character, index + character.length);\n  }\n  return count;\n}\nfunction ok$1() {\n}\nconst asciiAlpha = regexCheck(/[A-Za-z]/);\nconst asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\nfunction asciiControl(code2) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code2 !== null && (code2 < 32 || code2 === 127)\n  );\n}\nfunction markdownLineEnding(code2) {\n  return code2 !== null && code2 < -2;\n}\nfunction markdownLineEndingOrSpace(code2) {\n  return code2 !== null && (code2 < 0 || code2 === 32);\n}\nfunction markdownSpace(code2) {\n  return code2 === -2 || code2 === -1 || code2 === 32;\n}\nconst unicodePunctuation = regexCheck(new RegExp(\"\\\\p{P}|\\\\p{S}\", \"u\"));\nconst unicodeWhitespace = regexCheck(/\\s/);\nfunction regexCheck(regex) {\n  return check;\n  function check(code2) {\n    return code2 !== null && code2 > -1 && regex.test(String.fromCharCode(code2));\n  }\n}\nfunction escapeStringRegexp(string) {\n  if (typeof string !== \"string\") {\n    throw new TypeError(\"Expected a string\");\n  }\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n}\nconst convert = (\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  /**\n   * @param {Test} [test]\n   * @returns {Check}\n   */\n  function(test) {\n    if (test === null || test === void 0) {\n      return ok;\n    }\n    if (typeof test === \"function\") {\n      return castFactory(test);\n    }\n    if (typeof test === \"object\") {\n      return Array.isArray(test) ? anyFactory(test) : propsFactory(test);\n    }\n    if (typeof test === \"string\") {\n      return typeFactory(test);\n    }\n    throw new Error(\"Expected function, string, or object as test\");\n  }\n);\nfunction anyFactory(tests) {\n  const checks = [];\n  let index = -1;\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n  return castFactory(any);\n  function any(...parameters) {\n    let index2 = -1;\n    while (++index2 < checks.length) {\n      if (checks[index2].apply(this, parameters)) return true;\n    }\n    return false;\n  }\n}\nfunction propsFactory(check) {\n  const checkAsRecord = (\n    /** @type {Record<string, unknown>} */\n    check\n  );\n  return castFactory(all2);\n  function all2(node2) {\n    const nodeAsRecord = (\n      /** @type {Record<string, unknown>} */\n      /** @type {unknown} */\n      node2\n    );\n    let key;\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false;\n    }\n    return true;\n  }\n}\nfunction typeFactory(check) {\n  return castFactory(type);\n  function type(node2) {\n    return node2 && node2.type === check;\n  }\n}\nfunction castFactory(testFunction) {\n  return check;\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) && testFunction.call(\n        this,\n        value,\n        typeof index === \"number\" ? index : void 0,\n        parent || void 0\n      )\n    );\n  }\n}\nfunction ok() {\n  return true;\n}\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === \"object\" && \"type\" in value;\n}\nfunction color(d) {\n  return d;\n}\nconst empty = [];\nconst CONTINUE = true;\nconst EXIT = false;\nconst SKIP = \"skip\";\nfunction visitParents(tree, test, visitor, reverse) {\n  let check;\n  {\n    check = test;\n  }\n  const is = convert(check);\n  const step = 1;\n  factory(tree, void 0, [])();\n  function factory(node2, index, parents) {\n    const value = (\n      /** @type {Record<string, unknown>} */\n      node2 && typeof node2 === \"object\" ? node2 : {}\n    );\n    if (typeof value.type === \"string\") {\n      const name = (\n        // `hast`\n        typeof value.tagName === \"string\" ? value.tagName : (\n          // `xast`\n          typeof value.name === \"string\" ? value.name : void 0\n        )\n      );\n      Object.defineProperty(visit2, \"name\", {\n        value: \"node (\" + color(node2.type + (name ? \"<\" + name + \">\" : \"\")) + \")\"\n      });\n    }\n    return visit2;\n    function visit2() {\n      let result = empty;\n      let subresult;\n      let offset;\n      let grandparents;\n      if (is(node2, index, parents[parents.length - 1] || void 0)) {\n        result = toResult(visitor(node2, parents));\n        if (result[0] === EXIT) {\n          return result;\n        }\n      }\n      if (\"children\" in node2 && node2.children) {\n        const nodeAsParent = (\n          /** @type {UnistParent} */\n          node2\n        );\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = -1 + step;\n          grandparents = parents.concat(nodeAsParent);\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset];\n            subresult = factory(child, offset, grandparents)();\n            if (subresult[0] === EXIT) {\n              return subresult;\n            }\n            offset = typeof subresult[1] === \"number\" ? subresult[1] : offset + step;\n          }\n        }\n      }\n      return result;\n    }\n  }\n}\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  if (typeof value === \"number\") {\n    return [CONTINUE, value];\n  }\n  return value === null || value === void 0 ? empty : [value];\n}\nfunction findAndReplace(tree, list2, options) {\n  const settings = options || {};\n  const ignored = convert(settings.ignore || []);\n  const pairs = toPairs(list2);\n  let pairIndex = -1;\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, \"text\", visitor);\n  }\n  function visitor(node2, parents) {\n    let index = -1;\n    let grandparent;\n    while (++index < parents.length) {\n      const parent = parents[index];\n      const siblings = grandparent ? grandparent.children : void 0;\n      if (ignored(\n        parent,\n        siblings ? siblings.indexOf(parent) : void 0,\n        grandparent\n      )) {\n        return;\n      }\n      grandparent = parent;\n    }\n    if (grandparent) {\n      return handler(node2, parents);\n    }\n  }\n  function handler(node2, parents) {\n    const parent = parents[parents.length - 1];\n    const find = pairs[pairIndex][0];\n    const replace2 = pairs[pairIndex][1];\n    let start = 0;\n    const siblings = parent.children;\n    const index = siblings.indexOf(node2);\n    let change = false;\n    let nodes = [];\n    find.lastIndex = 0;\n    let match = find.exec(node2.value);\n    while (match) {\n      const position = match.index;\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node2]\n      };\n      let value = replace2(...match, matchObject);\n      if (typeof value === \"string\") {\n        value = value.length > 0 ? { type: \"text\", value } : void 0;\n      }\n      if (value === false) {\n        find.lastIndex = position + 1;\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: \"text\",\n            value: node2.value.slice(start, position)\n          });\n        }\n        if (Array.isArray(value)) {\n          nodes.push(...value);\n        } else if (value) {\n          nodes.push(value);\n        }\n        start = position + match[0].length;\n        change = true;\n      }\n      if (!find.global) {\n        break;\n      }\n      match = find.exec(node2.value);\n    }\n    if (change) {\n      if (start < node2.value.length) {\n        nodes.push({ type: \"text\", value: node2.value.slice(start) });\n      }\n      parent.children.splice(index, 1, ...nodes);\n    } else {\n      nodes = [node2];\n    }\n    return index + nodes.length;\n  }\n}\nfunction toPairs(tupleOrList) {\n  const result = [];\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError(\"Expected find and replace tuple or list of tuples\");\n  }\n  const list2 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];\n  let index = -1;\n  while (++index < list2.length) {\n    const tuple = list2[index];\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])]);\n  }\n  return result;\n}\nfunction toExpression(find) {\n  return typeof find === \"string\" ? new RegExp(escapeStringRegexp(find), \"g\") : find;\n}\nfunction toFunction(replace2) {\n  return typeof replace2 === \"function\" ? replace2 : function() {\n    return replace2;\n  };\n}\nconst inConstruct = \"phrasing\";\nconst notInConstruct = [\"autolink\", \"link\", \"image\", \"label\"];\nfunction gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  };\n}\nfunction gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: \"@\",\n        before: \"[+\\\\-.\\\\w]\",\n        after: \"[\\\\-.\\\\w]\",\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: \".\",\n        before: \"[Ww]\",\n        after: \"[\\\\-.\\\\w]\",\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: \":\",\n        before: \"[ps]\",\n        after: \"\\\\/\",\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  };\n}\nfunction enterLiteralAutolink(token) {\n  this.enter({ type: \"link\", title: null, url: \"\", children: [] }, token);\n}\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token);\n}\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token);\n}\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token);\n  const node2 = this.stack[this.stack.length - 1];\n  ok$1(node2.type === \"link\");\n  node2.url = \"http://\" + this.sliceSerialize(token);\n}\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token);\n}\nfunction exitLiteralAutolink(token) {\n  this.exit(token);\n}\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    { ignore: [\"link\", \"linkReference\"] }\n  );\n}\nfunction findUrl(_, protocol, domain2, path2, match) {\n  let prefix = \"\";\n  if (!previous(match)) {\n    return false;\n  }\n  if (/^w/i.test(protocol)) {\n    domain2 = protocol + domain2;\n    protocol = \"\";\n    prefix = \"http://\";\n  }\n  if (!isCorrectDomain(domain2)) {\n    return false;\n  }\n  const parts = splitUrl(domain2 + path2);\n  if (!parts[0]) return false;\n  const result = {\n    type: \"link\",\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{ type: \"text\", value: protocol + parts[0] }]\n  };\n  if (parts[1]) {\n    return [result, { type: \"text\", value: parts[1] }];\n  }\n  return result;\n}\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) || // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false;\n  }\n  return {\n    type: \"link\",\n    title: null,\n    url: \"mailto:\" + atext + \"@\" + label,\n    children: [{ type: \"text\", value: atext + \"@\" + label }]\n  };\n}\nfunction isCorrectDomain(domain2) {\n  const parts = domain2.split(\".\");\n  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 2]))) {\n    return false;\n  }\n  return true;\n}\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url);\n  if (!trailExec) {\n    return [url, void 0];\n  }\n  url = url.slice(0, trailExec.index);\n  let trail2 = trailExec[0];\n  let closingParenIndex = trail2.indexOf(\")\");\n  const openingParens = ccount(url, \"(\");\n  let closingParens = ccount(url, \")\");\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail2.slice(0, closingParenIndex + 1);\n    trail2 = trail2.slice(closingParenIndex + 1);\n    closingParenIndex = trail2.indexOf(\")\");\n    closingParens++;\n  }\n  return [url, trail2];\n}\nfunction previous(match, email) {\n  const code2 = match.input.charCodeAt(match.index - 1);\n  return (match.index === 0 || unicodeWhitespace(code2) || unicodePunctuation(code2)) && (!email || code2 !== 47);\n}\nfunction normalizeIdentifier(value) {\n  return value.replace(/[\\t\\n\\r ]+/g, \" \").replace(/^ | $/g, \"\").toLowerCase().toUpperCase();\n}\nfootnoteReference.peek = footnoteReferencePeek;\nfunction enterFootnoteCallString() {\n  this.buffer();\n}\nfunction enterFootnoteCall(token) {\n  this.enter({ type: \"footnoteReference\", identifier: \"\", label: \"\" }, token);\n}\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer();\n}\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    { type: \"footnoteDefinition\", identifier: \"\", label: \"\", children: [] },\n    token\n  );\n}\nfunction exitFootnoteCallString(token) {\n  const label = this.resume();\n  const node2 = this.stack[this.stack.length - 1];\n  ok$1(node2.type === \"footnoteReference\");\n  node2.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase();\n  node2.label = label;\n}\nfunction exitFootnoteCall(token) {\n  this.exit(token);\n}\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume();\n  const node2 = this.stack[this.stack.length - 1];\n  ok$1(node2.type === \"footnoteDefinition\");\n  node2.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase();\n  node2.label = label;\n}\nfunction exitFootnoteDefinition(token) {\n  this.exit(token);\n}\nfunction footnoteReferencePeek() {\n  return \"[\";\n}\nfunction footnoteReference(node2, _, state, info) {\n  const tracker = state.createTracker(info);\n  let value = tracker.move(\"[^\");\n  const exit2 = state.enter(\"footnoteReference\");\n  const subexit = state.enter(\"reference\");\n  value += tracker.move(\n    state.safe(state.associationId(node2), { after: \"]\", before: value })\n  );\n  subexit();\n  exit2();\n  value += tracker.move(\"]\");\n  return value;\n}\nfunction gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  };\n}\nfunction gfmFootnoteToMarkdown(options) {\n  let firstLineBlank = false;\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true;\n  }\n  return {\n    handlers: { footnoteDefinition, footnoteReference },\n    // This is on by default already.\n    unsafe: [{ character: \"[\", inConstruct: [\"label\", \"phrasing\", \"reference\"] }]\n  };\n  function footnoteDefinition(node2, _, state, info) {\n    const tracker = state.createTracker(info);\n    let value = tracker.move(\"[^\");\n    const exit2 = state.enter(\"footnoteDefinition\");\n    const subexit = state.enter(\"label\");\n    value += tracker.move(\n      state.safe(state.associationId(node2), { before: value, after: \"]\" })\n    );\n    subexit();\n    value += tracker.move(\"]:\");\n    if (node2.children && node2.children.length > 0) {\n      tracker.shift(4);\n      value += tracker.move(\n        (firstLineBlank ? \"\\n\" : \" \") + state.indentLines(\n          state.containerFlow(node2, tracker.current()),\n          firstLineBlank ? mapAll : mapExceptFirst\n        )\n      );\n    }\n    exit2();\n    return value;\n  }\n}\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank);\n}\nfunction mapAll(line, index, blank) {\n  return (blank ? \"\" : \"    \") + line;\n}\nconst constructsWithoutStrikethrough = [\n  \"autolink\",\n  \"destinationLiteral\",\n  \"destinationRaw\",\n  \"reference\",\n  \"titleQuote\",\n  \"titleApostrophe\"\n];\nhandleDelete.peek = peekDelete;\nfunction gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: [\"delete\"],\n    enter: { strikethrough: enterStrikethrough },\n    exit: { strikethrough: exitStrikethrough }\n  };\n}\nfunction gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: \"~\",\n        inConstruct: \"phrasing\",\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: { delete: handleDelete }\n  };\n}\nfunction enterStrikethrough(token) {\n  this.enter({ type: \"delete\", children: [] }, token);\n}\nfunction exitStrikethrough(token) {\n  this.exit(token);\n}\nfunction handleDelete(node2, _, state, info) {\n  const tracker = state.createTracker(info);\n  const exit2 = state.enter(\"strikethrough\");\n  let value = tracker.move(\"~~\");\n  value += state.containerPhrasing(node2, {\n    ...tracker.current(),\n    before: value,\n    after: \"~\"\n  });\n  value += tracker.move(\"~~\");\n  exit2();\n  return value;\n}\nfunction peekDelete() {\n  return \"~\";\n}\nfunction defaultStringLength(value) {\n  return value.length;\n}\nfunction markdownTable(table, options) {\n  const settings = options || {};\n  const align = (settings.align || []).concat();\n  const stringLength = settings.stringLength || defaultStringLength;\n  const alignments = [];\n  const cellMatrix = [];\n  const sizeMatrix = [];\n  const longestCellByColumn = [];\n  let mostCellsPerRow = 0;\n  let rowIndex = -1;\n  while (++rowIndex < table.length) {\n    const row2 = [];\n    const sizes2 = [];\n    let columnIndex2 = -1;\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length;\n    }\n    while (++columnIndex2 < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex2]);\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell);\n        sizes2[columnIndex2] = size;\n        if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) {\n          longestCellByColumn[columnIndex2] = size;\n        }\n      }\n      row2.push(cell);\n    }\n    cellMatrix[rowIndex] = row2;\n    sizeMatrix[rowIndex] = sizes2;\n  }\n  let columnIndex = -1;\n  if (typeof align === \"object\" && \"length\" in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex]);\n    }\n  } else {\n    const code2 = toAlignment(align);\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code2;\n    }\n  }\n  columnIndex = -1;\n  const row = [];\n  const sizes = [];\n  while (++columnIndex < mostCellsPerRow) {\n    const code2 = alignments[columnIndex];\n    let before = \"\";\n    let after = \"\";\n    if (code2 === 99) {\n      before = \":\";\n      after = \":\";\n    } else if (code2 === 108) {\n      before = \":\";\n    } else if (code2 === 114) {\n      after = \":\";\n    }\n    let size = settings.alignDelimiters === false ? 1 : Math.max(\n      1,\n      longestCellByColumn[columnIndex] - before.length - after.length\n    );\n    const cell = before + \"-\".repeat(size) + after;\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length;\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size;\n      }\n      sizes[columnIndex] = size;\n    }\n    row[columnIndex] = cell;\n  }\n  cellMatrix.splice(1, 0, row);\n  sizeMatrix.splice(1, 0, sizes);\n  rowIndex = -1;\n  const lines = [];\n  while (++rowIndex < cellMatrix.length) {\n    const row2 = cellMatrix[rowIndex];\n    const sizes2 = sizeMatrix[rowIndex];\n    columnIndex = -1;\n    const line = [];\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row2[columnIndex] || \"\";\n      let before = \"\";\n      let after = \"\";\n      if (settings.alignDelimiters !== false) {\n        const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);\n        const code2 = alignments[columnIndex];\n        if (code2 === 114) {\n          before = \" \".repeat(size);\n        } else if (code2 === 99) {\n          if (size % 2) {\n            before = \" \".repeat(size / 2 + 0.5);\n            after = \" \".repeat(size / 2 - 0.5);\n          } else {\n            before = \" \".repeat(size / 2);\n            after = before;\n          }\n        } else {\n          after = \" \".repeat(size);\n        }\n      }\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push(\"|\");\n      }\n      if (settings.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is\n      // empty: there will be a closing space.\n      !(settings.alignDelimiters === false && cell === \"\") && (settings.delimiterStart !== false || columnIndex)) {\n        line.push(\" \");\n      }\n      if (settings.alignDelimiters !== false) {\n        line.push(before);\n      }\n      line.push(cell);\n      if (settings.alignDelimiters !== false) {\n        line.push(after);\n      }\n      if (settings.padding !== false) {\n        line.push(\" \");\n      }\n      if (settings.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {\n        line.push(\"|\");\n      }\n    }\n    lines.push(\n      settings.delimiterEnd === false ? line.join(\"\").replace(/ +$/, \"\") : line.join(\"\")\n    );\n  }\n  return lines.join(\"\\n\");\n}\nfunction serialize(value) {\n  return value === null || value === void 0 ? \"\" : String(value);\n}\nfunction toAlignment(value) {\n  const code2 = typeof value === \"string\" ? value.codePointAt(0) : 0;\n  return code2 === 67 || code2 === 99 ? 99 : code2 === 76 || code2 === 108 ? 108 : code2 === 82 || code2 === 114 ? 114 : 0;\n}\nfunction blockquote(node2, _, state, info) {\n  const exit2 = state.enter(\"blockquote\");\n  const tracker = state.createTracker(info);\n  tracker.move(\"> \");\n  tracker.shift(2);\n  const value = state.indentLines(\n    state.containerFlow(node2, tracker.current()),\n    map$1\n  );\n  exit2();\n  return value;\n}\nfunction map$1(line, _, blank) {\n  return \">\" + (blank ? \"\" : \" \") + line;\n}\nfunction patternInScope(stack, pattern) {\n  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);\n}\nfunction listInScope(stack, list2, none) {\n  if (typeof list2 === \"string\") {\n    list2 = [list2];\n  }\n  if (!list2 || list2.length === 0) {\n    return none;\n  }\n  let index = -1;\n  while (++index < list2.length) {\n    if (stack.includes(list2[index])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction hardBreak(_, _1, state, info) {\n  let index = -1;\n  while (++index < state.unsafe.length) {\n    if (state.unsafe[index].character === \"\\n\" && patternInScope(state.stack, state.unsafe[index])) {\n      return /[ \\t]/.test(info.before) ? \"\" : \" \";\n    }\n  }\n  return \"\\\\\\n\";\n}\nfunction longestStreak(value, substring) {\n  const source = String(value);\n  let index = source.indexOf(substring);\n  let expected = index;\n  let count = 0;\n  let max = 0;\n  if (typeof substring !== \"string\") {\n    throw new TypeError(\"Expected substring\");\n  }\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count;\n      }\n    } else {\n      count = 1;\n    }\n    expected = index + substring.length;\n    index = source.indexOf(substring, expected);\n  }\n  return max;\n}\nfunction formatCodeAsIndented(node2, state) {\n  return Boolean(\n    state.options.fences === false && node2.value && // If there’s no info…\n    !node2.lang && // And there’s a non-whitespace character…\n    /[^ \\r\\n]/.test(node2.value) && // And the value doesn’t start or end in a blank…\n    !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node2.value)\n  );\n}\nfunction checkFence(state) {\n  const marker = state.options.fence || \"`\";\n  if (marker !== \"`\" && marker !== \"~\") {\n    throw new Error(\n      \"Cannot serialize code with `\" + marker + \"` for `options.fence`, expected `` ` `` or `~`\"\n    );\n  }\n  return marker;\n}\nfunction code$1(node2, _, state, info) {\n  const marker = checkFence(state);\n  const raw = node2.value || \"\";\n  const suffix = marker === \"`\" ? \"GraveAccent\" : \"Tilde\";\n  if (formatCodeAsIndented(node2, state)) {\n    const exit3 = state.enter(\"codeIndented\");\n    const value2 = state.indentLines(raw, map);\n    exit3();\n    return value2;\n  }\n  const tracker = state.createTracker(info);\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));\n  const exit2 = state.enter(\"codeFenced\");\n  let value = tracker.move(sequence);\n  if (node2.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`);\n    value += tracker.move(\n      state.safe(node2.lang, {\n        before: value,\n        after: \" \",\n        encode: [\"`\"],\n        ...tracker.current()\n      })\n    );\n    subexit();\n  }\n  if (node2.lang && node2.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`);\n    value += tracker.move(\" \");\n    value += tracker.move(\n      state.safe(node2.meta, {\n        before: value,\n        after: \"\\n\",\n        encode: [\"`\"],\n        ...tracker.current()\n      })\n    );\n    subexit();\n  }\n  value += tracker.move(\"\\n\");\n  if (raw) {\n    value += tracker.move(raw + \"\\n\");\n  }\n  value += tracker.move(sequence);\n  exit2();\n  return value;\n}\nfunction map(line, _, blank) {\n  return (blank ? \"\" : \"    \") + line;\n}\nfunction checkQuote(state) {\n  const marker = state.options.quote || '\"';\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      \"Cannot serialize title with `\" + marker + \"` for `options.quote`, expected `\\\"`, or `'`\"\n    );\n  }\n  return marker;\n}\nfunction definition(node2, _, state, info) {\n  const quote = checkQuote(state);\n  const suffix = quote === '\"' ? \"Quote\" : \"Apostrophe\";\n  const exit2 = state.enter(\"definition\");\n  let subexit = state.enter(\"label\");\n  const tracker = state.createTracker(info);\n  let value = tracker.move(\"[\");\n  value += tracker.move(\n    state.safe(state.associationId(node2), {\n      before: value,\n      after: \"]\",\n      ...tracker.current()\n    })\n  );\n  value += tracker.move(\"]: \");\n  subexit();\n  if (\n    // If there’s no url, or…\n    !node2.url || // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node2.url)\n  ) {\n    subexit = state.enter(\"destinationLiteral\");\n    value += tracker.move(\"<\");\n    value += tracker.move(\n      state.safe(node2.url, { before: value, after: \">\", ...tracker.current() })\n    );\n    value += tracker.move(\">\");\n  } else {\n    subexit = state.enter(\"destinationRaw\");\n    value += tracker.move(\n      state.safe(node2.url, {\n        before: value,\n        after: node2.title ? \" \" : \"\\n\",\n        ...tracker.current()\n      })\n    );\n  }\n  subexit();\n  if (node2.title) {\n    subexit = state.enter(`title${suffix}`);\n    value += tracker.move(\" \" + quote);\n    value += tracker.move(\n      state.safe(node2.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    );\n    value += tracker.move(quote);\n    subexit();\n  }\n  exit2();\n  return value;\n}\nfunction checkEmphasis(state) {\n  const marker = state.options.emphasis || \"*\";\n  if (marker !== \"*\" && marker !== \"_\") {\n    throw new Error(\n      \"Cannot serialize emphasis with `\" + marker + \"` for `options.emphasis`, expected `*`, or `_`\"\n    );\n  }\n  return marker;\n}\nfunction encodeCharacterReference(code2) {\n  return \"&#x\" + code2.toString(16).toUpperCase() + \";\";\n}\nfunction classifyCharacter(code2) {\n  if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {\n    return 1;\n  }\n  if (unicodePunctuation(code2)) {\n    return 2;\n  }\n}\nfunction encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside);\n  const insideKind = classifyCharacter(inside);\n  if (outsideKind === void 0) {\n    return insideKind === void 0 ? (\n      // Letter inside:\n      // we have to encode *both* letters for `_` as it is looser.\n      // it already forms for `*` (and GFMs `~`).\n      marker === \"_\" ? { inside: true, outside: true } : { inside: false, outside: false }\n    ) : insideKind === 1 ? (\n      // Whitespace inside: encode both (letter, whitespace).\n      { inside: true, outside: true }\n    ) : (\n      // Punctuation inside: encode outer (letter)\n      { inside: false, outside: true }\n    );\n  }\n  if (outsideKind === 1) {\n    return insideKind === void 0 ? (\n      // Letter inside: already forms.\n      { inside: false, outside: false }\n    ) : insideKind === 1 ? (\n      // Whitespace inside: encode both (whitespace).\n      { inside: true, outside: true }\n    ) : (\n      // Punctuation inside: already forms.\n      { inside: false, outside: false }\n    );\n  }\n  return insideKind === void 0 ? (\n    // Letter inside: already forms.\n    { inside: false, outside: false }\n  ) : insideKind === 1 ? (\n    // Whitespace inside: encode inner (whitespace).\n    { inside: true, outside: false }\n  ) : (\n    // Punctuation inside: already forms.\n    { inside: false, outside: false }\n  );\n}\nemphasis.peek = emphasisPeek;\nfunction emphasis(node2, _, state, info) {\n  const marker = checkEmphasis(state);\n  const exit2 = state.enter(\"emphasis\");\n  const tracker = state.createTracker(info);\n  const before = tracker.move(marker);\n  let between = tracker.move(\n    state.containerPhrasing(node2, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  );\n  const betweenHead = between.charCodeAt(0);\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  );\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1);\n  }\n  const betweenTail = between.charCodeAt(between.length - 1);\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);\n  }\n  const after = tracker.move(marker);\n  exit2();\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  };\n  return before + between + after;\n}\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || \"*\";\n}\nconst emptyOptions$1 = {};\nfunction toString(value, options) {\n  const settings = emptyOptions$1;\n  const includeImageAlt = typeof settings.includeImageAlt === \"boolean\" ? settings.includeImageAlt : true;\n  const includeHtml = typeof settings.includeHtml === \"boolean\" ? settings.includeHtml : true;\n  return one(value, includeImageAlt, includeHtml);\n}\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if (\"value\" in value) {\n      return value.type === \"html\" && !includeHtml ? \"\" : value.value;\n    }\n    if (includeImageAlt && \"alt\" in value && value.alt) {\n      return value.alt;\n    }\n    if (\"children\" in value) {\n      return all(value.children, includeImageAlt, includeHtml);\n    }\n  }\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml);\n  }\n  return \"\";\n}\nfunction all(values, includeImageAlt, includeHtml) {\n  const result = [];\n  let index = -1;\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml);\n  }\n  return result.join(\"\");\n}\nfunction node(value) {\n  return Boolean(value && typeof value === \"object\");\n}\nfunction formatHeadingAsSetext(node2, state) {\n  let literalWithBreak = false;\n  visit(node2, function(node3) {\n    if (\"value\" in node3 && /\\r?\\n|\\r/.test(node3.value) || node3.type === \"break\") {\n      literalWithBreak = true;\n      return EXIT$1;\n    }\n  });\n  return Boolean(\n    (!node2.depth || node2.depth < 3) && toString(node2) && (state.options.setext || literalWithBreak)\n  );\n}\nfunction heading(node2, _, state, info) {\n  const rank = Math.max(Math.min(6, node2.depth || 1), 1);\n  const tracker = state.createTracker(info);\n  if (formatHeadingAsSetext(node2, state)) {\n    const exit3 = state.enter(\"headingSetext\");\n    const subexit2 = state.enter(\"phrasing\");\n    const value2 = state.containerPhrasing(node2, {\n      ...tracker.current(),\n      before: \"\\n\",\n      after: \"\\n\"\n    });\n    subexit2();\n    exit3();\n    return value2 + \"\\n\" + (rank === 1 ? \"=\" : \"-\").repeat(\n      // The whole size…\n      value2.length - // Minus the position of the character after the last EOL (or\n      // 0 if there is none)…\n      (Math.max(value2.lastIndexOf(\"\\r\"), value2.lastIndexOf(\"\\n\")) + 1)\n    );\n  }\n  const sequence = \"#\".repeat(rank);\n  const exit2 = state.enter(\"headingAtx\");\n  const subexit = state.enter(\"phrasing\");\n  tracker.move(sequence + \" \");\n  let value = state.containerPhrasing(node2, {\n    before: \"# \",\n    after: \"\\n\",\n    ...tracker.current()\n  });\n  if (/^[\\t ]/.test(value)) {\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1);\n  }\n  value = value ? sequence + \" \" + value : sequence;\n  if (state.options.closeAtx) {\n    value += \" \" + sequence;\n  }\n  subexit();\n  exit2();\n  return value;\n}\nhtml.peek = htmlPeek;\nfunction html(node2) {\n  return node2.value || \"\";\n}\nfunction htmlPeek() {\n  return \"<\";\n}\nimage.peek = imagePeek;\nfunction image(node2, _, state, info) {\n  const quote = checkQuote(state);\n  const suffix = quote === '\"' ? \"Quote\" : \"Apostrophe\";\n  const exit2 = state.enter(\"image\");\n  let subexit = state.enter(\"label\");\n  const tracker = state.createTracker(info);\n  let value = tracker.move(\"![\");\n  value += tracker.move(\n    state.safe(node2.alt, { before: value, after: \"]\", ...tracker.current() })\n  );\n  value += tracker.move(\"](\");\n  subexit();\n  if (\n    // If there’s no url but there is a title…\n    !node2.url && node2.title || // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node2.url)\n  ) {\n    subexit = state.enter(\"destinationLiteral\");\n    value += tracker.move(\"<\");\n    value += tracker.move(\n      state.safe(node2.url, { before: value, after: \">\", ...tracker.current() })\n    );\n    value += tracker.move(\">\");\n  } else {\n    subexit = state.enter(\"destinationRaw\");\n    value += tracker.move(\n      state.safe(node2.url, {\n        before: value,\n        after: node2.title ? \" \" : \")\",\n        ...tracker.current()\n      })\n    );\n  }\n  subexit();\n  if (node2.title) {\n    subexit = state.enter(`title${suffix}`);\n    value += tracker.move(\" \" + quote);\n    value += tracker.move(\n      state.safe(node2.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    );\n    value += tracker.move(quote);\n    subexit();\n  }\n  value += tracker.move(\")\");\n  exit2();\n  return value;\n}\nfunction imagePeek() {\n  return \"!\";\n}\nimageReference.peek = imageReferencePeek;\nfunction imageReference(node2, _, state, info) {\n  const type = node2.referenceType;\n  const exit2 = state.enter(\"imageReference\");\n  let subexit = state.enter(\"label\");\n  const tracker = state.createTracker(info);\n  let value = tracker.move(\"![\");\n  const alt = state.safe(node2.alt, {\n    before: value,\n    after: \"]\",\n    ...tracker.current()\n  });\n  value += tracker.move(alt + \"][\");\n  subexit();\n  const stack = state.stack;\n  state.stack = [];\n  subexit = state.enter(\"reference\");\n  const reference = state.safe(state.associationId(node2), {\n    before: value,\n    after: \"]\",\n    ...tracker.current()\n  });\n  subexit();\n  state.stack = stack;\n  exit2();\n  if (type === \"full\" || !alt || alt !== reference) {\n    value += tracker.move(reference + \"]\");\n  } else if (type === \"shortcut\") {\n    value = value.slice(0, -1);\n  } else {\n    value += tracker.move(\"]\");\n  }\n  return value;\n}\nfunction imageReferencePeek() {\n  return \"!\";\n}\ninlineCode.peek = inlineCodePeek;\nfunction inlineCode(node2, _, state) {\n  let value = node2.value || \"\";\n  let sequence = \"`\";\n  let index = -1;\n  while (new RegExp(\"(^|[^`])\" + sequence + \"([^`]|$)\").test(value)) {\n    sequence += \"`\";\n  }\n  if (/[^ \\r\\n]/.test(value) && (/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value) || /^`|`$/.test(value))) {\n    value = \" \" + value + \" \";\n  }\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index];\n    const expression = state.compilePattern(pattern);\n    let match;\n    if (!pattern.atBreak) continue;\n    while (match = expression.exec(value)) {\n      let position = match.index;\n      if (value.charCodeAt(position) === 10 && value.charCodeAt(position - 1) === 13) {\n        position--;\n      }\n      value = value.slice(0, position) + \" \" + value.slice(match.index + 1);\n    }\n  }\n  return sequence + value + sequence;\n}\nfunction inlineCodePeek() {\n  return \"`\";\n}\nfunction formatLinkAsAutolink(node2, state) {\n  const raw = toString(node2);\n  return Boolean(\n    !state.options.resourceLink && // If there’s a url…\n    node2.url && // And there’s a no title…\n    !node2.title && // And the content of `node` is a single text node…\n    node2.children && node2.children.length === 1 && node2.children[0].type === \"text\" && // And if the url is the same as the content…\n    (raw === node2.url || \"mailto:\" + raw === node2.url) && // And that starts w/ a protocol…\n    /^[a-z][a-z+.-]+:/i.test(node2.url) && // And that doesn’t contain ASCII control codes (character escapes and\n    // references don’t work), space, or angle brackets…\n    !/[\\0- <>\\u007F]/.test(node2.url)\n  );\n}\nlink.peek = linkPeek;\nfunction link(node2, _, state, info) {\n  const quote = checkQuote(state);\n  const suffix = quote === '\"' ? \"Quote\" : \"Apostrophe\";\n  const tracker = state.createTracker(info);\n  let exit2;\n  let subexit;\n  if (formatLinkAsAutolink(node2, state)) {\n    const stack = state.stack;\n    state.stack = [];\n    exit2 = state.enter(\"autolink\");\n    let value2 = tracker.move(\"<\");\n    value2 += tracker.move(\n      state.containerPhrasing(node2, {\n        before: value2,\n        after: \">\",\n        ...tracker.current()\n      })\n    );\n    value2 += tracker.move(\">\");\n    exit2();\n    state.stack = stack;\n    return value2;\n  }\n  exit2 = state.enter(\"link\");\n  subexit = state.enter(\"label\");\n  let value = tracker.move(\"[\");\n  value += tracker.move(\n    state.containerPhrasing(node2, {\n      before: value,\n      after: \"](\",\n      ...tracker.current()\n    })\n  );\n  value += tracker.move(\"](\");\n  subexit();\n  if (\n    // If there’s no url but there is a title…\n    !node2.url && node2.title || // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node2.url)\n  ) {\n    subexit = state.enter(\"destinationLiteral\");\n    value += tracker.move(\"<\");\n    value += tracker.move(\n      state.safe(node2.url, { before: value, after: \">\", ...tracker.current() })\n    );\n    value += tracker.move(\">\");\n  } else {\n    subexit = state.enter(\"destinationRaw\");\n    value += tracker.move(\n      state.safe(node2.url, {\n        before: value,\n        after: node2.title ? \" \" : \")\",\n        ...tracker.current()\n      })\n    );\n  }\n  subexit();\n  if (node2.title) {\n    subexit = state.enter(`title${suffix}`);\n    value += tracker.move(\" \" + quote);\n    value += tracker.move(\n      state.safe(node2.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    );\n    value += tracker.move(quote);\n    subexit();\n  }\n  value += tracker.move(\")\");\n  exit2();\n  return value;\n}\nfunction linkPeek(node2, _, state) {\n  return formatLinkAsAutolink(node2, state) ? \"<\" : \"[\";\n}\nlinkReference.peek = linkReferencePeek;\nfunction linkReference(node2, _, state, info) {\n  const type = node2.referenceType;\n  const exit2 = state.enter(\"linkReference\");\n  let subexit = state.enter(\"label\");\n  const tracker = state.createTracker(info);\n  let value = tracker.move(\"[\");\n  const text2 = state.containerPhrasing(node2, {\n    before: value,\n    after: \"]\",\n    ...tracker.current()\n  });\n  value += tracker.move(text2 + \"][\");\n  subexit();\n  const stack = state.stack;\n  state.stack = [];\n  subexit = state.enter(\"reference\");\n  const reference = state.safe(state.associationId(node2), {\n    before: value,\n    after: \"]\",\n    ...tracker.current()\n  });\n  subexit();\n  state.stack = stack;\n  exit2();\n  if (type === \"full\" || !text2 || text2 !== reference) {\n    value += tracker.move(reference + \"]\");\n  } else if (type === \"shortcut\") {\n    value = value.slice(0, -1);\n  } else {\n    value += tracker.move(\"]\");\n  }\n  return value;\n}\nfunction linkReferencePeek() {\n  return \"[\";\n}\nfunction checkBullet(state) {\n  const marker = state.options.bullet || \"*\";\n  if (marker !== \"*\" && marker !== \"+\" && marker !== \"-\") {\n    throw new Error(\n      \"Cannot serialize items with `\" + marker + \"` for `options.bullet`, expected `*`, `+`, or `-`\"\n    );\n  }\n  return marker;\n}\nfunction checkBulletOther(state) {\n  const bullet = checkBullet(state);\n  const bulletOther = state.options.bulletOther;\n  if (!bulletOther) {\n    return bullet === \"*\" ? \"-\" : \"*\";\n  }\n  if (bulletOther !== \"*\" && bulletOther !== \"+\" && bulletOther !== \"-\") {\n    throw new Error(\n      \"Cannot serialize items with `\" + bulletOther + \"` for `options.bulletOther`, expected `*`, `+`, or `-`\"\n    );\n  }\n  if (bulletOther === bullet) {\n    throw new Error(\n      \"Expected `bullet` (`\" + bullet + \"`) and `bulletOther` (`\" + bulletOther + \"`) to be different\"\n    );\n  }\n  return bulletOther;\n}\nfunction checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || \".\";\n  if (marker !== \".\" && marker !== \")\") {\n    throw new Error(\n      \"Cannot serialize items with `\" + marker + \"` for `options.bulletOrdered`, expected `.` or `)`\"\n    );\n  }\n  return marker;\n}\nfunction checkRule(state) {\n  const marker = state.options.rule || \"*\";\n  if (marker !== \"*\" && marker !== \"-\" && marker !== \"_\") {\n    throw new Error(\n      \"Cannot serialize rules with `\" + marker + \"` for `options.rule`, expected `*`, `-`, or `_`\"\n    );\n  }\n  return marker;\n}\nfunction list(node2, parent, state, info) {\n  const exit2 = state.enter(\"list\");\n  const bulletCurrent = state.bulletCurrent;\n  let bullet = node2.ordered ? checkBulletOrdered(state) : checkBullet(state);\n  const bulletOther = node2.ordered ? bullet === \".\" ? \")\" : \".\" : checkBulletOther(state);\n  let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;\n  if (!node2.ordered) {\n    const firstListItem = node2.children ? node2.children[0] : void 0;\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === \"*\" || bullet === \"-\") && // Empty first list item:\n      firstListItem && (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:\n      state.stack[state.stack.length - 1] === \"list\" && state.stack[state.stack.length - 2] === \"listItem\" && state.stack[state.stack.length - 3] === \"list\" && state.stack[state.stack.length - 4] === \"listItem\" && // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true;\n    }\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1;\n      while (++index < node2.children.length) {\n        const item = node2.children[index];\n        if (item && item.type === \"listItem\" && item.children && item.children[0] && item.children[0].type === \"thematicBreak\") {\n          useDifferentMarker = true;\n          break;\n        }\n      }\n    }\n  }\n  if (useDifferentMarker) {\n    bullet = bulletOther;\n  }\n  state.bulletCurrent = bullet;\n  const value = state.containerFlow(node2, info);\n  state.bulletLastUsed = bullet;\n  state.bulletCurrent = bulletCurrent;\n  exit2();\n  return value;\n}\nfunction checkListItemIndent(state) {\n  const style = state.options.listItemIndent || \"one\";\n  if (style !== \"tab\" && style !== \"one\" && style !== \"mixed\") {\n    throw new Error(\n      \"Cannot serialize items with `\" + style + \"` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`\"\n    );\n  }\n  return style;\n}\nfunction listItem(node2, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state);\n  let bullet = state.bulletCurrent || checkBullet(state);\n  if (parent && parent.type === \"list\" && parent.ordered) {\n    bullet = (typeof parent.start === \"number\" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;\n  }\n  let size = bullet.length + 1;\n  if (listItemIndent === \"tab\" || listItemIndent === \"mixed\" && (parent && parent.type === \"list\" && parent.spread || node2.spread)) {\n    size = Math.ceil(size / 4) * 4;\n  }\n  const tracker = state.createTracker(info);\n  tracker.move(bullet + \" \".repeat(size - bullet.length));\n  tracker.shift(size);\n  const exit2 = state.enter(\"listItem\");\n  const value = state.indentLines(\n    state.containerFlow(node2, tracker.current()),\n    map2\n  );\n  exit2();\n  return value;\n  function map2(line, index, blank) {\n    if (index) {\n      return (blank ? \"\" : \" \".repeat(size)) + line;\n    }\n    return (blank ? bullet : bullet + \" \".repeat(size - bullet.length)) + line;\n  }\n}\nfunction paragraph(node2, _, state, info) {\n  const exit2 = state.enter(\"paragraph\");\n  const subexit = state.enter(\"phrasing\");\n  const value = state.containerPhrasing(node2, info);\n  subexit();\n  exit2();\n  return value;\n}\nconst phrasing = (\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  convert([\n    \"break\",\n    \"delete\",\n    \"emphasis\",\n    // To do: next major: removed since footnotes were added to GFM.\n    \"footnote\",\n    \"footnoteReference\",\n    \"image\",\n    \"imageReference\",\n    \"inlineCode\",\n    // Enabled by `mdast-util-math`:\n    \"inlineMath\",\n    \"link\",\n    \"linkReference\",\n    // Enabled by `mdast-util-mdx`:\n    \"mdxJsxTextElement\",\n    // Enabled by `mdast-util-mdx`:\n    \"mdxTextExpression\",\n    \"strong\",\n    \"text\",\n    // Enabled by `mdast-util-directive`:\n    \"textDirective\"\n  ])\n);\nfunction root(node2, _, state, info) {\n  const hasPhrasing = node2.children.some(function(d) {\n    return phrasing(d);\n  });\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow;\n  return container.call(state, node2, info);\n}\nfunction checkStrong(state) {\n  const marker = state.options.strong || \"*\";\n  if (marker !== \"*\" && marker !== \"_\") {\n    throw new Error(\n      \"Cannot serialize strong with `\" + marker + \"` for `options.strong`, expected `*`, or `_`\"\n    );\n  }\n  return marker;\n}\nstrong.peek = strongPeek;\nfunction strong(node2, _, state, info) {\n  const marker = checkStrong(state);\n  const exit2 = state.enter(\"strong\");\n  const tracker = state.createTracker(info);\n  const before = tracker.move(marker + marker);\n  let between = tracker.move(\n    state.containerPhrasing(node2, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  );\n  const betweenHead = between.charCodeAt(0);\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  );\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1);\n  }\n  const betweenTail = between.charCodeAt(between.length - 1);\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);\n  }\n  const after = tracker.move(marker + marker);\n  exit2();\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  };\n  return before + between + after;\n}\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || \"*\";\n}\nfunction text$1(node2, _, state, info) {\n  return state.safe(node2.value, info);\n}\nfunction checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3;\n  if (repetition < 3) {\n    throw new Error(\n      \"Cannot serialize rules with repetition `\" + repetition + \"` for `options.ruleRepetition`, expected `3` or more\"\n    );\n  }\n  return repetition;\n}\nfunction thematicBreak(_, _1, state) {\n  const value = (checkRule(state) + (state.options.ruleSpaces ? \" \" : \"\")).repeat(checkRuleRepetition(state));\n  return state.options.ruleSpaces ? value.slice(0, -1) : value;\n}\nconst handle = {\n  blockquote,\n  break: hardBreak,\n  code: code$1,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text: text$1,\n  thematicBreak\n};\nfunction gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  };\n}\nfunction enterTable(token) {\n  const align = token._align;\n  this.enter(\n    {\n      type: \"table\",\n      align: align.map(function(d) {\n        return d === \"none\" ? null : d;\n      }),\n      children: []\n    },\n    token\n  );\n  this.data.inTable = true;\n}\nfunction exitTable(token) {\n  this.exit(token);\n  this.data.inTable = void 0;\n}\nfunction enterRow(token) {\n  this.enter({ type: \"tableRow\", children: [] }, token);\n}\nfunction exit(token) {\n  this.exit(token);\n}\nfunction enterCell(token) {\n  this.enter({ type: \"tableCell\", children: [] }, token);\n}\nfunction exitCodeText(token) {\n  let value = this.resume();\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace);\n  }\n  const node2 = this.stack[this.stack.length - 1];\n  ok$1(node2.type === \"inlineCode\");\n  node2.value = value;\n  this.exit(token);\n}\nfunction replace($0, $1) {\n  return $1 === \"|\" ? $1 : $0;\n}\nfunction gfmTableToMarkdown(options) {\n  const settings = options || {};\n  const padding = settings.tableCellPadding;\n  const alignDelimiters = settings.tablePipeAlign;\n  const stringLength = settings.stringLength;\n  const around = padding ? \" \" : \"|\";\n  return {\n    unsafe: [\n      { character: \"\\r\", inConstruct: \"tableCell\" },\n      { character: \"\\n\", inConstruct: \"tableCell\" },\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      { atBreak: true, character: \"|\", after: \"[\t :-]\" },\n      // A pipe in a cell must be encoded.\n      { character: \"|\", inConstruct: \"tableCell\" },\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      { atBreak: true, character: \":\", after: \"-\" },\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      { atBreak: true, character: \"-\", after: \"[:|-]\" }\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  };\n  function handleTable(node2, _, state, info) {\n    return serializeData(handleTableAsData(node2, state, info), node2.align);\n  }\n  function handleTableRow(node2, _, state, info) {\n    const row = handleTableRowAsData(node2, state, info);\n    const value = serializeData([row]);\n    return value.slice(0, value.indexOf(\"\\n\"));\n  }\n  function handleTableCell(node2, _, state, info) {\n    const exit2 = state.enter(\"tableCell\");\n    const subexit = state.enter(\"phrasing\");\n    const value = state.containerPhrasing(node2, {\n      ...info,\n      before: around,\n      after: around\n    });\n    subexit();\n    exit2();\n    return value;\n  }\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    });\n  }\n  function handleTableAsData(node2, state, info) {\n    const children = node2.children;\n    let index = -1;\n    const result = [];\n    const subexit = state.enter(\"table\");\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info);\n    }\n    subexit();\n    return result;\n  }\n  function handleTableRowAsData(node2, state, info) {\n    const children = node2.children;\n    let index = -1;\n    const result = [];\n    const subexit = state.enter(\"tableRow\");\n    while (++index < children.length) {\n      result[index] = handleTableCell(children[index], node2, state, info);\n    }\n    subexit();\n    return result;\n  }\n  function inlineCodeWithTable(node2, parent, state) {\n    let value = handle.inlineCode(node2, parent, state);\n    if (state.stack.includes(\"tableCell\")) {\n      value = value.replace(/\\|/g, \"\\\\$&\");\n    }\n    return value;\n  }\n}\nfunction gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  };\n}\nfunction gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{ atBreak: true, character: \"-\", after: \"[:|-]\" }],\n    handlers: { listItem: listItemWithTaskListItem }\n  };\n}\nfunction exitCheck(token) {\n  const node2 = this.stack[this.stack.length - 2];\n  ok$1(node2.type === \"listItem\");\n  node2.checked = token.type === \"taskListCheckValueChecked\";\n}\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2];\n  if (parent && parent.type === \"listItem\" && typeof parent.checked === \"boolean\") {\n    const node2 = this.stack[this.stack.length - 1];\n    ok$1(node2.type === \"paragraph\");\n    const head = node2.children[0];\n    if (head && head.type === \"text\") {\n      const siblings = parent.children;\n      let index = -1;\n      let firstParaghraph;\n      while (++index < siblings.length) {\n        const sibling = siblings[index];\n        if (sibling.type === \"paragraph\") {\n          firstParaghraph = sibling;\n          break;\n        }\n      }\n      if (firstParaghraph === node2) {\n        head.value = head.value.slice(1);\n        if (head.value.length === 0) {\n          node2.children.shift();\n        } else if (node2.position && head.position && typeof head.position.start.offset === \"number\") {\n          head.position.start.column++;\n          head.position.start.offset++;\n          node2.position.start = Object.assign({}, head.position.start);\n        }\n      }\n    }\n  }\n  this.exit(token);\n}\nfunction listItemWithTaskListItem(node2, parent, state, info) {\n  const head = node2.children[0];\n  const checkable = typeof node2.checked === \"boolean\" && head && head.type === \"paragraph\";\n  const checkbox = \"[\" + (node2.checked ? \"x\" : \" \") + \"] \";\n  const tracker = state.createTracker(info);\n  if (checkable) {\n    tracker.move(checkbox);\n  }\n  let value = handle.listItem(node2, parent, state, {\n    ...info,\n    ...tracker.current()\n  });\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n  }\n  return value;\n  function check($0) {\n    return $0 + checkbox;\n  }\n}\nfunction gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ];\n}\nfunction gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  };\n}\nfunction splice(list2, start, remove, items) {\n  const end = list2.length;\n  let chunkStart = 0;\n  let parameters;\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n  if (items.length < 1e4) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    list2.splice(...parameters);\n  } else {\n    if (remove) list2.splice(start, remove);\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 1e4);\n      parameters.unshift(start, 0);\n      list2.splice(...parameters);\n      chunkStart += 1e4;\n      start += 1e4;\n    }\n  }\n}\nconst hasOwnProperty = {}.hasOwnProperty;\nfunction combineExtensions(extensions) {\n  const all2 = {};\n  let index = -1;\n  while (++index < extensions.length) {\n    syntaxExtension(all2, extensions[index]);\n  }\n  return all2;\n}\nfunction syntaxExtension(all2, extension) {\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;\n    const left = maybe || (all2[hook] = {});\n    const right = extension[hook];\n    let code2;\n    if (right) {\n      for (code2 in right) {\n        if (!hasOwnProperty.call(left, code2)) left[code2] = [];\n        const value = right[code2];\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code2],\n          Array.isArray(value) ? value : value ? [value] : []\n        );\n      }\n    }\n  }\n}\nfunction constructs(existing, list2) {\n  let index = -1;\n  const before = [];\n  while (++index < list2.length) {\n    (list2[index].add === \"after\" ? existing : before).push(list2[index]);\n  }\n  splice(existing, 0, 0, before);\n}\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: \"wwwAutolink\",\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: \"protocolAutolink\",\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: \"emailAutolink\",\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\nconst text = {};\nfunction gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\nlet code = 48;\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;\n  else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\nfunction tokenizeEmailAutolink(effects, ok2, nok) {\n  const self = this;\n  let dot;\n  let data;\n  return start;\n  function start(code2) {\n    if (!gfmAtext(code2) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code2);\n    }\n    effects.enter(\"literalAutolink\");\n    effects.enter(\"literalAutolinkEmail\");\n    return atext(code2);\n  }\n  function atext(code2) {\n    if (gfmAtext(code2)) {\n      effects.consume(code2);\n      return atext;\n    }\n    if (code2 === 64) {\n      effects.consume(code2);\n      return emailDomain;\n    }\n    return nok(code2);\n  }\n  function emailDomain(code2) {\n    if (code2 === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code2);\n    }\n    if (code2 === 45 || code2 === 95 || asciiAlphanumeric(code2)) {\n      data = true;\n      effects.consume(code2);\n      return emailDomain;\n    }\n    return emailDomainAfter(code2);\n  }\n  function emailDomainDot(code2) {\n    effects.consume(code2);\n    dot = true;\n    return emailDomain;\n  }\n  function emailDomainAfter(code2) {\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit(\"literalAutolinkEmail\");\n      effects.exit(\"literalAutolink\");\n      return ok2(code2);\n    }\n    return nok(code2);\n  }\n}\nfunction tokenizeWwwAutolink(effects, ok2, nok) {\n  const self = this;\n  return wwwStart;\n  function wwwStart(code2) {\n    if (code2 !== 87 && code2 !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code2);\n    }\n    effects.enter(\"literalAutolink\");\n    effects.enter(\"literalAutolinkWww\");\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code2);\n  }\n  function wwwAfter(code2) {\n    effects.exit(\"literalAutolinkWww\");\n    effects.exit(\"literalAutolink\");\n    return ok2(code2);\n  }\n}\nfunction tokenizeProtocolAutolink(effects, ok2, nok) {\n  const self = this;\n  let buffer = \"\";\n  let seen = false;\n  return protocolStart;\n  function protocolStart(code2) {\n    if ((code2 === 72 || code2 === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter(\"literalAutolink\");\n      effects.enter(\"literalAutolinkHttp\");\n      buffer += String.fromCodePoint(code2);\n      effects.consume(code2);\n      return protocolPrefixInside;\n    }\n    return nok(code2);\n  }\n  function protocolPrefixInside(code2) {\n    if (asciiAlpha(code2) && buffer.length < 5) {\n      buffer += String.fromCodePoint(code2);\n      effects.consume(code2);\n      return protocolPrefixInside;\n    }\n    if (code2 === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === \"http\" || protocol === \"https\") {\n        effects.consume(code2);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code2);\n  }\n  function protocolSlashesInside(code2) {\n    if (code2 === 47) {\n      effects.consume(code2);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code2);\n  }\n  function afterProtocol(code2) {\n    return code2 === null || asciiControl(code2) || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2) || unicodePunctuation(code2) ? nok(code2) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code2);\n  }\n  function protocolAfter(code2) {\n    effects.exit(\"literalAutolinkHttp\");\n    effects.exit(\"literalAutolink\");\n    return ok2(code2);\n  }\n}\nfunction tokenizeWwwPrefix(effects, ok2, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n  function wwwPrefixInside(code2) {\n    if ((code2 === 87 || code2 === 119) && size < 3) {\n      size++;\n      effects.consume(code2);\n      return wwwPrefixInside;\n    }\n    if (code2 === 46 && size === 3) {\n      effects.consume(code2);\n      return wwwPrefixAfter;\n    }\n    return nok(code2);\n  }\n  function wwwPrefixAfter(code2) {\n    return code2 === null ? nok(code2) : ok2(code2);\n  }\n}\nfunction tokenizeDomain(effects, ok2, nok) {\n  let underscoreInLastSegment;\n  let underscoreInLastLastSegment;\n  let seen;\n  return domainInside;\n  function domainInside(code2) {\n    if (code2 === 46 || code2 === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code2);\n    }\n    if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2) || code2 !== 45 && unicodePunctuation(code2)) {\n      return domainAfter(code2);\n    }\n    seen = true;\n    effects.consume(code2);\n    return domainInside;\n  }\n  function domainAtPunctuation(code2) {\n    if (code2 === 95) {\n      underscoreInLastSegment = true;\n    } else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = void 0;\n    }\n    effects.consume(code2);\n    return domainInside;\n  }\n  function domainAfter(code2) {\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code2);\n    }\n    return ok2(code2);\n  }\n}\nfunction tokenizePath(effects, ok2) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n  function pathInside(code2) {\n    if (code2 === 40) {\n      sizeOpen++;\n      effects.consume(code2);\n      return pathInside;\n    }\n    if (code2 === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code2);\n    }\n    if (code2 === 33 || code2 === 34 || code2 === 38 || code2 === 39 || code2 === 41 || code2 === 42 || code2 === 44 || code2 === 46 || code2 === 58 || code2 === 59 || code2 === 60 || code2 === 63 || code2 === 93 || code2 === 95 || code2 === 126) {\n      return effects.check(trail, ok2, pathAtPunctuation)(code2);\n    }\n    if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {\n      return ok2(code2);\n    }\n    effects.consume(code2);\n    return pathInside;\n  }\n  function pathAtPunctuation(code2) {\n    if (code2 === 41) {\n      sizeClose++;\n    }\n    effects.consume(code2);\n    return pathInside;\n  }\n}\nfunction tokenizeTrail(effects, ok2, nok) {\n  return trail2;\n  function trail2(code2) {\n    if (code2 === 33 || code2 === 34 || code2 === 39 || code2 === 41 || code2 === 42 || code2 === 44 || code2 === 46 || code2 === 58 || code2 === 59 || code2 === 63 || code2 === 95 || code2 === 126) {\n      effects.consume(code2);\n      return trail2;\n    }\n    if (code2 === 38) {\n      effects.consume(code2);\n      return trailCharacterReferenceStart;\n    }\n    if (code2 === 93) {\n      effects.consume(code2);\n      return trailBracketAfter;\n    }\n    if (\n      // `<` is an end.\n      code2 === 60 || // So is whitespace.\n      code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)\n    ) {\n      return ok2(code2);\n    }\n    return nok(code2);\n  }\n  function trailBracketAfter(code2) {\n    if (code2 === null || code2 === 40 || code2 === 91 || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {\n      return ok2(code2);\n    }\n    return trail2(code2);\n  }\n  function trailCharacterReferenceStart(code2) {\n    return asciiAlpha(code2) ? trailCharacterReferenceInside(code2) : nok(code2);\n  }\n  function trailCharacterReferenceInside(code2) {\n    if (code2 === 59) {\n      effects.consume(code2);\n      return trail2;\n    }\n    if (asciiAlpha(code2)) {\n      effects.consume(code2);\n      return trailCharacterReferenceInside;\n    }\n    return nok(code2);\n  }\n}\nfunction tokenizeEmailDomainDotTrail(effects, ok2, nok) {\n  return start;\n  function start(code2) {\n    effects.consume(code2);\n    return after;\n  }\n  function after(code2) {\n    return asciiAlphanumeric(code2) ? nok(code2) : ok2(code2);\n  }\n}\nfunction previousWww(code2) {\n  return code2 === null || code2 === 40 || code2 === 42 || code2 === 95 || code2 === 91 || code2 === 93 || code2 === 126 || markdownLineEndingOrSpace(code2);\n}\nfunction previousProtocol(code2) {\n  return !asciiAlpha(code2);\n}\nfunction previousEmail(code2) {\n  return !(code2 === 47 || gfmAtext(code2));\n}\nfunction gfmAtext(code2) {\n  return code2 === 43 || code2 === 45 || code2 === 46 || code2 === 95 || asciiAlphanumeric(code2);\n}\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === \"labelLink\" || token.type === \"labelImage\") && !token._balanced) {\n      result = true;\n      break;\n    }\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}\nfunction resolveAll(constructs2, events, context) {\n  const called = [];\n  let index = -1;\n  while (++index < constructs2.length) {\n    const resolve = constructs2[index].resolveAll;\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context);\n      called.push(resolve);\n    }\n  }\n  return events;\n}\nfunction factorySpace(effects, ok2, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n  function start(code2) {\n    if (markdownSpace(code2)) {\n      effects.enter(type);\n      return prefix(code2);\n    }\n    return ok2(code2);\n  }\n  function prefix(code2) {\n    if (markdownSpace(code2) && size++ < limit) {\n      effects.consume(code2);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok2(code2);\n  }\n}\nconst blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\nfunction tokenizeBlankLine(effects, ok2, nok) {\n  return start;\n  function start(code2) {\n    return markdownSpace(code2) ? factorySpace(effects, after, \"linePrefix\")(code2) : after(code2);\n  }\n  function after(code2) {\n    return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);\n  }\n}\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\nfunction gfmFootnote() {\n  return {\n    document: {\n      [91]: {\n        name: \"gfmFootnoteDefinition\",\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: \"gfmFootnoteCall\",\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: \"gfmPotentialFootnoteCall\",\n        add: \"after\",\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\nfunction tokenizePotentialGfmFootnoteCall(effects, ok2, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let labelStart;\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n    if (token.type === \"gfmFootnoteCall\" || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n  function start(code2) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code2);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code2);\n    }\n    effects.enter(\"gfmFootnoteCallLabelMarker\");\n    effects.consume(code2);\n    effects.exit(\"gfmFootnoteCallLabelMarker\");\n    return ok2(code2);\n  }\n}\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === \"enter\") {\n      events[index][1];\n      break;\n    }\n  }\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = \"gfmFootnoteCallLabelMarker\";\n  const call = {\n    type: \"gfmFootnoteCall\",\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const marker = {\n    type: \"gfmFootnoteCallMarker\",\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  const string = {\n    type: \"gfmFootnoteCallString\",\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  const chunk = {\n    type: \"chunkString\",\n    contentType: \"string\",\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    [\"enter\", call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    [\"enter\", marker, context],\n    [\"exit\", marker, context],\n    // Everything in between.\n    [\"enter\", string, context],\n    [\"enter\", chunk, context],\n    [\"exit\", chunk, context],\n    [\"exit\", string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    [\"exit\", call, context]\n  ];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\nfunction tokenizeGfmFootnoteCall(effects, ok2, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  let data;\n  return start;\n  function start(code2) {\n    effects.enter(\"gfmFootnoteCall\");\n    effects.enter(\"gfmFootnoteCallLabelMarker\");\n    effects.consume(code2);\n    effects.exit(\"gfmFootnoteCallLabelMarker\");\n    return callStart;\n  }\n  function callStart(code2) {\n    if (code2 !== 94) return nok(code2);\n    effects.enter(\"gfmFootnoteCallMarker\");\n    effects.consume(code2);\n    effects.exit(\"gfmFootnoteCallMarker\");\n    effects.enter(\"gfmFootnoteCallString\");\n    effects.enter(\"chunkString\").contentType = \"string\";\n    return callData;\n  }\n  function callData(code2) {\n    if (\n      // Too long.\n      size > 999 || // Closing brace with nothing.\n      code2 === 93 && !data || // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code2 === null || code2 === 91 || markdownLineEndingOrSpace(code2)\n    ) {\n      return nok(code2);\n    }\n    if (code2 === 93) {\n      effects.exit(\"chunkString\");\n      const token = effects.exit(\"gfmFootnoteCallString\");\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code2);\n      }\n      effects.enter(\"gfmFootnoteCallLabelMarker\");\n      effects.consume(code2);\n      effects.exit(\"gfmFootnoteCallLabelMarker\");\n      effects.exit(\"gfmFootnoteCall\");\n      return ok2;\n    }\n    if (!markdownLineEndingOrSpace(code2)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code2);\n    return code2 === 92 ? callEscape : callData;\n  }\n  function callEscape(code2) {\n    if (code2 === 91 || code2 === 92 || code2 === 93) {\n      effects.consume(code2);\n      size++;\n      return callData;\n    }\n    return callData(code2);\n  }\n}\nfunction tokenizeDefinitionStart(effects, ok2, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let identifier;\n  let size = 0;\n  let data;\n  return start;\n  function start(code2) {\n    effects.enter(\"gfmFootnoteDefinition\")._container = true;\n    effects.enter(\"gfmFootnoteDefinitionLabel\");\n    effects.enter(\"gfmFootnoteDefinitionLabelMarker\");\n    effects.consume(code2);\n    effects.exit(\"gfmFootnoteDefinitionLabelMarker\");\n    return labelAtMarker;\n  }\n  function labelAtMarker(code2) {\n    if (code2 === 94) {\n      effects.enter(\"gfmFootnoteDefinitionMarker\");\n      effects.consume(code2);\n      effects.exit(\"gfmFootnoteDefinitionMarker\");\n      effects.enter(\"gfmFootnoteDefinitionLabelString\");\n      effects.enter(\"chunkString\").contentType = \"string\";\n      return labelInside;\n    }\n    return nok(code2);\n  }\n  function labelInside(code2) {\n    if (\n      // Too long.\n      size > 999 || // Closing brace with nothing.\n      code2 === 93 && !data || // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code2 === null || code2 === 91 || markdownLineEndingOrSpace(code2)\n    ) {\n      return nok(code2);\n    }\n    if (code2 === 93) {\n      effects.exit(\"chunkString\");\n      const token = effects.exit(\"gfmFootnoteDefinitionLabelString\");\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter(\"gfmFootnoteDefinitionLabelMarker\");\n      effects.consume(code2);\n      effects.exit(\"gfmFootnoteDefinitionLabelMarker\");\n      effects.exit(\"gfmFootnoteDefinitionLabel\");\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code2)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code2);\n    return code2 === 92 ? labelEscape : labelInside;\n  }\n  function labelEscape(code2) {\n    if (code2 === 91 || code2 === 92 || code2 === 93) {\n      effects.consume(code2);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code2);\n  }\n  function labelAfter(code2) {\n    if (code2 === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code2);\n      effects.exit(\"definitionMarker\");\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n      return factorySpace(effects, whitespaceAfter, \"gfmFootnoteDefinitionWhitespace\");\n    }\n    return nok(code2);\n  }\n  function whitespaceAfter(code2) {\n    return ok2(code2);\n  }\n}\nfunction tokenizeDefinitionContinuation(effects, ok2, nok) {\n  return effects.check(blankLine, ok2, effects.attempt(indent, ok2, nok));\n}\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit(\"gfmFootnoteDefinition\");\n}\nfunction tokenizeIndent(effects, ok2, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"gfmFootnoteDefinitionIndent\", 4 + 1);\n  function afterPrefix(code2) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"gfmFootnoteDefinitionIndent\" && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok2(code2) : nok(code2);\n  }\n}\nfunction gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: \"strikethrough\",\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === void 0) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n    while (++index < events.length) {\n      if (events[index][0] === \"enter\" && events[index][1].type === \"strikethroughSequenceTemporary\" && events[index][1]._close) {\n        let open = index;\n        while (open--) {\n          if (events[open][0] === \"exit\" && events[open][1].type === \"strikethroughSequenceTemporary\" && events[open][1]._open && // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = \"strikethroughSequence\";\n            events[open][1].type = \"strikethroughSequence\";\n            const strikethrough = {\n              type: \"strikethrough\",\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n            const text2 = {\n              type: \"strikethroughText\",\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n            const nextEvents = [[\"enter\", strikethrough, context], [\"enter\", events[open][1], context], [\"exit\", events[open][1], context], [\"enter\", text2, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n            splice(nextEvents, nextEvents.length, 0, [[\"exit\", text2, context], [\"enter\", events[index][1], context], [\"exit\", events[index][1], context], [\"exit\", strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === \"strikethroughSequenceTemporary\") {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n  function tokenizeStrikethrough(effects, ok2, nok) {\n    const previous2 = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n    function start(code2) {\n      if (previous2 === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code2);\n      }\n      effects.enter(\"strikethroughSequenceTemporary\");\n      return more(code2);\n    }\n    function more(code2) {\n      const before = classifyCharacter(previous2);\n      if (code2 === 126) {\n        if (size > 1) return nok(code2);\n        effects.consume(code2);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code2);\n      const token = effects.exit(\"strikethroughSequenceTemporary\");\n      const after = classifyCharacter(code2);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok2(code2);\n    }\n  }\n}\nclass EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    this.map = [];\n  }\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function(a, b) {\n      return a[0] - b[0];\n    });\n    if (this.map.length === 0) {\n      return;\n    }\n    let index = this.map.length;\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n    this.map.length = 0;\n  }\n}\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n      editMap.map[index][2].push(...add);\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\nfunction gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === \"enter\") {\n        if (event[1].type === \"tableContent\") {\n          align.push(events[index + 1][1].type === \"tableDelimiterMarker\" ? \"left\" : \"none\");\n        }\n      } else if (event[1].type === \"tableContent\") {\n        if (events[index - 1][1].type === \"tableDelimiterMarker\") {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === \"left\" ? \"center\" : \"right\";\n        }\n      } else if (event[1].type === \"tableDelimiterRow\") {\n        break;\n      }\n    } else if (event[0] === \"enter\" && event[1].type === \"tableDelimiterRow\") {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}\nfunction gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: \"table\",\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\nfunction tokenizeTable(effects, ok2, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  let seen;\n  return start;\n  function start(code2) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;\n      else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === \"tableHead\" || tail === \"tableRow\" ? bodyRowStart : headRowBefore;\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code2);\n    }\n    return next(code2);\n  }\n  function headRowBefore(code2) {\n    effects.enter(\"tableHead\");\n    effects.enter(\"tableRow\");\n    return headRowStart(code2);\n  }\n  function headRowStart(code2) {\n    if (code2 === 124) {\n      return headRowBreak(code2);\n    }\n    seen = true;\n    sizeB += 1;\n    return headRowBreak(code2);\n  }\n  function headRowBreak(code2) {\n    if (code2 === null) {\n      return nok(code2);\n    }\n    if (markdownLineEnding(code2)) {\n      if (sizeB > 1) {\n        sizeB = 0;\n        self.interrupt = true;\n        effects.exit(\"tableRow\");\n        effects.enter(\"lineEnding\");\n        effects.consume(code2);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n      return nok(code2);\n    }\n    if (markdownSpace(code2)) {\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code2);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      size += 1;\n    }\n    if (code2 === 124) {\n      effects.enter(\"tableCellDivider\");\n      effects.consume(code2);\n      effects.exit(\"tableCellDivider\");\n      seen = true;\n      return headRowBreak;\n    }\n    effects.enter(\"data\");\n    return headRowData(code2);\n  }\n  function headRowData(code2) {\n    if (code2 === null || code2 === 124 || markdownLineEndingOrSpace(code2)) {\n      effects.exit(\"data\");\n      return headRowBreak(code2);\n    }\n    effects.consume(code2);\n    return code2 === 92 ? headRowEscape : headRowData;\n  }\n  function headRowEscape(code2) {\n    if (code2 === 92 || code2 === 124) {\n      effects.consume(code2);\n      return headRowData;\n    }\n    return headRowData(code2);\n  }\n  function headDelimiterStart(code2) {\n    self.interrupt = false;\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code2);\n    }\n    effects.enter(\"tableDelimiterRow\");\n    seen = false;\n    if (markdownSpace(code2)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes(\"codeIndented\") ? void 0 : 4)(code2);\n    }\n    return headDelimiterBefore(code2);\n  }\n  function headDelimiterBefore(code2) {\n    if (code2 === 45 || code2 === 58) {\n      return headDelimiterValueBefore(code2);\n    }\n    if (code2 === 124) {\n      seen = true;\n      effects.enter(\"tableCellDivider\");\n      effects.consume(code2);\n      effects.exit(\"tableCellDivider\");\n      return headDelimiterCellBefore;\n    }\n    return headDelimiterNok(code2);\n  }\n  function headDelimiterCellBefore(code2) {\n    if (markdownSpace(code2)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code2);\n    }\n    return headDelimiterValueBefore(code2);\n  }\n  function headDelimiterValueBefore(code2) {\n    if (code2 === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter(\"tableDelimiterMarker\");\n      effects.consume(code2);\n      effects.exit(\"tableDelimiterMarker\");\n      return headDelimiterLeftAlignmentAfter;\n    }\n    if (code2 === 45) {\n      sizeB += 1;\n      return headDelimiterLeftAlignmentAfter(code2);\n    }\n    if (code2 === null || markdownLineEnding(code2)) {\n      return headDelimiterCellAfter(code2);\n    }\n    return headDelimiterNok(code2);\n  }\n  function headDelimiterLeftAlignmentAfter(code2) {\n    if (code2 === 45) {\n      effects.enter(\"tableDelimiterFiller\");\n      return headDelimiterFiller(code2);\n    }\n    return headDelimiterNok(code2);\n  }\n  function headDelimiterFiller(code2) {\n    if (code2 === 45) {\n      effects.consume(code2);\n      return headDelimiterFiller;\n    }\n    if (code2 === 58) {\n      seen = true;\n      effects.exit(\"tableDelimiterFiller\");\n      effects.enter(\"tableDelimiterMarker\");\n      effects.consume(code2);\n      effects.exit(\"tableDelimiterMarker\");\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit(\"tableDelimiterFiller\");\n    return headDelimiterRightAlignmentAfter(code2);\n  }\n  function headDelimiterRightAlignmentAfter(code2) {\n    if (markdownSpace(code2)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code2);\n    }\n    return headDelimiterCellAfter(code2);\n  }\n  function headDelimiterCellAfter(code2) {\n    if (code2 === 124) {\n      return headDelimiterBefore(code2);\n    }\n    if (code2 === null || markdownLineEnding(code2)) {\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code2);\n      }\n      effects.exit(\"tableDelimiterRow\");\n      effects.exit(\"tableHead\");\n      return ok2(code2);\n    }\n    return headDelimiterNok(code2);\n  }\n  function headDelimiterNok(code2) {\n    return nok(code2);\n  }\n  function bodyRowStart(code2) {\n    effects.enter(\"tableRow\");\n    return bodyRowBreak(code2);\n  }\n  function bodyRowBreak(code2) {\n    if (code2 === 124) {\n      effects.enter(\"tableCellDivider\");\n      effects.consume(code2);\n      effects.exit(\"tableCellDivider\");\n      return bodyRowBreak;\n    }\n    if (code2 === null || markdownLineEnding(code2)) {\n      effects.exit(\"tableRow\");\n      return ok2(code2);\n    }\n    if (markdownSpace(code2)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code2);\n    }\n    effects.enter(\"data\");\n    return bodyRowData(code2);\n  }\n  function bodyRowData(code2) {\n    if (code2 === null || code2 === 124 || markdownLineEndingOrSpace(code2)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code2);\n    }\n    effects.consume(code2);\n    return code2 === 92 ? bodyRowEscape : bodyRowData;\n  }\n  function bodyRowEscape(code2) {\n    if (code2 === 92 || code2 === 124) {\n      effects.consume(code2);\n      return bodyRowData;\n    }\n    return bodyRowData(code2);\n  }\n}\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  let rowKind = 0;\n  let lastCell = [0, 0, 0, 0];\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  let currentTable;\n  let currentBody;\n  let currentCell;\n  const map2 = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === \"enter\") {\n      if (token.type === \"tableHead\") {\n        afterHeadAwaitingFirstBodyRow = false;\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map2, context, lastTableEnd, currentTable, currentBody);\n          currentBody = void 0;\n          lastTableEnd = 0;\n        }\n        currentTable = {\n          type: \"table\",\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map2.add(index, 0, [[\"enter\", currentTable, context]]);\n      } else if (token.type === \"tableRow\" || token.type === \"tableDelimiterRow\") {\n        inFirstCellAwaitingPipe = true;\n        currentCell = void 0;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: \"tableBody\",\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map2.add(index, 0, [[\"enter\", currentBody, context]]);\n        }\n        rowKind = token.type === \"tableDelimiterRow\" ? 2 : currentBody ? 3 : 1;\n      } else if (rowKind && (token.type === \"data\" || token.type === \"tableDelimiterMarker\" || token.type === \"tableDelimiterFiller\")) {\n        inFirstCellAwaitingPipe = false;\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map2, context, lastCell, rowKind, void 0, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === \"tableCellDivider\") {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map2, context, lastCell, rowKind, void 0, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    } else if (token.type === \"tableHead\") {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === \"tableRow\" || token.type === \"tableDelimiterRow\") {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map2, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map2, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === \"tableDelimiterMarker\" || token.type === \"tableDelimiterFiller\")) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map2, context, lastTableEnd, currentTable, currentBody);\n  }\n  map2.consume(context.events);\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === \"enter\" && event[1].type === \"table\") {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\nfunction flushCell(map2, context, range, rowKind, rowEnd, previousCell) {\n  const groupName = rowKind === 1 ? \"tableHeader\" : rowKind === 2 ? \"tableDelimiter\" : \"tableData\";\n  const valueName = \"tableContent\";\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map2.add(range[0], 0, [[\"exit\", previousCell, context]]);\n  }\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map2.add(range[1], 0, [[\"enter\", previousCell, context]]);\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map2.add(range[2], 0, [[\"enter\", valueToken, context]]);\n    if (rowKind !== 2) {\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map2.add(a, b, []);\n      }\n    }\n    map2.add(range[3] + 1, 0, [[\"exit\", valueToken, context]]);\n  }\n  if (rowEnd !== void 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map2.add(rowEnd, 0, [[\"exit\", previousCell, context]]);\n    previousCell = void 0;\n  }\n  return previousCell;\n}\nfunction flushTableEnd(map2, context, index, table, tableBody) {\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push([\"exit\", tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push([\"exit\", table, context]);\n  map2.add(index + 1, 0, exits);\n}\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === \"enter\" ? \"start\" : \"end\";\n  return event[1][side];\n}\nconst tasklistCheck = {\n  name: \"tasklistCheck\",\n  tokenize: tokenizeTasklistCheck\n};\nfunction gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\nfunction tokenizeTasklistCheck(effects, ok2, nok) {\n  const self = this;\n  return open;\n  function open(code2) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code2);\n    }\n    effects.enter(\"taskListCheck\");\n    effects.enter(\"taskListCheckMarker\");\n    effects.consume(code2);\n    effects.exit(\"taskListCheckMarker\");\n    return inside;\n  }\n  function inside(code2) {\n    if (markdownLineEndingOrSpace(code2)) {\n      effects.enter(\"taskListCheckValueUnchecked\");\n      effects.consume(code2);\n      effects.exit(\"taskListCheckValueUnchecked\");\n      return close;\n    }\n    if (code2 === 88 || code2 === 120) {\n      effects.enter(\"taskListCheckValueChecked\");\n      effects.consume(code2);\n      effects.exit(\"taskListCheckValueChecked\");\n      return close;\n    }\n    return nok(code2);\n  }\n  function close(code2) {\n    if (code2 === 93) {\n      effects.enter(\"taskListCheckMarker\");\n      effects.consume(code2);\n      effects.exit(\"taskListCheckMarker\");\n      effects.exit(\"taskListCheck\");\n      return after;\n    }\n    return nok(code2);\n  }\n  function after(code2) {\n    if (markdownLineEnding(code2)) {\n      return ok2(code2);\n    }\n    if (markdownSpace(code2)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok2, nok)(code2);\n    }\n    return nok(code2);\n  }\n}\nfunction spaceThenNonSpace(effects, ok2, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n  function after(code2) {\n    return code2 === null ? nok(code2) : ok2(code2);\n  }\n}\nfunction gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ]);\n}\nconst emptyOptions = {};\nfunction remarkGfm(options) {\n  const self = (\n    /** @type {Processor<Root>} */\n    this\n  );\n  const settings = options || emptyOptions;\n  const data = self.data();\n  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);\n  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);\n  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);\n  micromarkExtensions.push(gfm(settings));\n  fromMarkdownExtensions.push(gfmFromMarkdown());\n  toMarkdownExtensions.push(gfmToMarkdown(settings));\n}\nconst _sfc_main$1 = {\n  name: \"NcReferenceList\",\n  components: {\n    NcReferenceWidget\n  },\n  props: {\n    text: {\n      type: String,\n      default: \"\"\n    },\n    referenceData: {\n      type: Array,\n      default: null\n    },\n    limit: {\n      type: Number,\n      default: 1\n    },\n    displayFallback: {\n      type: Boolean,\n      default: false\n    },\n    interactive: {\n      type: Boolean,\n      default: true\n    },\n    interactiveOptIn: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"loaded\"],\n  data() {\n    return {\n      references: null,\n      loading: true\n    };\n  },\n  computed: {\n    isVisible() {\n      return this.loading || this.displayedReferences.length !== 0;\n    },\n    values() {\n      if (this.referenceData) {\n        return this.referenceData;\n      }\n      if (this.displayFallback && !this.loading && !this.references) {\n        return [this.fallbackReference];\n      }\n      return this.references ? Object.values(this.references) : [];\n    },\n    firstReference() {\n      return this.values[0] ?? null;\n    },\n    displayedReferences() {\n      return this.values.slice(0, this.limit);\n    },\n    fallbackReference() {\n      return {\n        accessible: true,\n        openGraphObject: {\n          id: this.text,\n          link: this.text,\n          name: this.text\n        },\n        richObjectType: \"open-graph\"\n      };\n    }\n  },\n  watch: {\n    text: \"fetch\"\n  },\n  mounted() {\n    this.fetch();\n  },\n  methods: {\n    fetch() {\n      this.loading = true;\n      if (this.referenceData) {\n        this.references = null;\n        this.loading = false;\n        return;\n      }\n      if (!new RegExp(URL_PATTERN).exec(this.text)) {\n        this.references = null;\n        this.loading = false;\n        return;\n      }\n      this.resolve().then((response) => {\n        this.references = response.data.ocs.data.references;\n        this.loading = false;\n        this.$emit(\"loaded\");\n      }).catch((error) => {\n        console.error(\"Failed to extract references\", error);\n        this.loading = false;\n        this.$emit(\"loaded\");\n      });\n    },\n    resolve() {\n      const match = new RegExp(URL_PATTERN).exec(this.text.trim());\n      const isPublic = getCurrentUser() === null;\n      if (this.limit === 1 && match) {\n        return isPublic ? axios.get(generateOcsUrl(\"references/resolvePublic\") + `?reference=${encodeURIComponent(match[0])}&sharingToken=${getSharingToken()}`) : axios.get(generateOcsUrl(\"references/resolve\") + `?reference=${encodeURIComponent(match[0])}`);\n      }\n      return isPublic ? axios.post(generateOcsUrl(\"references/extractPublic\"), {\n        text: this.text,\n        resolve: true,\n        limit: this.limit,\n        sharingToken: getSharingToken()\n      }) : axios.post(generateOcsUrl(\"references/extract\"), {\n        text: this.text,\n        resolve: true,\n        limit: this.limit\n      });\n    }\n  }\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NcReferenceWidget = resolveComponent(\"NcReferenceWidget\");\n  return $options.isVisible ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass([\"widgets--list\", { \"icon-loading\": $data.loading }])\n  }, [\n    (openBlock(true), createElementBlock(Fragment, null, renderList($options.displayedReferences, (reference) => {\n      return openBlock(), createBlock(_component_NcReferenceWidget, {\n        key: reference?.openGraphObject?.id,\n        reference,\n        interactive: $props.interactive,\n        \"interactive-opt-in\": $props.interactiveOptIn\n      }, null, 8, [\"reference\", \"interactive\", \"interactive-opt-in\"]);\n    }), 128))\n  ], 2)) : createCommentVNode(\"\", true);\n}\nconst NcReferenceList = /* @__PURE__ */ _export_sfc(_sfc_main$1, [[\"render\", _sfc_render], [\"__scopeId\", \"data-v-8e70b916\"]]);\n/*!\n * SPDX-FileCopyrightText: 2025 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nfunction isTextNode$1(node2) {\n  return [\"text\", \"code\", \"inlineCode\"].includes(node2.type);\n}\nconst remarkUnescape = function() {\n  return function(tree) {\n    visit(tree, isTextNode$1, (node2, index, parent) => {\n      parent.children.splice(index, 1, {\n        ...node2,\n        value: node2.value.replace(/&lt;/gmi, \"<\").replace(/&gt;/gmi, \">\")\n      });\n      return [SKIP$1, index + 1];\n    });\n  };\n};\n/*!\n * SPDX-FileCopyrightText: 2023 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\nfunction isTextNode(node2) {\n  return node2.type === \"text\";\n}\nconst transformPlaceholders = function(ast) {\n  visit(ast, isTextNode, visitor);\n  function visitor(node2, index, parent) {\n    const placeholders = node2.value.split(/(\\{[a-z\\-_.0-9]+\\})/ig).map((entry) => {\n      const matches = entry.match(/^\\{([a-z\\-_.0-9]+)\\}$/i);\n      if (!matches) {\n        return u(\"text\", entry);\n      }\n      const [, component] = matches;\n      return u(\"element\", {\n        tagName: `#${component}`,\n        children: []\n      });\n    });\n    parent.children.splice(index, 1, ...placeholders);\n  }\n};\nconst remarkPlaceholder = () => transformPlaceholders;\nconst LINK_PROTOCOLS = [\"http\", \"https\", \"mailto\", \"tel\"];\nconst rehypeHighlight = ref(null);\nasync function importRehypeHighlightLibrary() {\n  const module = await import(\"rehype-highlight\");\n  rehypeHighlight.value = module.default;\n}\nconst _sfc_main = {\n  name: \"NcRichText\",\n  components: {\n    NcReferenceList\n  },\n  props: {\n    text: {\n      type: String,\n      default: \"\"\n    },\n    arguments: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    referenceLimit: {\n      type: Number,\n      default: 0\n    },\n    referenceInteractive: {\n      type: Boolean,\n      default: true\n    },\n    referenceInteractiveOptIn: {\n      type: Boolean,\n      default: false\n    },\n    /** Provide data upfront to avoid extra http request */\n    references: {\n      type: Array,\n      default: null\n    },\n    /** Provide basic Markdown syntax */\n    useMarkdown: {\n      type: Boolean,\n      default: false\n    },\n    /** Provide GitHub Flavored Markdown syntax */\n    useExtendedMarkdown: {\n      type: Boolean,\n      default: false\n    },\n    /** Provide event from rendered markdown inputs */\n    interactive: {\n      type: Boolean,\n      default: false\n    },\n    autolink: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: [\n    \"interactTodo\"\n  ],\n  data() {\n    return {\n      parentId: createElementId()\n    };\n  },\n  methods: {\n    renderPlaintext() {\n      const placeholders = this.text.split(/(\\{[a-z\\-_.0-9]+\\})/ig).map((entry) => {\n        const matches = entry.match(/^\\{([a-z\\-_.0-9]+)\\}$/i);\n        if (!matches) {\n          return this.prepareTextNode(entry);\n        }\n        const argumentId = matches[1];\n        const argument = this.arguments[argumentId];\n        if (typeof argument === \"object\") {\n          const { component, props } = argument;\n          return h(typeof component === \"string\" ? resolveComponent(component) : component, {\n            ...props,\n            class: \"rich-text--component\"\n          });\n        }\n        if (argument) {\n          return h(\"span\", { class: \"rich-text--fallback\" }, argument);\n        }\n        return entry;\n      });\n      return h(\"div\", { class: \"rich-text--wrapper\" }, [\n        h(\"div\", {}, placeholders.flat()),\n        this.referenceLimit > 0 ? h(\"div\", { class: \"rich-text--reference-widget\" }, [\n          h(NcReferenceList, {\n            text: this.text,\n            referenceData: this.references,\n            interactive: this.referenceInteractive,\n            interactiveOptIn: this.referenceInteractiveOptIn\n          })\n        ]) : null\n      ]);\n    },\n    renderMarkdown() {\n      const renderedMarkdown = unified().use(remarkParse).use(remarkAutolink, {\n        autolink: this.autolink,\n        useMarkdown: this.useMarkdown,\n        useExtendedMarkdown: this.useExtendedMarkdown\n      }).use(remarkUnescape).use(this.useExtendedMarkdown ? remarkGfm : void 0).use(breaks).use(remarkUnlinkProtocols, { except: LINK_PROTOCOLS }).use(remark2rehype, {\n        handlers: {\n          component(toHast, node2) {\n            return toHast(node2, node2.component, { value: node2.value });\n          }\n        }\n      }).use(this.useExtendedMarkdown ? rehypeHighlight.value : void 0).use(remarkPlaceholder).use(rehypeExternalLinks, {\n        target: \"_blank\",\n        rel: [\"noopener noreferrer\"]\n      }).use(rehype2react, {\n        Fragment,\n        jsx: this.createElement,\n        jsxs: this.createElement,\n        elementAttributeNameCase: \"html\",\n        prefix: false\n      }).processSync(\n        this.text.replace(/<[^>]+>/g, (match) => match.replace(/</g, \"&lt;\")).replace(/&gt;/gmi, \">\")\n      ).result;\n      return h(\"div\", { class: \"rich-text--wrapper rich-text--wrapper-markdown\" }, [\n        renderedMarkdown,\n        this.referenceLimit > 0 ? h(\"div\", { class: \"rich-text--reference-widget\" }, [\n          h(NcReferenceList, {\n            text: this.text,\n            referenceData: this.references,\n            interactive: this.referenceInteractive,\n            interactiveOptIn: this.referenceInteractiveOptIn\n          })\n        ]) : null\n      ]);\n    },\n    /**\n     * Render plain text nodes\n     *\n     * @param {string} text - Content of the node\n     */\n    prepareTextNode(text2) {\n      if (this.autolink) {\n        text2 = parseUrl(text2);\n      }\n      if (Array.isArray(text2)) {\n        return text2.map((entry) => {\n          if (typeof entry === \"string\") {\n            return entry;\n          }\n          const { component, props } = entry;\n          const componentClass = component.name === \"NcLink\" ? void 0 : \"rich-text--component\";\n          return h(component, {\n            ...props,\n            class: componentClass\n          });\n        });\n      }\n      return text2;\n    },\n    createElement(type, props, key) {\n      if (key) {\n        props.key = key;\n      }\n      const children = props.children ?? [];\n      delete props.children;\n      if (!String(type).startsWith(\"#\")) {\n        let nestedNode = null;\n        if (this.useExtendedMarkdown) {\n          if (String(type) === \"code\" && !rehypeHighlight.value && props?.class?.includes(\"language\")) {\n            importRehypeHighlightLibrary();\n          }\n          if (String(type) === \"li\" && Array.isArray(children) && children[0].type === \"input\" && children[0].props.type === \"checkbox\") {\n            const [inputNode, , ...labelParts] = children;\n            const nestedNodeIndex = labelParts.findIndex((child) => [\"ul\", \"ol\", \"li\", \"blockquote\", \"pre\"].includes(child.type));\n            if (nestedNodeIndex !== -1) {\n              nestedNode = labelParts[nestedNodeIndex];\n              labelParts.splice(nestedNodeIndex);\n            }\n            const id = this.parentId + \"-markdown-input-\" + createElementId();\n            const propsToForward = { ...inputNode.props };\n            delete propsToForward.checked;\n            const inputComponent = h(NcCheckboxRadioSwitch, {\n              ...propsToForward,\n              modelValue: inputNode.props.checked,\n              id,\n              disabled: !this.interactive,\n              \"onUpdate:modelValue\": () => {\n                this.$emit(\"interactTodo\", id);\n              }\n            }, { default: () => labelParts });\n            return h(type, props, [inputComponent, nestedNode]);\n          }\n        }\n        if (String(type) === \"a\") {\n          const route = getRoute(this.$router, props.href);\n          if (route) {\n            delete props.href;\n            delete props.target;\n            return h(RouterLink, {\n              ...props,\n              to: route\n            }, { default: () => children });\n          }\n        }\n        return h(type, props, children);\n      }\n      const placeholder = this.arguments[type.slice(1)];\n      if (!placeholder) {\n        return h(\"span\", { ...props, class: \"rich-text--fallback\" }, [`{${type.slice(1)}}`]);\n      }\n      if (!placeholder.component) {\n        return h(\"span\", { ...props }, [placeholder]);\n      }\n      return h(\n        typeof placeholder.component === \"string\" ? resolveComponent(placeholder.component) : placeholder.component,\n        {\n          ...props,\n          ...placeholder.props,\n          class: \"rich-text--component\"\n        },\n        { default: () => children }\n      );\n    }\n  },\n  render() {\n    return this.useMarkdown || this.useExtendedMarkdown ? this.renderMarkdown() : this.renderPlaintext();\n  }\n};\nconst NcRichText = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"__scopeId\", \"data-v-19dbe6da\"]]);\nexport {\n  NcRichText as N,\n  NcReferenceList as a\n};\n//# sourceMappingURL=NcRichText-G8kzsdwx.mjs.map\n"],"file":"js/NcRichText-G8kzsdwx-IKlnWRaR.chunk.mjs"}