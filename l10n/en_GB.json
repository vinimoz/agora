{
  "translations": {
    "Add inquiry": "Add inquiry",
    "\"{inquiryTitle}\" has been successfully created.', {\\n    inquiryTitle: newInquiry.value.title,\\n  })\\n)\\nconst confirmationDialogName = t('agora', 'Inquiry created": "\"{inquiryTitle}\" has been successfully created.', {\\n    inquiryTitle: newInquiry.value.title,\\n  })\\n)\\nconst confirmationDialogName = t('agora', 'Inquiry created",
    "Add another inquiry": "Add another inquiry",
    "Open inquiry now": "Open inquiry now",
    "New inquiry": "New inquiry",
    "Add option": "Add option",
    "Delete": "Delete",
    "Delete orphaned": "Delete orphaned",
    "Add some!": "Add some!",
    "Edit access": "Edit access",
    "Register": "Register",
    "Send confirmation mails": "Send confirmation mails",
    "See result": "See result",
    "Result of sent confirmation mails": "Result of sent confirmation mails",
    "%n confirmation has been sent',\\n                '%n confirmations have been sent',\\n                confirmations.countSentMails\\n              )\\n            }}\\n          </h2>\\n          <ul>\\n            <li v-for=\"item in confirmations.sentMails\" :key=\"item.displayName\">\\n              {{ item.displayName }} &lt;{{ item.emailAddress }}&gt;\\n            </li>\\n          </ul>\\n        </div>\\n        <div v-if=\"confirmations?.countAbortedMails > 0\" class=\"error-confirmations\">\\n          <h2>\\n            {{\\n              n(\\n                'agora',\\n                '%n confirmation could not be sent',\\n                '%n confirmations could not be sent:',\\n                confirmations.countAbortedMails\\n              )\\n            }}\\n          </h2>\\n          <ul>\\n            <li v-for=\"item in confirmations.abortedMails\" :key=\"item.displayName\">\\n              {{ item.displayName }} ({{\\n                item.reason === 'InvalidMail'\\n                  ? t('agora', 'No valid email address": "%n confirmation has been sent',\\n                '%n confirmations have been sent',\\n                confirmations.countSentMails\\n              )\\n            }}\\n          </h2>\\n          <ul>\\n            <li v-for=\"item in confirmations.sentMails\" :key=\"item.displayName\">\\n              {{ item.displayName }} &lt;{{ item.emailAddress }}&gt;\\n            </li>\\n          </ul>\\n        </div>\\n        <div v-if=\"confirmations?.countAbortedMails > 0\" class=\"error-confirmations\">\\n          <h2>\\n            {{\\n              n(\\n                'agora',\\n                '%n confirmation could not be sent',\\n                '%n confirmations could not be sent:',\\n                confirmations.countAbortedMails\\n              )\\n            }}\\n          </h2>\\n          <ul>\\n            <li v-for=\"item in confirmations.abortedMails\" :key=\"item.displayName\">\\n              {{ item.displayName }} ({{\\n                item.reason === 'InvalidMail'\\n                  ? t('agora', 'No valid email address",
    "Unknown error": "Unknown error",
    "Reveal them": "Reveal them",
    "Toggle sidebar": "Toggle sidebar",
    "Maybe": "Maybe",
    "Loading …": "Loading …",
    "Support status": "Support status",
    "Click": "Click",
    "Previous day": "Previous day",
    "Next day": "Next day",
    "minus": "minus",
    "plus": "plus",
    "Please wait…": "Please wait…",
    "Possible calendar conflicts": "Possible calendar conflicts",
    "Add": "Add",
    "You are asked to propose more options.": "You are asked to propose more options.",
    "The suggestion period ends {timeRelative}.', {\\n          timeRelative: inquiryStore.suggestionsExpireRelative,\\n        })\\n      }}\\n    </p>\\n\\n    <OptionsTextAdd\\n      v-if=\"inquiryStore.type === 'textInquiry'\"\\n      :placeholder=\"t('agora', 'Propose an option": "The suggestion period ends {timeRelative}.', {\\n          timeRelative: inquiryStore.suggestionsExpireRelative,\\n        })\\n      }}\\n    </p>\\n\\n    <OptionsTextAdd\\n      v-if=\"inquiryStore.type === 'textInquiry'\"\\n      :placeholder=\"t('agora', 'Propose an option",
    "This inquiry is closed.": "This inquiry is closed.",
    "No further action is possible.": "No further action is possible.",
    "No more voting options are available.": "No more voting options are available.",
    "You have no inquiries left.": "You have no inquiries left.",
    "Limited inquiries.": "Limited inquiries.",
    "Voting is locked and you have just read access to this inquiry.": "Voting is locked and you have just read access to this inquiry.",
    "To participate, register with a name.": "To participate, register with a name.",
    "Messages sent.": "Messages sent.",
    "This inquiry is unpublished.": "This inquiry is unpublished.",
    "Existing participants will still have access.": "Existing participants will still have access.",
    "Invite users or allow internal access for all site users.": "Invite users or allow internal access for all site users.",
    "Only visible to me": "Only visible to me",
    "Only visible to {displayName}', {\\n        displayName: inquiryStore.owner.displayName,\\n      })\\n\\n/**\\n *\\n */\\nasync function writeComment() {\\n  if (comment.value) {\\n    try {\\n      await commentsStore.add({\\n        message: comment.value,\\n        confidential: confidantial.value,\\n      })\\n      comment.value = ''\\n    } catch {\\n      showError(t('agora', 'Error while saving comment": "Only visible to {displayName}', {\\n        displayName: inquiryStore.owner.displayName,\\n      })\\n\\n/**\\n *\\n */\\nasync function writeComment() {\\n  if (comment.value) {\\n    try {\\n      await commentsStore.add({\\n        message: comment.value,\\n        confidential: confidantial.value,\\n      })\\n      comment.value = ''\\n    } catch {\\n      showError(t('agora', 'Error while saving comment",
    "New comment …": "New comment …",
    "Confidential with {displayName}', {\\n      displayName: comment.recipient.displayName,\\n    })\\n  }\\n  return t('agora', 'Confidential": "Confidential with {displayName}', {\\n      displayName: comment.recipient.displayName,\\n    })\\n  }\\n  return t('agora', 'Confidential",
    "Error while deleting the comment": "Error while deleting the comment",
    "Error while restoring the comment": "Error while restoring the comment",
    "Restore comment": "Restore comment",
    "Delete comment": "Delete comment",
    "deleted": "deleted",
    "The automatic reminder is sent to all shares via email:": "The automatic reminder is sent to all shares via email:",
    "For inquiries with expiration:": "For inquiries with expiration:",
    "For date inquiries without expiration:": "For date inquiries without expiration:",
    "No reminder is sent:": "No reminder is sent:",
    "For text inquiries without expiration.": "For text inquiries without expiration.",
    "If the inquiry is already closed.": "If the inquiry is already closed.",
    "Anonymize inquiry irrevocably": "Anonymize inquiry irrevocably",
    "Cancel": "Cancel",
    "Ok": "Ok",
    "Anonymous inquiry": "Anonymous inquiry",
    "Use Autoreminder": "Use Autoreminder",
    "Autoreminder information": "Autoreminder information",
    "Reopen inquiry": "Reopen inquiry",
    "Close inquiry": "Close inquiry",
    "Inquiry closing date": "Inquiry closing date",
    "Error {action} inquiry.', {\\n        action: inquiryStore.status.isArchived ? 'restoring' : 'archiving',\\n      })\\n    )\\n  }\\n}\\n\\nfunction routeAway() {\\n  router.push({\\n    name: 'list',\\n    params: {\\n      type: 'relevant',\\n    },\\n  })\\n}\\n</script>\\n\\n<template>\\n  <div class=\"delete-area\">\\n    <NcButton @click=\"toggleArchive()\">\\n      <template #icon>\\n        <RestoreInquiryIcon v-if=\"inquiryStore.status.isArchived\" />\\n        <ArchiveInquiryIcon v-else />\\n      </template>\\n      <template #default>\\n        {{\\n          inquiryStore.status.isArchived\\n            ? t('agora', 'Restore inquiry": "Error {action} inquiry.', {\\n        action: inquiryStore.status.isArchived ? 'restoring' : 'archiving',\\n      })\\n    )\\n  }\\n}\\n\\nfunction routeAway() {\\n  router.push({\\n    name: 'list',\\n    params: {\\n      type: 'relevant',\\n    },\\n  })\\n}\\n</script>\\n\\n<template>\\n  <div class=\"delete-area\">\\n    <NcButton @click=\"toggleArchive()\">\\n      <template #icon>\\n        <RestoreInquiryIcon v-if=\"inquiryStore.status.isArchived\" />\\n        <ArchiveInquiryIcon v-else />\\n      </template>\\n      <template #default>\\n        {{\\n          inquiryStore.status.isArchived\\n            ? t('agora', 'Restore inquiry",
    "Archive inquiry": "Archive inquiry",
    "Delete inquiry": "Delete inquiry",
    "Transfer inquiry": "Transfer inquiry",
    "Collapse long descriptions": "Collapse long descriptions",
    "Limit \"Yes\" inquiries per participant": "Limit \"Yes\" inquiries per participant",
    "Limit inquiries per option": "Limit inquiries per option",
    "Hide unavailable Options": "Hide unavailable Options",
    "Always show results": "Always show results",
    "Hide results until inquiry is closed": "Hide results until inquiry is closed",
    "Never show results": "Never show results",
    "Inquiry \"{inquiryTitle}\" added', {\\n          inquiryTitle: inquiry.title,\\n        })\\n      )\\n\\n      emit('add": "Inquiry \"{inquiryTitle}\" added', {\\n          inquiryTitle: inquiry.title,\\n        })\\n      )\\n\\n      emit('add",
    "Error while creating Inquiry \"{inquiryTitle}\"', {\\n        inquiryTitle: title.value,\\n      })\\n    )\\n  } finally {\\n    adding.value = false\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div class=\"create-dialog\">\\n    <ConfigBox :name=\"t('agora', 'Title": "Error while creating Inquiry \"{inquiryTitle}\"', {\\n        inquiryTitle: title.value,\\n      })\\n    )\\n  } finally {\\n    adding.value = false\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div class=\"create-dialog\">\\n    <ConfigBox :name=\"t('agora', 'Title",
    "Enter title": "Enter title",
    "Inquiry type": "Inquiry type",
    "\"{inquiryTitle}\" has been added', {\\n          inquiryTitle: inquiry.title,\\n        })\\n      )\\n      emit('added', {\\n        id: inquiry.id,\\n        title: inquiry.title,\\n      })\\n      resetInquiry()\\n    }\\n  } catch {\\n    showError(\\n      t('agora', 'Error while creating Inquiry \"{inquiryTitle}\"', {\\n        inquiryTitle: inquiryTitle.value,\\n      })\\n    )\\n  } finally {\\n    // unblock the modal\\n    adding.value = false\\n  }\\n}\\n\\nfunction resetInquiry() {\\n  inquiryId.value = null\\n  inquiryTitle.value = ''\\n}\\n</script>\\n\\n<template>\\n  <div class=\"create-dialog\">\\n    <ConfigBox :name=\"t('agora', 'Title": "\"{inquiryTitle}\" has been added', {\\n          inquiryTitle: inquiry.title,\\n        })\\n      )\\n      emit('added', {\\n        id: inquiry.id,\\n        title: inquiry.title,\\n      })\\n      resetInquiry()\\n    }\\n  } catch {\\n    showError(\\n      t('agora', 'Error while creating Inquiry \"{inquiryTitle}\"', {\\n        inquiryTitle: inquiryTitle.value,\\n      })\\n    )\\n  } finally {\\n    // unblock the modal\\n    adding.value = false\\n  }\\n}\\n\\nfunction resetInquiry() {\\n  inquiryId.value = null\\n  inquiryTitle.value = ''\\n}\\n</script>\\n\\n<template>\\n  <div class=\"create-dialog\">\\n    <ConfigBox :name=\"t('agora', 'Title",
    "Choose a meaningful title for your inquiry": "Choose a meaningful title for your inquiry",
    "Close": "Close",
    "Participants": "Participants",
    "From": "From",
    "To": "To",
    "Email address": "Email address",
    "Error exporting file.": "Error exporting file.",
    "Download Excel spreadsheet": "Download Excel spreadsheet",
    "Download Open Document spreadsheet": "Download Open Document spreadsheet",
    "Download CSV file": "Download CSV file",
    "Download HTML file": "Download HTML file",
    "Thank for your support !": "Thank for your support !",
    "Inquiry support removed !": "Inquiry support removed !",
    "Title mandatory": "Title mandatory",
    "The inquiry has been saved": "The inquiry has been saved",
    "Inquiry error during save !": "Inquiry error during save !",
    "Official response for": "Official response for",
    "Response for": "Response for",
    "Inquiry {title} added', { title: inquiry.title }))\\n      router.push({\\n        name: 'inquiry',\\n        params: { id: inquiry.id },\\n      })\\n    }\\n  } catch (error) {\\n    console.error('Create child inquiry error:', error)\\n    showError(t('agora', error instanceof Error ? error.message : 'Inquiry error during save!": "Inquiry {title} added', { title: inquiry.title }))\\n      router.push({\\n        name: 'inquiry',\\n        params: { id: inquiry.id },\\n      })\\n    }\\n  } catch (error) {\\n    console.error('Create child inquiry error:', error)\\n    showError(t('agora', error instanceof Error ? error.message : 'Inquiry error during save!",
    "Save": "Save",
    "Official": "Official",
    "Create Proposal": "Create Proposal",
    "Create Grievance": "Create Grievance",
    "Create Suggestion": "Create Suggestion",
    "Title": "Title",
    "Location": "Location",
    "Inherited from parent": "Inherited from parent",
    "Category": "Category",
    "Detailed Description": "Detailed Description",
    "All types": "All types",
    "Proposals": "Proposals",
    "Debates": "Debates",
    "Petitions": "Petitions",
    "Projects": "Projects",
    "Grievances": "Grievances",
    "Suggestions": "Suggestions",
    "All categories": "All categories",
    "All locations": "All locations",
    "Any comments": "Any comments",
    "With comments": "With comments",
    "Without comments": "Without comments",
    "Any supports": "Any supports",
    "With supports": "With supports",
    "Without supports": "Without supports",
    "Search inquiries...": "Search inquiries...",
    "Filters": "Filters",
    "Clear all": "Clear all",
    "Type": "Type",
    "Comments": "Comments",
    "Supports": "Supports",
    "Active:": "Active:",
    "Archived": "Archived",
    "Unpublished": "Unpublished",
    "A private inquiry from {name}', {\\n        name: inquiryStore.owner.displayName,\\n      }),\\n      class: '',\\n      iconComponent: InquiryGeneralIcons.private,\\n    })\\n  } else {\\n    subTexts.push({\\n      id: inquiryStore.configuration.access,\\n      text: t('agora', 'An openly accessible inquiry from {name}', {\\n        name: inquiryStore.owner.displayName,\\n      }),\\n      class: '',\\n      iconComponent: InquiryGeneralIcons.open,\\n    })\\n  }\\n\\n  if (inquiryStore.isClosed) {\\n    subTexts.push({\\n      id: 'closed',\\n      text: timeExpirationRelative.value,\\n      class: 'closed',\\n      iconComponent: InquiryGeneralIcons.closed,\\n    })\\n    return subTexts\\n  }\\n\\n  if (subTexts.length < 2) {\\n    subTexts.push({\\n      id: 'created',\\n      text: dateCreatedRelative.value,\\n      class: 'created',\\n      iconComponent: InquiryGeneralIcons.creation,\\n    })\\n  }\\n  return subTexts\\n})\\n\\nconst dateCreatedRelative = computed(() => moment.unix(inquiryStore.status.created).fromNow())\\n\\nconst timeExpirationRelative = computed(() => {\\n  if (inquiryStore.configuration.expire) {\\n    return moment.unix(inquiryStore.configuration.expire).fromNow()\\n  }\\n  return t('agora', 'never": "A private inquiry from {name}', {\\n        name: inquiryStore.owner.displayName,\\n      }),\\n      class: '',\\n      iconComponent: InquiryGeneralIcons.private,\\n    })\\n  } else {\\n    subTexts.push({\\n      id: inquiryStore.configuration.access,\\n      text: t('agora', 'An openly accessible inquiry from {name}', {\\n        name: inquiryStore.owner.displayName,\\n      }),\\n      class: '',\\n      iconComponent: InquiryGeneralIcons.open,\\n    })\\n  }\\n\\n  if (inquiryStore.isClosed) {\\n    subTexts.push({\\n      id: 'closed',\\n      text: timeExpirationRelative.value,\\n      class: 'closed',\\n      iconComponent: InquiryGeneralIcons.closed,\\n    })\\n    return subTexts\\n  }\\n\\n  if (subTexts.length < 2) {\\n    subTexts.push({\\n      id: 'created',\\n      text: dateCreatedRelative.value,\\n      class: 'created',\\n      iconComponent: InquiryGeneralIcons.creation,\\n    })\\n  }\\n  return subTexts\\n})\\n\\nconst dateCreatedRelative = computed(() => moment.unix(inquiryStore.status.created).fromNow())\\n\\nconst timeExpirationRelative = computed(() => {\\n  if (inquiryStore.configuration.expire) {\\n    return moment.unix(inquiryStore.configuration.expire).fromNow()\\n  }\\n  return t('agora', 'never",
    "Moderation status is:": "Moderation status is:",
    "Suggestions are allowed": "Suggestions are allowed",
    "Suggestion period ends {timeRelative}', {\\n      timeRelative: inquiryStore.suggestionsExpireRelative,\\n    })\\n  }\\n  if (inquiryStore.isSuggestionExpirySet && inquiryStore.isSuggestionExpired) {\\n    return t('agora', 'Suggestion period ended {timeRelative}', {\\n      timeRelative: inquiryStore.suggestionsExpireRelative,\\n    })\\n  }\\n  return t('agora', 'No suggestions are allowed": "Suggestion period ends {timeRelative}', {\\n      timeRelative: inquiryStore.suggestionsExpireRelative,\\n    })\\n  }\\n  if (inquiryStore.isSuggestionExpirySet && inquiryStore.isSuggestionExpired) {\\n    return t('agora', 'Suggestion period ended {timeRelative}', {\\n      timeRelative: inquiryStore.suggestionsExpireRelative,\\n    })\\n  }\\n  return t('agora', 'No suggestions are allowed",
    "Results are hidden until closing inquiry": "Results are hidden until closing inquiry",
    "Results are visible since closing inquiry": "Results are visible since closing inquiry",
    "Results are always hidden": "Results are always hidden",
    "Results are visible": "Results are visible",
    "Private inquiry": "Private inquiry",
    "Openly accessible inquiry": "Openly accessible inquiry",
    "Inquiry owner:": "Inquiry owner:",
    "Created {dateRelative}', {\\n          dateRelative: dateCreatedRelative,\\n        })\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.configuration.expire\">\\n      <template #icon>\\n        <ClosedIcon />\\n      </template>\\n      {{\\n        t('agora', 'Closing: {dateRelative}', {\\n          dateRelative: dateExpiryRelative,\\n        })\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.status.isAnonymous\">\\n      <template #icon>\\n        <AnoymousIcon />\\n      </template>\\n      {{ t('agora', 'Anonymous inquiry": "Created {dateRelative}', {\\n          dateRelative: dateCreatedRelative,\\n        })\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.configuration.expire\">\\n      <template #icon>\\n        <ClosedIcon />\\n      </template>\\n      {{\\n        t('agora', 'Closing: {dateRelative}', {\\n          dateRelative: dateExpiryRelative,\\n        })\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.status.isAnonymous\">\\n      <template #icon>\\n        <AnoymousIcon />\\n      </template>\\n      {{ t('agora', 'Anonymous inquiry",
    "%n Participant', '%n Participants', inquiryStore.status.countParticipants) }}\\n    </BadgeDiv>\\n    <BadgeDiv>\\n      <template #icon>\\n        <OptionsIcon />\\n      </template>\\n      {{ n('agora', '%n option', '%n options', optionsStore.options.length) }}\\n    </BadgeDiv>\\n    <BadgeDiv>\\n      <template #icon>\\n        <TimezoneIcon />\\n      </template>\\n      {{\\n        t('agora', 'Time zone: {timezoneString}', {\\n          timezoneString: currentTimeZone,\\n        })\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.isSuggestionAllowed\">\\n      <template #icon>\\n        <SuggestionsAllowedIcon />\\n      </template>\\n      {{ suggestionsStatus }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.configuration.maxInquiriesPerUser\">\\n      <template #icon>\\n        <CheckIcon />\\n      </template>\\n      {{\\n        n(\\n          'agora',\\n          '{usedInquiries} of %n support left.',\\n          '{usedInquiries} of %n agora left.',\\n          inquiryStore.configuration.maxInquiriesPerUser,\\n          { usedInquiries: countUsedInquiries }\\n        )\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.configuration.maxInquiriesPerOption\">\\n      <template #icon>\\n        <CloseIcon />\\n      </template>\\n      {{\\n        n(\\n          'agora',\\n          'Only %n support per option.',\\n          'Only %n inquiries per option.',\\n          inquiryStore.configuration.maxInquiriesPerOption\\n        )\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"$route.name === 'publicInquiry' && sessionStore.currentUser.emailAddress\">\\n      <template #icon>\\n        <EmailIcon />\\n      </template>\\n      {{ sessionStore.currentUser.emailAddress }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"subscriptionStore.subscribed\">\\n      <template #icon>\\n        <SubscribedIcon />\\n      </template>\\n      {{ t('agora', 'You subscribed to this inquiry": "%n Participant', '%n Participants', inquiryStore.status.countParticipants) }}\\n    </BadgeDiv>\\n    <BadgeDiv>\\n      <template #icon>\\n        <OptionsIcon />\\n      </template>\\n      {{ n('agora', '%n option', '%n options', optionsStore.options.length) }}\\n    </BadgeDiv>\\n    <BadgeDiv>\\n      <template #icon>\\n        <TimezoneIcon />\\n      </template>\\n      {{\\n        t('agora', 'Time zone: {timezoneString}', {\\n          timezoneString: currentTimeZone,\\n        })\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.isSuggestionAllowed\">\\n      <template #icon>\\n        <SuggestionsAllowedIcon />\\n      </template>\\n      {{ suggestionsStatus }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.configuration.maxInquiriesPerUser\">\\n      <template #icon>\\n        <CheckIcon />\\n      </template>\\n      {{\\n        n(\\n          'agora',\\n          '{usedInquiries} of %n support left.',\\n          '{usedInquiries} of %n agora left.',\\n          inquiryStore.configuration.maxInquiriesPerUser,\\n          { usedInquiries: countUsedInquiries }\\n        )\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"inquiryStore.configuration.maxInquiriesPerOption\">\\n      <template #icon>\\n        <CloseIcon />\\n      </template>\\n      {{\\n        n(\\n          'agora',\\n          'Only %n support per option.',\\n          'Only %n inquiries per option.',\\n          inquiryStore.configuration.maxInquiriesPerOption\\n        )\\n      }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"$route.name === 'publicInquiry' && sessionStore.currentUser.emailAddress\">\\n      <template #icon>\\n        <EmailIcon />\\n      </template>\\n      {{ sessionStore.currentUser.emailAddress }}\\n    </BadgeDiv>\\n    <BadgeDiv v-if=\"subscriptionStore.subscribed\">\\n      <template #icon>\\n        <SubscribedIcon />\\n      </template>\\n      {{ t('agora', 'You subscribed to this inquiry",
    "Inquiry supported, thanks for her !": "Inquiry supported, thanks for her !",
    "never": "never",
    "No description provided": "No description provided",
    "Archived {relativeTime}', {\\n      relativeTime: DateTime.fromMillis(inquiry.status.archivedDate * 1000).toRelative() as string,\\n    })\\n  }\\n\\n  return t('agora', 'Started {relativeTime} from {ownerName}', {\\n    ownerName: inquiry.owner.displayName,\\n    relativeTime: timeCreatedRelative.value,\\n  })\\n})\\n\\nconst formatDate = (timestamp: number) =>\\n  DateTime.fromMillis(timestamp * 1000).toLocaleString(DateTime.DATE_SHORT)\\n\\nconst moderationStatus = computed(\\n  () => inquiry.moderationStatus || inquiryStore.getInquiryModerationStatus?.(inquiry.id)\\n)\\n\\nconst moderationStatusIcon = computed(() => {\\n  const statusItem = sessionStore.appSettings.moderationStatusTab.find(\\n    (item) => item.inquiryType === inquiry.type && item.statusKey === inquiry.moderationStatus\\n  )\\n\\n  if (!statusItem) {\\n    return StatusIcons.Draft\\n  }\\n\\n  return StatusIcons[statusItem.icon] || StatusIcons.Draft\\n})\\n\\nconst moderationStatusLabel = computed(() => {\\n  const statusItem = sessionStore.appSettings.moderationStatusTab.find(\\n    (item) => item.inquiryType === inquiry.type && item.statusKey === inquiry.moderationStatus\\n  )\\n\\n  if (!statusItem) {\\n    return 'Draft'\\n  }\\n\\n  return statusItem.label || 'Draft'\\n})\\n\\nconst moderationStatusInfo = computed(() => {\\n  if (!moderationStatus.value || !sessionStore.appSettings?.moderationStatusTab) {\\n    return null\\n  }\\n\\n  return sessionStore.appSettings.moderationStatusTab.find(\\n    (status) => status.status_key === moderationStatus.value\\n  )\\n})\\n</script>\\n\\n<template>\\n  <div class=\"inquiry-item\" :class=\"{ 'grid-view': gridView, 'list-view': !gridView }\">\\n    <!-- Mode liste -->\\n    <template v-if=\"!gridView\">\\n      <!-- <div v-if=\"inquiry.parentId!==0\">\\n\t\t\t<component :is=\"StatusIcons.LinkIcon\" :size=\"20\" />\\n\t\t\t <router-link :to=\"`/inquiry/${parentId}`\" class=\"underline\">\\n      \t\t\t\tid: #{{ inquiry.parentId }}\\n    \t\t\t </router-link>\\n\t\t\t</div> -->\\n      <div class=\"item__type\" :title=\"inquiry.type\">\\n        <component\\n          :is=\"InquiryTypesUI[inquiry.type].icon\"\\n          :title=\"InquiryTypesUI[inquiry.type].label\"\\n        />\\n      </div>\\n\\n      <div v-if=\"noLink\" class=\"item__title\" :class=\"{ closed: inquiry.status.isExpired }\">\\n        <div class=\"title\" :title=\"inquiry.title\">\\n          {{ inquiry.title }}\\n        </div>\\n\\n        <div class=\"description_line\">\\n          <component :is=\"StatusIcons.Lock\" :size=\"16\" />\\n          <div class=\"description\">\\n            {{\\n              t('agora', 'No access to this inquiry of {ownerName}.', {\\n                ownerName: inquiry.owner.displayName,\\n              })\\n            }}\\n          </div>\\n        </div>\\n      </div>\\n\\n      <RouterLink\\n        v-else\\n        class=\"item__title\"\\n        :title=\"inquiry.description\"\\n        :to=\"{\\n          name: 'inquiry',\\n          params: { id: inquiry.id },\\n        }\"\\n        :class=\"{\\n          closed: inquiry.status.isExpired,\\n          active: inquiry.id === inquiryStore.id,\\n        }\"\\n      >\\n        <div class=\"title_line\">\\n          <span class=\"title\">\\n            {{ inquiry.title }}\\n          </span>\\n        </div>\\n\\n        <div class=\"description_line\">\\n          <component\\n            :is=\"BadgeIcons.archived\"\\n            v-if=\"!preferencesStore.user.verboseInquiriesList && inquiry.status.isArchived\"\\n            :title=\"t('agora', 'Archived inquiry": "Archived {relativeTime}', {\\n      relativeTime: DateTime.fromMillis(inquiry.status.archivedDate * 1000).toRelative() as string,\\n    })\\n  }\\n\\n  return t('agora', 'Started {relativeTime} from {ownerName}', {\\n    ownerName: inquiry.owner.displayName,\\n    relativeTime: timeCreatedRelative.value,\\n  })\\n})\\n\\nconst formatDate = (timestamp: number) =>\\n  DateTime.fromMillis(timestamp * 1000).toLocaleString(DateTime.DATE_SHORT)\\n\\nconst moderationStatus = computed(\\n  () => inquiry.moderationStatus || inquiryStore.getInquiryModerationStatus?.(inquiry.id)\\n)\\n\\nconst moderationStatusIcon = computed(() => {\\n  const statusItem = sessionStore.appSettings.moderationStatusTab.find(\\n    (item) => item.inquiryType === inquiry.type && item.statusKey === inquiry.moderationStatus\\n  )\\n\\n  if (!statusItem) {\\n    return StatusIcons.Draft\\n  }\\n\\n  return StatusIcons[statusItem.icon] || StatusIcons.Draft\\n})\\n\\nconst moderationStatusLabel = computed(() => {\\n  const statusItem = sessionStore.appSettings.moderationStatusTab.find(\\n    (item) => item.inquiryType === inquiry.type && item.statusKey === inquiry.moderationStatus\\n  )\\n\\n  if (!statusItem) {\\n    return 'Draft'\\n  }\\n\\n  return statusItem.label || 'Draft'\\n})\\n\\nconst moderationStatusInfo = computed(() => {\\n  if (!moderationStatus.value || !sessionStore.appSettings?.moderationStatusTab) {\\n    return null\\n  }\\n\\n  return sessionStore.appSettings.moderationStatusTab.find(\\n    (status) => status.status_key === moderationStatus.value\\n  )\\n})\\n</script>\\n\\n<template>\\n  <div class=\"inquiry-item\" :class=\"{ 'grid-view': gridView, 'list-view': !gridView }\">\\n    <!-- Mode liste -->\\n    <template v-if=\"!gridView\">\\n      <!-- <div v-if=\"inquiry.parentId!==0\">\\n\t\t\t<component :is=\"StatusIcons.LinkIcon\" :size=\"20\" />\\n\t\t\t <router-link :to=\"`/inquiry/${parentId}`\" class=\"underline\">\\n      \t\t\t\tid: #{{ inquiry.parentId }}\\n    \t\t\t </router-link>\\n\t\t\t</div> -->\\n      <div class=\"item__type\" :title=\"inquiry.type\">\\n        <component\\n          :is=\"InquiryTypesUI[inquiry.type].icon\"\\n          :title=\"InquiryTypesUI[inquiry.type].label\"\\n        />\\n      </div>\\n\\n      <div v-if=\"noLink\" class=\"item__title\" :class=\"{ closed: inquiry.status.isExpired }\">\\n        <div class=\"title\" :title=\"inquiry.title\">\\n          {{ inquiry.title }}\\n        </div>\\n\\n        <div class=\"description_line\">\\n          <component :is=\"StatusIcons.Lock\" :size=\"16\" />\\n          <div class=\"description\">\\n            {{\\n              t('agora', 'No access to this inquiry of {ownerName}.', {\\n                ownerName: inquiry.owner.displayName,\\n              })\\n            }}\\n          </div>\\n        </div>\\n      </div>\\n\\n      <RouterLink\\n        v-else\\n        class=\"item__title\"\\n        :title=\"inquiry.description\"\\n        :to=\"{\\n          name: 'inquiry',\\n          params: { id: inquiry.id },\\n        }\"\\n        :class=\"{\\n          closed: inquiry.status.isExpired,\\n          active: inquiry.id === inquiryStore.id,\\n        }\"\\n      >\\n        <div class=\"title_line\">\\n          <span class=\"title\">\\n            {{ inquiry.title }}\\n          </span>\\n        </div>\\n\\n        <div class=\"description_line\">\\n          <component\\n            :is=\"BadgeIcons.archived\"\\n            v-if=\"!preferencesStore.user.verboseInquiriesList && inquiry.status.isArchived\"\\n            :title=\"t('agora', 'Archived inquiry",
    "{count} comments', {\\n              count: inquiry.status.countComments || 0,\\n            })\\n          \"\\n        >\\n          <component :is=\"StatusIcons.ForumOutline\" :size=\"12\" class=\"icon\" />\\n          <span>{{ inquiry.status.countComments || 0 }}</span>\\n        </div>\\n\\n        <div\\n          v-if=\"canSupport(context)\"\\n          class=\"badge-bubble\"\\n          :title=\"\\n            t('agora', '{count} supports', {\\n              count: inquiry.status.countSupports || 0,\\n            })\\n          \"\\n          @click=\"onToggleSupport\"\\n        >\\n          <ThumbIcon :supported=\"inquiry.currentUserStatus.hasSupported\" :size=\"22\" />\\n          <span>{{ inquiry.status.countSupports || 0 }}</span>\\n        </div>\\n\\n        <div\\n          v-if=\"inquiry.type !== 'official' && preferencesStore.user.verboseInquiriesList\"\\n          class=\"badge-bubble\"\\n          :title=\"\\n            t('agora', '{count} participants', {\\n              count: inquiry.status.countParticipants,\\n            })\\n          \"\\n        >\\n          <component :is=\"BadgeIcons.participated\" :size=\"16\" class=\"icon\" />\\n          <span>{{ inquiry.status.countParticipants }}</span>\\n        </div>\\n\\n        <div\\n          v-if=\"\\n            preferencesStore.user.verboseInquiriesList &&\\n            !inquiry.status.isArchived &&\\n            inquiry.configuration.access === 'private'\\n          \"\\n          class=\"badge-bubble\"\\n          :title=\"t('agora', 'Private inquiry, only invited participants have access": "{count} comments', {\\n              count: inquiry.status.countComments || 0,\\n            })\\n          \"\\n        >\\n          <component :is=\"StatusIcons.ForumOutline\" :size=\"12\" class=\"icon\" />\\n          <span>{{ inquiry.status.countComments || 0 }}</span>\\n        </div>\\n\\n        <div\\n          v-if=\"canSupport(context)\"\\n          class=\"badge-bubble\"\\n          :title=\"\\n            t('agora', '{count} supports', {\\n              count: inquiry.status.countSupports || 0,\\n            })\\n          \"\\n          @click=\"onToggleSupport\"\\n        >\\n          <ThumbIcon :supported=\"inquiry.currentUserStatus.hasSupported\" :size=\"22\" />\\n          <span>{{ inquiry.status.countSupports || 0 }}</span>\\n        </div>\\n\\n        <div\\n          v-if=\"inquiry.type !== 'official' && preferencesStore.user.verboseInquiriesList\"\\n          class=\"badge-bubble\"\\n          :title=\"\\n            t('agora', '{count} participants', {\\n              count: inquiry.status.countParticipants,\\n            })\\n          \"\\n        >\\n          <component :is=\"BadgeIcons.participated\" :size=\"16\" class=\"icon\" />\\n          <span>{{ inquiry.status.countParticipants }}</span>\\n        </div>\\n\\n        <div\\n          v-if=\"\\n            preferencesStore.user.verboseInquiriesList &&\\n            !inquiry.status.isArchived &&\\n            inquiry.configuration.access === 'private'\\n          \"\\n          class=\"badge-bubble\"\\n          :title=\"t('agora', 'Private inquiry, only invited participants have access",
    "Open inquiry, accessible to all users of this instance": "Open inquiry, accessible to all users of this instance",
    "Archived inquiry": "Archived inquiry",
    "This inquiry get participation": "This inquiry get participation",
    "Expiration": "Expiration",
    "Private inquiry, only invited participants have access": "Private inquiry, only invited participants have access",
    "The inquiry group was deleted by removing the last member.": "The inquiry group was deleted by removing the last member.",
    "Error removing inquiry from group.": "Error removing inquiry from group.",
    "Error creating new inquiry group.": "Error creating new inquiry group.",
    "Error archiving/restoring inquiry.": "Error archiving/restoring inquiry.",
    "Back": "Back",
    "Restore inquiry": "Restore inquiry",
    "Transfer inquiry ownership": "Transfer inquiry ownership",
    "Create new group": "Create new group",
    "New group name": "New group name",
    "Sort by title": "Sort by title",
    "Sort by type": "Sort by type",
    "Sort by comments": "Sort by comments",
    "Sort by supports": "Sort by supports",
    "Sort by last interaction": "Sort by last interaction",
    "Sort by creation date": "Sort by creation date",
    "Sort by expiration date": "Sort by expiration date",
    "Sort by owner name": "Sort by owner name",
    "Direction": "Direction",
    "Descending": "Descending",
    "Ascending": "Ascending",
    "Loading inquiry...": "Loading inquiry...",
    "Home": "Home",
    "Main Inquiry": "Main Inquiry",
    "Grievance": "Grievance",
    "Official Response": "Official Response",
    "Enter a description": "Enter a description",
    "Choose a description for the overview page": "Choose a description for the overview page",
    "Enter extended title": "Enter extended title",
    "Error updating inquiry group": "Error updating inquiry group",
    "Name": "Name",
    "Extended title": "Extended title",
    "Description": "Description",
    "Error deleting inquiry.": "Error deleting inquiry.",
    "This will finally delete the inquiry.": "This will finally delete the inquiry.",
    "OK": "OK",
    "Add date option": "Add date option",
    "Adding options is disabled": "Adding options is disabled",
    "Existing options": "Existing options",
    "Transfered inquiry to {user}.', {\\n        user: newUser.value ? newUser.value.displayName : '',\\n      })\\n    )\\n  } catch {\\n    showError(t('agora', 'Error transfering inquiry.": "Transfered inquiry to {user}.', {\\n        user: newUser.value ? newUser.value.displayName : '',\\n      })\\n    )\\n  } catch {\\n    showError(t('agora', 'Error transfering inquiry.",
    "Select the user to transfer the ownership to": "Select the user to transfer the ownership to",
    "Clone to option sequence": "Clone to option sequence",
    "Step unit": "Step unit",
    "Step width": "Step width",
    "Amount": "Amount",
    "Restore option": "Restore option",
    "Delete option": "Delete option",
    "Clone option": "Clone option",
    "Unconfirm option": "Unconfirm option",
    "Confirm option": "Confirm option",
    "Sort": "Sort",
    "Add options list (one option per line)": "Add options list (one option per line)",
    "Paste option list": "Paste option list",
    "Options added": "Options added",
    "Error adding options', {\\n          optionText: newInquiryTexts.value,\\n        })\\n      )\\n    }\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div>\\n    <NcActions>\\n      <NcActionButton :name=\"caption\" :aria-label=\"caption\" @click=\"showModal = true\">\\n        <template #icon>\\n          <PasteIcon />\\n        </template>\\n      </NcActionButton>\\n    </NcActions>\\n\\n    <NcModal v-if=\"showModal\" size=\"small\" :can-close=\"false\">\\n      <div class=\"option-clone-date modal__content\">\\n        <h2>{{ t('agora', 'Create multiple options at once": "Error adding options', {\\n          optionText: newInquiryTexts.value,\\n        })\\n      )\\n    }\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div>\\n    <NcActions>\\n      <NcActionButton :name=\"caption\" :aria-label=\"caption\" @click=\"showModal = true\">\\n        <template #icon>\\n          <PasteIcon />\\n        </template>\\n      </NcActionButton>\\n    </NcActions>\\n\\n    <NcModal v-if=\"showModal\" size=\"small\" :can-close=\"false\">\\n      <div class=\"option-clone-date modal__content\">\\n        <h2>{{ t('agora', 'Create multiple options at once",
    "Checking name …": "Checking name …",
    "A name is required.": "A name is required.",
    "The name {username} is invalid or reserved.', {\\n      username: userName.value,\\n    })\\n  }\\n  return ''\\n})\\n\\nconst emailAddressHint = computed(() => {\\n  if (emailGeneratedStatus.value === 'checking": "The name {username} is invalid or reserved.', {\\n      username: userName.value,\\n    })\\n  }\\n  return ''\\n})\\n\\nconst emailAddressHint = computed(() => {\\n  if (emailGeneratedStatus.value === 'checking",
    "Checking email address …": "Checking email address …",
    "An email address is required.": "An email address is required.",
    "Invalid email address.": "Invalid email address.",
    "Email could not be sent to {emailAddress}', {\\n          emailAddress: sessionStore.currentUser.emailAddress,\\n        })\\n      )\\n    }\\n  } catch (error) {\\n    if ((error as AxiosError)?.code === 'ERR_CANCELED": "Email could not be sent to {emailAddress}', {\\n          emailAddress: sessionStore.currentUser.emailAddress,\\n        })\\n      )\\n    }\\n  } catch (error) {\\n    if ((error as AxiosError)?.code === 'ERR_CANCELED",
    "Error registering to inquiry', { error }))\\n    throw error\\n  } finally {\\n    sendRegistration.value = false\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div class=\"modal__content\">\\n    <div class=\"modal__registration\">\\n      <div class=\"registration__registration\">\\n        <h2>{{ t('agora', 'Guest participants": "Error registering to inquiry', { error }))\\n    throw error\\n  } finally {\\n    sendRegistration.value = false\\n  }\\n}\\n</script>\\n\\n<template>\\n  <div class=\"modal__content\">\\n    <div class=\"modal__registration\">\\n      <div class=\"registration__registration\">\\n        <h2>{{ t('agora', 'Guest participants",
    "Enter your name or a nickname": "Enter your name or a nickname",
    "Email address (mandatory)": "Email address (mandatory)",
    "Email address (optional)": "Email address (optional)",
    "Remember me for 30 days": "Remember me for 30 days",
    "Legal Notice": "Legal Notice",
    "Privacy policy": "Privacy policy",
    "Registered accounts": "Registered accounts",
    "Login": "Login",
    "Otherwise participate as a guest participant.": "Otherwise participate as a guest participant.",
    "Enable the automatic inquiry archiving": "Enable the automatic inquiry archiving",
    "Days after which inquiries should be archived after closing": "Days after which inquiries should be archived after closing",
    "No parent": "No parent",
    "Are you sure you want to delete this item?": "Are you sure you want to delete this item?",
    "Error deleting item": "Error deleting item",
    "Loading categories and locations...": "Loading categories and locations...",
    "Categories": "Categories",
    "Locations": "Locations",
    "Add New Category": "Add New Category",
    "Category Name": "Category Name",
    "Enter category name": "Enter category name",
    "Select parent category": "Select parent category",
    "Add Category": "Add Category",
    "Categories Tree": "Categories Tree",
    "Add New Location": "Add New Location",
    "Location Name": "Location Name",
    "Enter location name": "Enter location name",
    "Select parent location": "Select parent location",
    "Add Location": "Add Location",
    "Locations Tree": "Locations Tree",
    "Edit": "Edit",
    "Select parent": "Select parent",
    "Enable the usage of the combo view globally": "Enable the usage of the combo view globally",
    "Enable only for the following groups": "Enable only for the following groups",
    "Leave empty to disable globally": "Leave empty to disable globally",
    "Enable the automatic deletion of archived inquiries": "Enable the automatic deletion of archived inquiries",
    "Add terms links also to the email footer": "Add terms links also to the email footer",
    "Additional email disclaimer": "Additional email disclaimer",
    "Preview": "Preview",
    "Load inquiries into the navigation.": "Load inquiries into the navigation.",
    "Textarea": "Textarea",
    "Tiptap": "Tiptap",
    "WYSIWYG": "WYSIWYG",
    "Collectives": "Collectives",
    "Inquiry Download Settings": "Inquiry Download Settings",
    "Enable the spreadsheet download of inquiries globally": "Enable the spreadsheet download of inquiries globally",
    "Inquiry Type Settings": "Inquiry Type Settings",
    "Configure settings for each type of inquiry": "Configure settings for each type of inquiry",
    "Inquiry Type": "Inquiry Type",
    "Enabled": "Enabled",
    "Editor Type": "Editor Type",
    "Select editor type": "Select editor type",
    "Enable the inquiry creation globally": "Enable the inquiry creation globally",
    "Rich Text Editor": "Rich Text Editor",
    "Simple Text Area": "Simple Text Area",
    "Nextcloud text editor": "Nextcloud text editor",
    "Configure default settings for each inquiry type": "Configure default settings for each inquiry type",
    "Loading inquiry types...": "Loading inquiry types...",
    "No inquiry types available": "No inquiry types available",
    "Select inquiry type:": "Select inquiry type:",
    "Settings": "Settings",
    "Allow support": "Allow support",
    "Allow users to support this inquiry type": "Allow users to support this inquiry type",
    "Allow comments": "Allow comments",
    "Allow users to comment on this inquiry type": "Allow users to comment on this inquiry type",
    "Allow file attachments": "Allow file attachments",
    "Allow users to attach files to this inquiry type": "Allow users to attach files to this inquiry type",
    "Editor type:": "Editor type:",
    "Select the editor type for this inquiry": "Select the editor type for this inquiry",
    "Run autoreminder": "Run autoreminder",
    "Run janitor": "Run janitor",
    "Run notification": "Run notification",
    "Autoreminder started": "Autoreminder started",
    "Autoreminder failed": "Autoreminder failed",
    "Janitor started": "Janitor started",
    "Janitor failed": "Janitor failed",
    "Notification started": "Notification started",
    "Notification failed": "Notification failed",
    "Please understand, that the jobs were defined as asynchronous jobs by intention.": "Please understand, that the jobs were defined as asynchronous jobs by intention.",
    "Only use them, if it is absolutely neccessary (i.error. your cron does not work properly) or for testing.": "Only use them, if it is absolutely neccessary (i.error. your cron does not work properly) or for testing.",
    "Starting the jobs does not mean, that the rules for these actions are overridden.": "Starting the jobs does not mean, that the rules for these actions are overridden.",
    "Each job can only be run once. If you want to rerun them, you have to refresh the page.": "Each job can only be run once. If you want to rerun them, you have to refresh the page.",
    "If you want to see the result, please check the logs.": "If you want to see the result, please check the logs.",
    "Enter the URL of your privacy policy": "Enter the URL of your privacy policy",
    "Enter the URL of your legal notice": "Enter the URL of your legal notice",
    "Privacy policy link:": "Privacy policy link:",
    "Legal terms link:": "Legal terms link:",
    "Are you sure you want to delete this status?": "Are you sure you want to delete this status?",
    "Select Inquiry Type": "Select Inquiry Type",
    "Statuses for {type}', {\\n            type: currentInquiryTypeLabel,\\n          })\\n        }}\\n      </h3>\\n\\n      <div v-if=\"statuses.length === 0\" class=\"empty-state\">\\n        <p>\\n          {{ t('agora', 'No statuses configured for this inquiry type.": "Statuses for {type}', {\\n            type: currentInquiryTypeLabel,\\n          })\\n        }}\\n      </h3>\\n\\n      <div v-if=\"statuses.length === 0\" class=\"empty-state\">\\n        <p>\\n          {{ t('agora', 'No statuses configured for this inquiry type.",
    "Final": "Final",
    "Non-Final": "Non-Final",
    "Up": "Up",
    "Down": "Down",
    "Add New Status": "Add New Status",
    "Status Key": "Status Key",
    "Enter unique status key": "Enter unique status key",
    "Label": "Label",
    "Enter display label": "Enter display label",
    "Enter description (optional)": "Enter description (optional)",
    "Select Icon": "Select Icon",
    "Final Status": "Final Status",
    "Final statuses cannot be changed once set": "Final statuses cannot be changed once set",
    "Add Status": "Add Status",
    "Edit Status": "Edit Status",
    "Save Changes": "Save Changes",
    "Moderator Rights": "Moderator Rights",
    "Define permissions for users with moderator role": "Define permissions for users with moderator role",
    "Modify inquiries": "Modify inquiries",
    "Allow moderators to modify existing inquiries": "Allow moderators to modify existing inquiries",
    "Delete inquiries": "Delete inquiries",
    "Allow moderators to delete inquiries": "Allow moderators to delete inquiries",
    "Archive inquiries": "Archive inquiries",
    "Allow moderators to archive inquiries": "Allow moderators to archive inquiries",
    "Official Rights": "Official Rights",
    "Define permissions for users with official role": "Define permissions for users with official role",
    "Allow officials to modify existing inquiries": "Allow officials to modify existing inquiries",
    "Allow officials to delete inquiries": "Allow officials to delete inquiries",
    "Allow officials to archive inquiries": "Allow officials to archive inquiries",
    "Moderation status": "Moderation status",
    "Allow officials to manage Moderation status for all inquiry": "Allow officials to manage Moderation status for all inquiry",
    "Enable \"long inquirying\" for instant updates": "Enable \"long inquirying\" for instant updates",
    "Enable periodic requests of inquiry updates from the client": "Enable periodic requests of inquiry updates from the client",
    "Disable automatic updates (inquiry must be reloaded to get updates)": "Disable automatic updates (inquiry must be reloaded to get updates)",
    "Enable the creation of openly accessible inquiries globally": "Enable the creation of openly accessible inquiries globally",
    "Enable public shares of inquiries globally": "Enable public shares of inquiries globally",
    "Show email addresses of internal accounts": "Show email addresses of internal accounts",
    "Show only to members of the following groups": "Show only to members of the following groups",
    "Leave empty to disable globally.": "Leave empty to disable globally.",
    "Enable unrestricted owners globally": "Enable unrestricted owners globally",
    "Effects on restricted owners:": "Effects on restricted owners:",
    "Anonymizing a inquiry of a restricted owner means that this inquiry is anonymous for everyone, including the owner.": "Anonymizing a inquiry of a restricted owner means that this inquiry is anonymous for everyone, including the owner.",
    "Deleting and changing inquiries of participants is not possible": "Deleting and changing inquiries of participants is not possible",
    "Use calendar lookup for conflicting calendar events": "Use calendar lookup for conflicting calendar events",
    "Select the calendars to use for lookup.": "Select the calendars to use for lookup.",
    "Proposal agora inquiry default view to list view": "Proposal agora inquiry default view to list view",
    "Check this, if you prefer to display text inquiry in grid view. The initial default is list view.": "Check this, if you prefer to display text inquiry in grid view. The initial default is list view.",
    "Verbose inquiry list": "Verbose inquiry list",
    "Check this for more inquiry information in the overview.": "Check this for more inquiry information in the overview.",
    "Enter the amount of days, inquiries without activity stay in the relevant list:": "Enter the amount of days, inquiries without activity stay in the relevant list:",
    "The style settings are still experimental!": "The style settings are still experimental!",
    "Use modal 'Add inquiry ' dialog instead of embedded dialog in Navigation bar": "Use modal 'Add inquiry ' dialog instead of embedded dialog in Navigation bar",
    "Use 'Add inquiry ' as button in inquiry list instead of inside the navigation": "Use 'Add inquiry ' as button in inquiry list instead of inside the navigation",
    "Use alternative styling for the comments sidebar": "Use alternative styling for the comments sidebar",
    "Use alternative inquiry page styling": "Use alternative inquiry page styling",
    "Personal preferences": "Personal preferences",
    "Styles": "Styles",
    "Share label": "Share label",
    "Has been supported": "Has been supported",
    "Has not supported": "Has not supported",
    "Internal access": "Internal access",
    "This inquiry is private": "This inquiry is private",
    "This is an openly accessible inquiry": "This is an openly accessible inquiry",
    "Resend invitation mail": "Resend invitation mail",
    "Send invitation mail": "Send invitation mail",
    "Error sending invitation": "Error sending invitation",
    "Invitation sent to {displayName} ({emailAddress})', {\\n          emailAddress: item.emailAddress,\\n          displayName: item.displayName,\\n        })\\n      )\\n    })\\n  }\\n  if (sentResult?.abortedMails) {\\n    sentResult.abortedMails.forEach((item) => {\\n      showError(\\n        t('agora', 'Error sending invitation to {displayName} ({emailAddress})', {\\n          emailAddress: item.emailAddress,\\n          displayName: item.displayName,\\n        })\\n      )\\n    })\\n  }\\n}\\n\\nconst resolveGroups = computed<ButtonProps>(() => ({\\n  activate:\\n    !share.groupId &&\\n    !resolving.value &&\\n    !share.deleted &&\\n    ['contactGroup', 'circle'].includes(share.type),\\n  name: t('agora', 'Resolve group into individual invitations": "Invitation sent to {displayName} ({emailAddress})', {\\n          emailAddress: item.emailAddress,\\n          displayName: item.displayName,\\n        })\\n      )\\n    })\\n  }\\n  if (sentResult?.abortedMails) {\\n    sentResult.abortedMails.forEach((item) => {\\n      showError(\\n        t('agora', 'Error sending invitation to {displayName} ({emailAddress})', {\\n          emailAddress: item.emailAddress,\\n          displayName: item.displayName,\\n        })\\n      )\\n    })\\n  }\\n}\\n\\nconst resolveGroups = computed<ButtonProps>(() => ({\\n  activate:\\n    !share.groupId &&\\n    !resolving.value &&\\n    !share.deleted &&\\n    ['contactGroup', 'circle'].includes(share.type),\\n  name: t('agora', 'Resolve group into individual invitations",
    "Resolving of {name} is not possible. The contacts app is not enabled.', {\\n        name: share.user.displayName,\\n      })\\n    case 'Circles is not enabled for this user':\\n      return t('agora', 'Resolving of {name} is not possible. The circles app is not enabled.', {\\n        name: share.user.displayName,\\n      })\\n    default:\\n      return t('agora', 'Error resolving {name}.', {\\n        name: share.user.displayName,\\n      })\\n  }\\n}\\n\\nconst switchAdmin = computed<ButtonProps>(() => ({\\n  activate: !share.groupId && !share.deleted && (share.type === 'user' || share.type === 'admin": "Resolving of {name} is not possible. The contacts app is not enabled.', {\\n        name: share.user.displayName,\\n      })\\n    case 'Circles is not enabled for this user':\\n      return t('agora', 'Resolving of {name} is not possible. The circles app is not enabled.', {\\n        name: share.user.displayName,\\n      })\\n    default:\\n      return t('agora', 'Error resolving {name}.', {\\n        name: share.user.displayName,\\n      })\\n  }\\n}\\n\\nconst switchAdmin = computed<ButtonProps>(() => ({\\n  activate: !share.groupId && !share.deleted && (share.type === 'user' || share.type === 'admin",
    "Grant administrative inquiry access": "Grant administrative inquiry access",
    "Withdraw administrative inquiry access": "Withdraw administrative inquiry access",
    "Copy link to clipboard": "Copy link to clipboard",
    "Link copied to clipboard": "Link copied to clipboard",
    "Error while copying link to clipboard": "Error while copying link to clipboard",
    "Show QR code": "Show QR code",
    "Unlock share": "Unlock share",
    "Lock share": "Lock share",
    "Error while changing lock status of share {displayName}', {\\n          displayName: share.user.displayName,\\n        })\\n      )\\n    }\\n  },\\n}))\\n\\nconst deleteShareButton = computed<ButtonProps>(() => ({\\n  activate: isDirectShare.value,\\n  name: share.deleted ? t('agora', 'Restore share": "Error while changing lock status of share {displayName}', {\\n          displayName: share.user.displayName,\\n        })\\n      )\\n    }\\n  },\\n}))\\n\\nconst deleteShareButton = computed<ButtonProps>(() => ({\\n  activate: isDirectShare.value,\\n  name: share.deleted ? t('agora', 'Restore share",
    "Delete share": "Delete share",
    "Error while changing deleted status of share {displayName}', {\\n          displayName: share.user.displayName,\\n        })\\n      )\\n    }\\n  },\\n}))\\n\\nonMounted(() => {\\n  label.value.inputValue = share.label\\n})\\n\\n/**\\n *\\n */\\nasync function submitLabel() {\\n  sharesStore.writeLabel({\\n    token: share.token,\\n    label: label.value.inputValue,\\n  })\\n}\\n</script>\\n\\n<template>\\n  <NcActions>\\n    <NcActionInput\\n      v-if=\"isActivePublicShare\"\\n      v-bind=\"label.inputProps\"\\n      v-model=\"label.inputValue\"\\n      @submit=\"submitLabel()\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.edit\" />\\n      </template>\\n    </NcActionInput>\\n\\n    <NcActionButton\\n      v-if=\"resendInvitation.activate\"\\n      close-after-click\\n      :name=\"resendInvitation.name\"\\n      :aria-label=\"resendInvitation.name\"\\n      @click=\"resendInvitation.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.sendByMail\" />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionButton\\n      v-if=\"resolveGroups.activate\"\\n      close-after-click\\n      :disabled=\"resolving\"\\n      :name=\"resolveGroups.name\"\\n      :aria-label=\"resolveGroups.name\"\\n      @click=\"resolveGroups.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.restore\" />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionButton\\n      v-if=\"switchAdmin.activate\"\\n      close-after-click\\n      :name=\"switchAdmin.name\"\\n      :aria-label=\"switchAdmin.name\"\\n      @click=\"switchAdmin.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.adminGrant\" v-if=\"share.type === 'user'\" />\\n        <component :is=\"ShareIcons.adminRevoke\" v-else />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionButton\\n      v-if=\"copyLinkButton.activate\"\\n      close-after-click\\n      :name=\"copyLinkButton.name\"\\n      :aria-label=\"copyLinkButton.name\"\\n      @click=\"copyLinkButton.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.copyLink\" />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionButton\\n      v-if=\"showQrCodeButton.activate\"\\n      close-after-click\\n      :name=\"showQrCodeButton.name\"\\n      :aria-label=\"showQrCodeButton.name\"\\n      @click=\"showQrCodeButton.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.qrCode\" />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionCaption\\n      v-if=\"isActivePublicShare\"\\n      :name=\"t('agora', 'Options for the registration dialog": "Error while changing deleted status of share {displayName}', {\\n          displayName: share.user.displayName,\\n        })\\n      )\\n    }\\n  },\\n}))\\n\\nonMounted(() => {\\n  label.value.inputValue = share.label\\n})\\n\\n/**\\n *\\n */\\nasync function submitLabel() {\\n  sharesStore.writeLabel({\\n    token: share.token,\\n    label: label.value.inputValue,\\n  })\\n}\\n</script>\\n\\n<template>\\n  <NcActions>\\n    <NcActionInput\\n      v-if=\"isActivePublicShare\"\\n      v-bind=\"label.inputProps\"\\n      v-model=\"label.inputValue\"\\n      @submit=\"submitLabel()\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.edit\" />\\n      </template>\\n    </NcActionInput>\\n\\n    <NcActionButton\\n      v-if=\"resendInvitation.activate\"\\n      close-after-click\\n      :name=\"resendInvitation.name\"\\n      :aria-label=\"resendInvitation.name\"\\n      @click=\"resendInvitation.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.sendByMail\" />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionButton\\n      v-if=\"resolveGroups.activate\"\\n      close-after-click\\n      :disabled=\"resolving\"\\n      :name=\"resolveGroups.name\"\\n      :aria-label=\"resolveGroups.name\"\\n      @click=\"resolveGroups.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.restore\" />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionButton\\n      v-if=\"switchAdmin.activate\"\\n      close-after-click\\n      :name=\"switchAdmin.name\"\\n      :aria-label=\"switchAdmin.name\"\\n      @click=\"switchAdmin.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.adminGrant\" v-if=\"share.type === 'user'\" />\\n        <component :is=\"ShareIcons.adminRevoke\" v-else />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionButton\\n      v-if=\"copyLinkButton.activate\"\\n      close-after-click\\n      :name=\"copyLinkButton.name\"\\n      :aria-label=\"copyLinkButton.name\"\\n      @click=\"copyLinkButton.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.copyLink\" />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionButton\\n      v-if=\"showQrCodeButton.activate\"\\n      close-after-click\\n      :name=\"showQrCodeButton.name\"\\n      :aria-label=\"showQrCodeButton.name\"\\n      @click=\"showQrCodeButton.action\"\\n    >\\n      <template #icon>\\n        <component :is=\"ShareIcons.qrCode\" />\\n      </template>\\n    </NcActionButton>\\n\\n    <NcActionCaption\\n      v-if=\"isActivePublicShare\"\\n      :name=\"t('agora', 'Options for the registration dialog",
    "Email address is optional": "Email address is optional",
    "Email address is mandatory": "Email address is mandatory",
    "Do not ask for an email address": "Do not ask for an email address",
    "Add a new public link": "Add a new public link",
    "Error adding public link": "Error adding public link",
    "Shares": "Shares",
    "Error while adding share": "Error while adding share",
    "Add shares": "Add shares",
    "Type to add an individual share": "Type to add an individual share",
    "Locked shares (read only access)": "Locked shares (read only access)",
    "Invitation sent to {displayName} ({emailAddress})', {\\n          emailAddress: item.emailAddress,\\n          displayName: item.displayName,\\n        })\\n      )\\n    })\\n  }\\n  if (response.data.sentResult?.abortedMails) {\\n    response.data.sentResult.abortedMails.forEach((item) => {\\n      Logger.error('Mail could not be sent!', { recipient: item })\\n      showError(\\n        t('inquiries', 'Error sending invitation to {displayName} ({emailAddress})', {\\n          emailAddress: item.emailAddress,\\n          displayName: item.displayName,\\n        })\\n      )\\n    })\\n  }\\n}\\n</script>\\n\\n<template>\\n  <ConfigBox v-if=\"sharesStore.unsentInvitations.length\" :name=\"t('agora', 'Unsent invitations": "Invitation sent to {displayName} ({emailAddress})', {\\n          emailAddress: item.emailAddress,\\n          displayName: item.displayName,\\n        })\\n      )\\n    })\\n  }\\n  if (response.data.sentResult?.abortedMails) {\\n    response.data.sentResult.abortedMails.forEach((item) => {\\n      Logger.error('Mail could not be sent!', { recipient: item })\\n      showError(\\n        t('inquiries', 'Error sending invitation to {displayName} ({emailAddress})', {\\n          emailAddress: item.emailAddress,\\n          displayName: item.displayName,\\n        })\\n      )\\n    })\\n  }\\n}\\n</script>\\n\\n<template>\\n  <ConfigBox v-if=\"sharesStore.unsentInvitations.length\" :name=\"t('agora', 'Unsent invitations",
    "Resolve and send all invitations": "Resolve and send all invitations",
    "No activity yet": "No activity yet",
    "{file} uploaded', { file: response.name ?? file.name }))\\n    } catch (error) {\\n      console.error('Upload failed:', error)\\n      showError(t('agora', 'Failed to upload {file}', { file: file.name }))\\n    }\\n  }\\n}\\n\\nconst removeAttachment = async (index: number) => {\\n  const attachment = attachmentsStore.attachments[index]\\n  if (!attachment) return\\n\\n  try {\\n    if (attachment.id) {\\n      await attachmentsStore.delete(attachment.id)\\n    }\\n    attachmentsStore.attachments.splice(index, 1)\\n    showSuccess(t('agora', 'File has been removed !": "{file} uploaded', { file: response.name ?? file.name }))\\n    } catch (error) {\\n      console.error('Upload failed:', error)\\n      showError(t('agora', 'Failed to upload {file}', { file: file.name }))\\n    }\\n  }\\n}\\n\\nconst removeAttachment = async (index: number) => {\\n  const attachment = attachmentsStore.attachments[index]\\n  if (!attachment) return\\n\\n  try {\\n    if (attachment.id) {\\n      await attachmentsStore.delete(attachment.id)\\n    }\\n    attachmentsStore.attachments.splice(index, 1)\\n    showSuccess(t('agora', 'File has been removed !",
    "Delete attachment": "Delete attachment",
    "No comments": "No comments",
    "Be the first.": "Be the first.",
    "Receive notification email on activity to {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    : t('agora', 'Receive notification email on activity": "Receive notification email on activity to {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    : t('agora', 'Receive notification email on activity",
    "Change name": "Change name",
    "Name changed.": "Name changed.",
    "Error changing name.": "Error changing name.",
    "Edit Email Address": "Edit Email Address",
    "Email address {emailAddress} saved.', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n    setStatus('unchanged": "Email address {emailAddress} saved.', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n    setStatus('unchanged",
    "Error saving email address {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n    setStatus('error": "Error saving email address {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n    setStatus('error",
    "Inquiry group access": "Inquiry group access",
    "(deleted)": "(deleted)",
    "(locked)": "(locked)",
    "The participant got removed from this inquiry": "The participant got removed from this inquiry",
    "Administrative rights granted": "Administrative rights granted",
    "Anonymized participant": "Anonymized participant",
    "Deleted participant": "Deleted participant",
    "Token: {token}', { token: user.id })\\n  }\\n  return t('agora', 'Public link: {token}', { token: user.id })\\n})\\n\\nconst publicShareLabel = computed(() => {\\n  if (label === '": "Token: {token}', { token: user.id })\\n  }\\n  return t('agora', 'Public link: {token}', { token: user.id })\\n})\\n\\nconst publicShareLabel = computed(() => {\\n  if (label === '",
    "Public link": "Public link",
    "Resolve this group first!": "Resolve this group first!",
    "Email address deleted.": "Email address deleted.",
    "Error deleting email address {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n  }\\n}\\n\\n/**\\n *\\n */\\nasync function resendInvitation() {\\n  try {\\n    const response = await sessionStore.resendInvitation()\\n    if (response) {\\n      showSuccess(\\n        t('agora', 'Invitation resent to {emailAddress}', {\\n          emailAddress: response.data.share.user.emailAddress,\\n        })\\n      )\\n    }\\n  } catch {\\n    showError(\\n      t('agora', 'Mail could not be resent to {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n  }\\n}\\n\\n/**\\n *\\n */\\nfunction changeView(): void {\\n  emit(Event.TransitionsOff, 500)\\n  if (inquiryStore.type === 'project": "Error deleting email address {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n  }\\n}\\n\\n/**\\n *\\n */\\nasync function resendInvitation() {\\n  try {\\n    const response = await sessionStore.resendInvitation()\\n    if (response) {\\n      showSuccess(\\n        t('agora', 'Invitation resent to {emailAddress}', {\\n          emailAddress: response.data.share.user.emailAddress,\\n        })\\n      )\\n    }\\n  } catch {\\n    showError(\\n      t('agora', 'Mail could not be resent to {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n  }\\n}\\n\\n/**\\n *\\n */\\nfunction changeView(): void {\\n  emit(Event.TransitionsOff, 500)\\n  if (inquiryStore.type === 'project",
    "Your inquiries are reset": "Your inquiries are reset",
    "Error while resetting inquiries": "Error while resetting inquiries",
    "Edit email address": "Edit email address",
    "Email address {emailAddress} saved.', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n    setEMailStatus('unchanged": "Email address {emailAddress} saved.', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n    setEMailStatus('unchanged",
    "Error saving email address {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n    setEMailStatus('error": "Error saving email address {emailAddress}', {\\n        emailAddress: sessionStore.share.user.emailAddress,\\n      })\\n    )\\n    setEMailStatus('error",
    "Switch to table view": "Switch to table view",
    "Switch to list view": "Switch to list view",
    "Switch to date order": "Switch to date order",
    "Switch to original order": "Switch to original order",
    "Switch to ranked order": "Switch to ranked order",
    "Copy your personal link to clipboard": "Copy your personal link to clipboard",
    "Get your personal link per mail": "Get your personal link per mail",
    "Subscribe to notifications": "Subscribe to notifications",
    "Remove email address": "Remove email address",
    "Copy list of email addresses to clipboard": "Copy list of email addresses to clipboard",
    "Reset your inquiries": "Reset your inquiries",
    "Type to start searching …": "Type to start searching …",
    "Select users": "Select users",
    "Proposal": "Proposal",
    "Created": "Created",
    "Access": "Access",
    "Owner": "Owner",
    "Expire": "Expire",
    "Last interaction": "Last interaction",
    "Comments count": "Comments count",
    "Supports count": "Supports count",
    "Relevant": "Relevant",
    "Relevant inquiries": "Relevant inquiries",
    "Relevant inquiries which are relevant to you, because you are a participant, the owner or you are invited. Only inquiries not older than 100 days compared to creation, last interaction, expiration or latest option (for date inquiries) are shown.": "Relevant inquiries which are relevant to you, because you are a participant, the owner or you are invited. Only inquiries not older than 100 days compared to creation, last interaction, expiration or latest option (for date inquiries) are shown.",
    "My inquiries": "My inquiries",
    "These are all inquiries where you are the owner.": "These are all inquiries where you are the owner.",
    "Private inquiries": "Private inquiries",
    "All private inquiries, to which you have access.": "All private inquiries, to which you have access.",
    "Participated": "Participated",
    "All inquiries who get participation.": "All inquiries who get participation.",
    "Openly accessible inquiries": "Openly accessible inquiries",
    "A complete list with all openly accessible inquiries on this site.": "A complete list with all openly accessible inquiries on this site.",
    "All inquiries": "All inquiries",
    "All inquiries, where you have access to.": "All inquiries, where you have access to.",
    "Closed inquiries": "Closed inquiries",
    "All closed inquiries, where voting is disabled.": "All closed inquiries, where voting is disabled.",
    "Archive": "Archive",
    "My archived inquiries": "My archived inquiries",
    "Your archived inquiries are only accessible to you.": "Your archived inquiries are only accessible to you.",
    "Administration": "Administration",
    "Administrative access": "Administrative access",
    "You can delete, archive and take over inquiries in this list, but access is still not possible.": "You can delete, archive and take over inquiries in this list, but access is still not possible.",
    "Title must not be empty!": "Title must not be empty!",
    "Error writing inquiry": "Error writing inquiry",
    "Agora": "Agora",
    "Categories and Locations Management": "Categories and Locations Management",
    "Change globally location and category (for all accounts)": "Change globally location and category (for all accounts)",
    "Moderation status settings": "Moderation status settings",
    "Configure moderation statuses for each type of inquiry. Moderators will be able to set these statuses on inquiries.": "Configure moderation statuses for each type of inquiry. Moderators will be able to set these statuses on inquiries.",
    "Inquiry settings": "Inquiry settings",
    "Change inquiry settings globally (for all accounts)": "Change inquiry settings globally (for all accounts)",
    "Inquiry rights": "Inquiry rights",
    "Change inquiry rights globally (for all accounts)": "Change inquiry rights globally (for all accounts)",
    "Share settings": "Share settings",
    "Change share settings globally (for all accounts)": "Change share settings globally (for all accounts)",
    "Other settings": "Other settings",
    "Enable or disable individual features.": "Enable or disable individual features.",
    "Performance settings": "Performance settings",
    "If you are experiencing connection problems, change how auto updates are retrieved.": "If you are experiencing connection problems, change how auto updates are retrieved.",
    "Public inquiry registration dialog options": "Public inquiry registration dialog options",
    "These options regard the appearence of the registration dialog of public inquiries.": "These options regard the appearence of the registration dialog of public inquiries.",
    "Email options": "Email options",
    "Add links to legal terms, if they exist and add an optional disclaimer to emails.": "Add links to legal terms, if they exist and add an optional disclaimer to emails.",
    "Job control": "Job control",
    "Manually start backgropund jobs, independent from the cron schedule.": "Manually start backgropund jobs, independent from the cron schedule.",
    "Combined inquiries": "Combined inquiries",
    "Combine multiple date inquiries in a single view": "Combine multiple date inquiries in a single view",
    "No inquiries selected": "No inquiries selected",
    "Select inquiries by clicking on them in the right sidebar!": "Select inquiries by clicking on them in the right sidebar!",
    "No inquiries found for this category": "No inquiries found for this category",
    "Error setting dashboard list": "Error setting dashboard list",
    "403 - You are not allowed to access this inquiry": "403 - You are not allowed to access this inquiry",
    "Contact the owner, if you think that this is wrong.": "Contact the owner, if you think that this is wrong.",
    "{loadedInquiries} of {countInquiries} inquiry loaded.',\\n    '{loadedInquiries} of {countInquiries} inquiries loaded.',\\n    inquiriesStore.inquiriesFilteredSorted.length,\\n    {\\n      loadedInquiries: countLoadedInquiries.value,\\n      countInquiries: inquiriesStore.inquiriesFilteredSorted.length,\\n    }\\n  )\\n)\\n\\nconst description = computed(() => {\\n  if (route.name === 'group": "{loadedInquiries} of {countInquiries} inquiry loaded.',\\n    '{loadedInquiries} of {countInquiries} inquiries loaded.',\\n    inquiriesStore.inquiriesFilteredSorted.length,\\n    {\\n      loadedInquiries: countLoadedInquiries.value,\\n      countInquiries: inquiriesStore.inquiriesFilteredSorted.length,\\n    }\\n  )\\n)\\n\\nconst description = computed(() => {\\n  if (route.name === 'group",
    "Loading overview…": "Loading overview…",
    "Fetching inquiries…": "Fetching inquiries…",
    "Checking access…": "Checking access…",
    "Almost ready…": "Almost ready…",
    "Do not go away…": "Do not go away…",
    "Please be patient…": "Please be patient…",
    "Add one or change category!": "Add one or change category!",
    "Error loading more inquiries": "Error loading more inquiries",
    "Click here to load more": "Click here to load more",
    "{loadedInquiries} of {countInquiries} inquiry loaded.',\\n    '{loadedInquiries} of {countInquiries} inquiries loaded.',\\n    inquiriesStore.inquiriesFilteredSorted.length,\\n    {\\n      loadedInquiries: countLoadedInquiries.value,\\n      countInquiries: inquiriesStore.inquiriesFilteredSorted.length,\\n    }\\n  )\\n)\\n\\nasync function routeChild(childId: string) {\\n  router.push({ name: 'inquiry', params: { id: childId } })\\n}\\n\\nasync function loadInquiry(id: string) {\\n  try {\\n    const response = await inquiryStore.load(id)\\n    inquiryStore.childs = response.data.childs\\n    if (inquiryStore.childs.length === 0) {\\n      inquiryStore.status.forceEditMode = true\\n      editMode.value = true\\n    } else {\\n      inquiryStore.status.forceEditMode = false\\n      editMode.value = false\\n    }\\n    await nextTick()\\n    forceRenderKey.value+=1\\n  } catch (error) {\\n    console.error('Loading error:', error)\\n    showError(t('agora', 'Failed to load inquiry": "{loadedInquiries} of {countInquiries} inquiry loaded.',\\n    '{loadedInquiries} of {countInquiries} inquiries loaded.',\\n    inquiriesStore.inquiriesFilteredSorted.length,\\n    {\\n      loadedInquiries: countLoadedInquiries.value,\\n      countInquiries: inquiriesStore.inquiriesFilteredSorted.length,\\n    }\\n  )\\n)\\n\\nasync function routeChild(childId: string) {\\n  router.push({ name: 'inquiry', params: { id: childId } })\\n}\\n\\nasync function loadInquiry(id: string) {\\n  try {\\n    const response = await inquiryStore.load(id)\\n    inquiryStore.childs = response.data.childs\\n    if (inquiryStore.childs.length === 0) {\\n      inquiryStore.status.forceEditMode = true\\n      editMode.value = true\\n    } else {\\n      inquiryStore.status.forceEditMode = false\\n      editMode.value = false\\n    }\\n    await nextTick()\\n    forceRenderKey.value+=1\\n  } catch (error) {\\n    console.error('Loading error:', error)\\n    showError(t('agora', 'Failed to load inquiry",
    "Loading inquiry…": "Loading inquiry…",
    "Fetching configuration…": "Fetching configuration…",
    "Collecting elements…": "Collecting elements…",
    "This seems to be a huge inquiry, please be patient…": "This seems to be a huge inquiry, please be patient…",
    "Created on {date}', {\\n                  date: formatDate(inquiryStore.status.created),\\n                })\\n              \"\\n            >\\n              <component :is=\"StatusIcons.Calendar\" :size=\"16\" />\\n              <span class=\"date-label\">\\n                {{ formatDate(inquiryStore.status.created) }}\\n              </span>\\n            </div>\\n\\n            <div\\n              v-if=\"inquiryStore.status?.lastInteraction\"\\n              class=\"metadata-item\"\\n              :title=\"\\n                t('agora', 'Last interaction on {date}', {\\n                  date: formatDate(inquiryStore.status.lastInteraction),\\n                })\\n              \"\\n            >\\n              <component :is=\"StatusIcons.Updated\" :size=\"16\" />\\n              <span class=\"date-label\">\\n                {{ formatDate(inquiryStore.status.lastInteraction) }}\\n              </span>\\n            </div>\\n\\n            <div\\n              id=\"expiring\"\\n              class=\"metadata-item\"\\n              :class=\"closeToClosing ? 'closing' : 'open'\"\\n              :title=\"\\n                t('agora', 'Closing {relativeExpirationTime}', {\\n                  relativeExpirationTime: timeExpirationRelative,\\n                })\\n              \"\\n            >\\n              <component :is=\"InquiryGeneralIcons.expiration\" :size=\"16\" />\\n              <span class=\"date-label\">\\n                {{\\n                  t('agora', 'Closing {relativeExpirationTime}', {\\n                    relativeExpirationTime: timeExpirationRelative,\\n                  })\\n                }}\\n              </span>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <InquiryHeaderButtons />\\n      </template>\\n    </HeaderBar>\\n\\n    <InquiryInfoLine v-if=\"editMode\" />\\n\\n    <div class=\"area__main\">\\n      <IntersectionObserver\\n        v-if=\"inquiryStore.viewMode === 'table-view'\"\\n        id=\"table-observer\"\\n        v-model=\"tableSticky\"\\n      />\\n\\n      <Collapsible v-if=\"inquiryStore.description\" class=\"sticky-left\" v-bind=\"collapsibleProps\" />\\n\\n      <div class=\"view-content\">\\n        <InquiryEditViewForm v-if=\"editMode\" />\\n        <InquiryTransition\\n          v-else\\n          :is-loaded-parent=\"isAppLoaded\"\\n          @route-child=\"routeChild\"\\n          @edit-parent=\"enableEditMode\"\\n        />\\n      </div>\\n\\n      <InquiryInfoCards class=\"sticky-left\" />\\n\\n      <IntersectionObserver\\n        v-if=\"showMore\"\\n        key=\"observer\"\\n        class=\"observer_section\"\\n        @visible=\"loadMore\"\\n      >\\n        <div class=\"clickable_load_more\" @click=\"loadMore\">\\n          {{ infoLoaded }}\\n          {{ t('agora', 'Click here to load more": "Created on {date}', {\\n                  date: formatDate(inquiryStore.status.created),\\n                })\\n              \"\\n            >\\n              <component :is=\"StatusIcons.Calendar\" :size=\"16\" />\\n              <span class=\"date-label\">\\n                {{ formatDate(inquiryStore.status.created) }}\\n              </span>\\n            </div>\\n\\n            <div\\n              v-if=\"inquiryStore.status?.lastInteraction\"\\n              class=\"metadata-item\"\\n              :title=\"\\n                t('agora', 'Last interaction on {date}', {\\n                  date: formatDate(inquiryStore.status.lastInteraction),\\n                })\\n              \"\\n            >\\n              <component :is=\"StatusIcons.Updated\" :size=\"16\" />\\n              <span class=\"date-label\">\\n                {{ formatDate(inquiryStore.status.lastInteraction) }}\\n              </span>\\n            </div>\\n\\n            <div\\n              id=\"expiring\"\\n              class=\"metadata-item\"\\n              :class=\"closeToClosing ? 'closing' : 'open'\"\\n              :title=\"\\n                t('agora', 'Closing {relativeExpirationTime}', {\\n                  relativeExpirationTime: timeExpirationRelative,\\n                })\\n              \"\\n            >\\n              <component :is=\"InquiryGeneralIcons.expiration\" :size=\"16\" />\\n              <span class=\"date-label\">\\n                {{\\n                  t('agora', 'Closing {relativeExpirationTime}', {\\n                    relativeExpirationTime: timeExpirationRelative,\\n                  })\\n                }}\\n              </span>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <InquiryHeaderButtons />\\n      </template>\\n    </HeaderBar>\\n\\n    <InquiryInfoLine v-if=\"editMode\" />\\n\\n    <div class=\"area__main\">\\n      <IntersectionObserver\\n        v-if=\"inquiryStore.viewMode === 'table-view'\"\\n        id=\"table-observer\"\\n        v-model=\"tableSticky\"\\n      />\\n\\n      <Collapsible v-if=\"inquiryStore.description\" class=\"sticky-left\" v-bind=\"collapsibleProps\" />\\n\\n      <div class=\"view-content\">\\n        <InquiryEditViewForm v-if=\"editMode\" />\\n        <InquiryTransition\\n          v-else\\n          :is-loaded-parent=\"isAppLoaded\"\\n          @route-child=\"routeChild\"\\n          @edit-parent=\"enableEditMode\"\\n        />\\n      </div>\\n\\n      <InquiryInfoCards class=\"sticky-left\" />\\n\\n      <IntersectionObserver\\n        v-if=\"showMore\"\\n        key=\"observer\"\\n        class=\"observer_section\"\\n        @visible=\"loadMore\"\\n      >\\n        <div class=\"clickable_load_more\" @click=\"loadMore\">\\n          {{ infoLoaded }}\\n          {{ t('agora', 'Click here to load more",
    "No inquiries found": "No inquiries found",
    "View all": "View all",
    "404 - inquiry not found": "404 - inquiry not found",
    "Enter a inquiry or start a new one.": "Enter a inquiry or start a new one.",
    "participated": "participated",
    "closed": "closed",
    "By:": "By:",
    "Details": "Details",
    "Attachments": "Attachments",
    "Sharing": "Sharing",
    "Activity": "Activity",
    "Select inquiries to combine": "Select inquiries to combine",
    "Configuration": "Configuration",
    "Set your personal preferences for the agora app": "Set your personal preferences for the agora app",
    "Experimental styles": "Experimental styles",
    "Some visual styling options.": "Some visual styling options."
  },
  "pluralForm": "nplurals=2; plural=(n != 1);"
}